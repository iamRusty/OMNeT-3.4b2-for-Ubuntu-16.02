%description:
Subclassing cObject: *must* take ownership of members subclassed from cObject,
and destructor must call drop().

%global:

class {Noisy} : public cObject
{
  public:
    {Noisy}(const char *name=NULL) : cObject(name) {ev << "noisy born\n";}
    ~{Noisy}() {ev << "noisy died\n";}
};

class X2 : public cObject
{
  public:
    {Noisy} y;

    X2() : cObject() {take(&y);}
    ~X2() {drop(&y);}
};

%activity:

X2 *x = new X2();
x->y.setName("yname");
delete x;

%contains-regex: stdout
noisy born.*
noisy died

%not-contains-regex: stdout
noisy died.*
noisy died


