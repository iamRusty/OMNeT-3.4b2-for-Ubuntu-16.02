%description:
Tests reference counting of encapsulated messages.

%activity:
cMessage *payload = new cMessage;
ev << "sharecount=" << payload->shareCount() << "\n";

// encapsulate
cMessage *msg0 = new cMessage;
msg0->encapsulate(payload);
ev << "after encap: sharecount=" << payload->shareCount() << "\n";

// duplicate msg three times: this must result in sharecount=3
cMessage *msg1 = (cMessage *)msg0->dup();
ev << "after dup: sharecount=" << payload->shareCount() << "\n";

cMessage *msg2 = (cMessage *)msg1->dup();
ev << "after dup: sharecount=" << payload->shareCount() << "\n";

cMessage *msg3 = (cMessage *)msg0->dup();
ev << "after dup: sharecount=" << payload->shareCount() << "\n";

// decapsulate: this should cause an own (non-shared) copy to be made
cMessage *decapsmsg = msg1->decapsulate();
ev << "after decap: sharecount=" << payload->shareCount() << ", "
   << (payload==decapsmsg ? "same" : "different") << ", "
   << "decapsmsg.sharecount=" << decapsmsg->shareCount() << "\n";

// test encapsulatedMsg:  this should cause an own (non-shared) copy to be made
cMessage *encapmsg = msg2->encapsulatedMsg();
ev << "after encapsulatedmsg: sharecount=" << payload->shareCount() << ", "
   << (payload==encapmsg ? "same" : "different") << ", "
   << "encapmsg.sharecount=" << encapmsg->shareCount() << "\n";

// test delete with sharecount=0
delete msg2;

// test delete with sharecount>0
delete msg3;
ev << "after delete: sharecount=" << payload->shareCount() << "\n";

delete msg0;

%contains: stdout
sharecount=0
after encap: sharecount=0
after dup: sharecount=1
after dup: sharecount=2
after dup: sharecount=3
after decap: sharecount=2, different, decapsmsg.sharecount=0
after encapsulatedmsg: sharecount=1, different, encapmsg.sharecount=0
after delete: sharecount=0

