%description:
check that cQueue::operator=() preserves order
check that sorting by compareFunc() works correctly

%module: {Queues}
int compareFunc(cObject* a, cObject* b)
{
  if (atol(a->name()) > atol(b->name()))
    return 1;
  else if (atol(a->name()) < atol(b->name()))
    return -1;
  else
    return 0;
};

class {Queues} : public cSimpleModule
{
	Module_Class_Members({Queues}, cSimpleModule, 16384);
	virtual void activity();
        void fillQueue(cQueue& q);
        void output(cQueue& q, char* prefix);
};

Define_Module({Queues});

void {Queues}::fillQueue(cQueue& q)
{
  cPar* parm = NULL;
  parm = new cPar("1");
  q.insert(parm);
  parm = new cPar("3");
  q.insert(parm);
  parm = new cPar("2");
  q.insert(parm);
}

void {Queues}::output(cQueue& q, char* prefix)
{
  ev << prefix << " " << q.name() << ":";
  while (!q.empty()) 
    ev << " " << q.pop()->name();
  ev << endl;
}

void {Queues}::activity()
{
  cQueue initial("Initial");
  cQueue duplicate("Duplicate");

  // test as a fifo (unsorted)
  fillQueue(initial);
  duplicate = initial;
  output(initial, "Unsorted");
  output(duplicate, "Unsorted");

  initial.clear();
  duplicate.clear();

  // test as sorted descending
  initial.setup(&compareFunc, false);

  fillQueue(initial);
  duplicate = initial;
  output(initial, "Descending");
  output(duplicate, "Descending");

  initial.clear();
  duplicate.clear();

  // test as sorted ascending
  initial.setup(&compareFunc, true);

  fillQueue(initial);
  duplicate = initial;
  output(initial, "Ascending");
  output(duplicate, "Ascending");
}

%contains: stdout
Unsorted Initial: 1 3 2
Unsorted Duplicate: 1 3 2
Descending Initial: 1 2 3
Descending Duplicate: 1 2 3
Ascending Initial: 3 2 1
Ascending Duplicate: 3 2 1
