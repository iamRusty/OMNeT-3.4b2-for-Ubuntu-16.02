#
#  Makefile for sockets
#
#  ** This file was automatically generated by the command:
#  opp_makemake -f -m -N
#

# Name of target to be created (-o option)
TARGET = sockets

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH=

# misc additional object and library files to link
EXTRA_OBJS=

# object files from other directories to link with (wildcard needed to prevent "no such file *.o" errors)
EXT_DIR_OBJS=

# time stamps of other directories (used as dependency)
EXT_DIR_TSTAMPS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------

NEDC=/home/rusty/Desktop/omnetpp-3.4b2/bin/nedtool
MSGC=opp_msgc
CXX=g++
CC=gcc
AR=ar cr
SHLIB_LD=g++ -shared -fPIC
MAKEDEPEND=opp_makedep -Y --objdirtree

CFLAGS=-O2 -DNDEBUG=1 -fPIC  -DWITH_PARSIM -DWITH_NETBUILDER
NEDCFLAGS=-Wno-unused
LDFLAGS=
EXE_SUFFIX=

WITH_PARSIM=yes
WITH_NETBUILDER=yes

OMNETPP_INCL_DIR=/home/rusty/Desktop/omnetpp-3.4b2/include
OMNETPP_LIB_DIR=/home/rusty/Desktop/omnetpp-3.4b2/lib

TK_LIBS= -ltk8.5 -ltcl8.5
MPI_LIBS=
XML_LIBS=-lxml2
SYS_LIBS=-ldl -lstdc++ 
SYS_LIBS_PURE=-lm $(shell $(CXX) -print-file-name=libstdc++.a)

# User interface libs
CMDENV_LIBS=-lenvir -lcmdenv
TKENV_LIBS=-lenvir -ltkenv $(TK_LIBS)

# Simulation kernel
KERNEL_LIBS=-lsim_std

ifeq ($(WITH_NETBUILDER),yes)
KERNEL_LIBS += -lnedxml $(XML_LIBS)
endif

ifeq ($(WITH_PARSIM),yes)
KERNEL_LIBS += $(MPI_LIBS)
endif

# Simulation kernel and user interface libraries
OMNETPP_LIBS=-L$(OMNETPP_LIB_DIR) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
NEDCOPTS=$(COPTS) $(NEDCFLAGS)
MSGCOPTS= $(INCLUDE_PATH)

#------------------------------------------------------------------------------

# subdirectories to recurse into
SUBDIRS= 

# object files in this directory
OBJS= httpmsg_m.o netpkt_m.o telnetpkt_m.o cloud.o csocketrtscheduler.o exthttpclient.o exttelnetclient.o httpclient.o httpserver.o queuebase.o telnetclient.o telnetserver.o

# header files generated (from msg files)
GENERATEDHEADERS= httpmsg_m.h netpkt_m.h telnetpkt_m.h

#------------------------------------------------------------------------------

$(TARGET): $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	$(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) $(OMNETPP_LIBS) -o $(TARGET)
	echo>.tstamp

$(OBJS) : $(GENERATEDHEADERS)


purify: $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

httpmsg_m.o: httpmsg_m.cc
	$(CXX) -c $(NEDCOPTS) httpmsg_m.cc

httpmsg_m.cc httpmsg_m.h: httpmsg.msg
	$(MSGC) $(MSGCOPTS) httpmsg.msg

netpkt_m.o: netpkt_m.cc
	$(CXX) -c $(NEDCOPTS) netpkt_m.cc

netpkt_m.cc netpkt_m.h: netpkt.msg
	$(MSGC) $(MSGCOPTS) netpkt.msg

telnetpkt_m.o: telnetpkt_m.cc
	$(CXX) -c $(NEDCOPTS) telnetpkt_m.cc

telnetpkt_m.cc telnetpkt_m.h: telnetpkt.msg
	$(MSGC) $(MSGCOPTS) telnetpkt.msg

cloud.o: cloud.cc
	$(CXX) -c $(COPTS) cloud.cc

csocketrtscheduler.o: csocketrtscheduler.cc
	$(CXX) -c $(COPTS) csocketrtscheduler.cc

exthttpclient.o: exthttpclient.cc
	$(CXX) -c $(COPTS) exthttpclient.cc

exttelnetclient.o: exttelnetclient.cc
	$(CXX) -c $(COPTS) exttelnetclient.cc

httpclient.o: httpclient.cc
	$(CXX) -c $(COPTS) httpclient.cc

httpserver.o: httpserver.cc
	$(CXX) -c $(COPTS) httpserver.cc

queuebase.o: queuebase.cc
	$(CXX) -c $(COPTS) queuebase.cc

telnetclient.o: telnetclient.cc
	$(CXX) -c $(COPTS) telnetclient.cc

telnetserver.o: telnetserver.cc
	$(CXX) -c $(COPTS) telnetserver.cc


#doc: neddoc doxy

#neddoc:
#	opp_neddoc -a

#doxy: doxy.cfg
#	doxygen doxy.cfg

generateheaders: $(GENERATEDHEADERS)
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) generateheaders) || exit 1; done

clean:
	rm -f $(TARGET)$(EXE_SUFFIX)
	rm -f *.o *_n.cc *_n.h *_m.cc *_m.h .tstamp
	rm -f *.vec *.sca
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -- *.cc
	# $(MAKEDEPEND) $(INCLUDE_PATH) -fMakefile.in -- *.cc
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) depend) || exit 1; done

makefiles:
	# recreate Makefile
	opp_makemake -f  -N 
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefiles) || exit 1; done

makefile-ins:
	# recreate Makefile.in
	opp_makemake -f -m  -N 
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefile-ins) || exit 1; done

# "re-makemake" and "re-makemake-m" are deprecated, historic names of the above two targets
re-makemake: makefiles
re-makemake-m: makefile-ins


# DO NOT DELETE THIS LINE -- make depend depends on it.
cloud.o: cloud.cc
csocketrtscheduler.o: csocketrtscheduler.cc \
  csocketrtscheduler.h
exthttpclient.o: exthttpclient.cc \
  csocketrtscheduler.h
exttelnetclient.o: exttelnetclient.cc \
  csocketrtscheduler.h
httpclient.o: httpclient.cc
httpserver.o: httpserver.cc \
  httpserver.h \
  queuebase.h
queuebase.o: queuebase.cc \
  queuebase.h
telnetclient.o: telnetclient.cc
telnetserver.o: telnetserver.cc \
  telnetserver.h \
  queuebase.h
