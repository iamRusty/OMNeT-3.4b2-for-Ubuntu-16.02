#
#  Makefile for tictoc
#
#  ** This file was automatically generated by the command:
#  opp_makemake -f -m -N
#

# Name of target to be created (-o option)
TARGET = tictoc

# User interface (uncomment one) (-u option)
# USERIF_LIBS=$(CMDENV_LIBS)
USERIF_LIBS=$(TKENV_LIBS)

# .ned or .h include paths with -I
INCLUDE_PATH=

# misc additional object and library files to link
EXTRA_OBJS=

# object files from other directories to link with (wildcard needed to prevent "no such file *.o" errors)
EXT_DIR_OBJS=

# time stamps of other directories (used as dependency)
EXT_DIR_TSTAMPS=

# Additional libraries (-L option -l option)
LIBS=

#------------------------------------------------------------------------------

NEDC=/home/rusty/Desktop/omnetpp-3.4b2/bin/nedtool
MSGC=opp_msgc
CXX=g++
CC=gcc
AR=ar cr
SHLIB_LD=g++ -shared -fPIC
MAKEDEPEND=opp_makedep -Y --objdirtree

CFLAGS=-O2 -DNDEBUG=1 -fPIC  -DWITH_PARSIM -DWITH_NETBUILDER
NEDCFLAGS=-Wno-unused
LDFLAGS=
EXE_SUFFIX=

WITH_PARSIM=yes
WITH_NETBUILDER=yes

OMNETPP_INCL_DIR=/home/rusty/Desktop/omnetpp-3.4b2/include
OMNETPP_LIB_DIR=/home/rusty/Desktop/omnetpp-3.4b2/lib

TK_LIBS= -ltk8.5 -ltcl8.5
MPI_LIBS=
XML_LIBS=-lxml2
SYS_LIBS=-ldl -lstdc++ 
SYS_LIBS_PURE=-lm $(shell $(CXX) -print-file-name=libstdc++.a)

# User interface libs
CMDENV_LIBS=-lenvir -lcmdenv
TKENV_LIBS=-lenvir -ltkenv $(TK_LIBS)

# Simulation kernel
KERNEL_LIBS=-lsim_std

ifeq ($(WITH_NETBUILDER),yes)
KERNEL_LIBS += -lnedxml $(XML_LIBS)
endif

ifeq ($(WITH_PARSIM),yes)
KERNEL_LIBS += $(MPI_LIBS)
endif

# Simulation kernel and user interface libraries
OMNETPP_LIBS=-L$(OMNETPP_LIB_DIR) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS=$(CFLAGS) $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
NEDCOPTS=$(COPTS) $(NEDCFLAGS)
MSGCOPTS= $(INCLUDE_PATH)

#------------------------------------------------------------------------------

# subdirectories to recurse into
SUBDIRS= 

# object files in this directory
OBJS= tictoc10_m.o tictoc11_m.o tictoc12_m.o txc10.o txc11.o txc12.o txc1.o txc2.o txc3.o txc4.o txc5.o txc6.o txc7.o txc8.o txc9.o

# header files generated (from msg files)
GENERATEDHEADERS= tictoc10_m.h tictoc11_m.h tictoc12_m.h

#------------------------------------------------------------------------------

$(TARGET): $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	$(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) $(OMNETPP_LIBS) -o $(TARGET)
	echo>.tstamp

$(OBJS) : $(GENERATEDHEADERS)


purify: $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_TSTAMPS) Makefile
	purify $(CXX) $(LDFLAGS) $(OBJS) $(EXTRA_OBJS) $(EXT_DIR_OBJS) $(LIBS) -L$(OMNETPP_LIB_DIR) $(KERNEL_LIBS) $(USERIF_LIBS) $(SYS_LIBS_PURE) -o $(TARGET).pure

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

tictoc10_m.o: tictoc10_m.cc
	$(CXX) -c $(NEDCOPTS) tictoc10_m.cc

tictoc10_m.cc tictoc10_m.h: tictoc10.msg
	$(MSGC) $(MSGCOPTS) tictoc10.msg

tictoc11_m.o: tictoc11_m.cc
	$(CXX) -c $(NEDCOPTS) tictoc11_m.cc

tictoc11_m.cc tictoc11_m.h: tictoc11.msg
	$(MSGC) $(MSGCOPTS) tictoc11.msg

tictoc12_m.o: tictoc12_m.cc
	$(CXX) -c $(NEDCOPTS) tictoc12_m.cc

tictoc12_m.cc tictoc12_m.h: tictoc12.msg
	$(MSGC) $(MSGCOPTS) tictoc12.msg

txc10.o: txc10.cc
	$(CXX) -c $(COPTS) txc10.cc

txc11.o: txc11.cc
	$(CXX) -c $(COPTS) txc11.cc

txc12.o: txc12.cc
	$(CXX) -c $(COPTS) txc12.cc

txc1.o: txc1.cc
	$(CXX) -c $(COPTS) txc1.cc

txc2.o: txc2.cc
	$(CXX) -c $(COPTS) txc2.cc

txc3.o: txc3.cc
	$(CXX) -c $(COPTS) txc3.cc

txc4.o: txc4.cc
	$(CXX) -c $(COPTS) txc4.cc

txc5.o: txc5.cc
	$(CXX) -c $(COPTS) txc5.cc

txc6.o: txc6.cc
	$(CXX) -c $(COPTS) txc6.cc

txc7.o: txc7.cc
	$(CXX) -c $(COPTS) txc7.cc

txc8.o: txc8.cc
	$(CXX) -c $(COPTS) txc8.cc

txc9.o: txc9.cc
	$(CXX) -c $(COPTS) txc9.cc


#doc: neddoc doxy

#neddoc:
#	opp_neddoc -a

#doxy: doxy.cfg
#	doxygen doxy.cfg

generateheaders: $(GENERATEDHEADERS)
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) generateheaders) || exit 1; done

clean:
	rm -f $(TARGET)$(EXE_SUFFIX)
	rm -f *.o *_n.cc *_n.h *_m.cc *_m.h .tstamp
	rm -f *.vec *.sca
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

depend:
	$(MAKEDEPEND) $(INCLUDE_PATH) -- *.cc
	# $(MAKEDEPEND) $(INCLUDE_PATH) -fMakefile.in -- *.cc
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) depend) || exit 1; done

makefiles:
	# recreate Makefile
	opp_makemake -f  -N 
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefiles) || exit 1; done

makefile-ins:
	# recreate Makefile.in
	opp_makemake -f -m  -N 
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) makefile-ins) || exit 1; done

# "re-makemake" and "re-makemake-m" are deprecated, historic names of the above two targets
re-makemake: makefiles
re-makemake-m: makefile-ins


# DO NOT DELETE THIS LINE -- make depend depends on it.
txc10.o: txc10.cc
txc11.o: txc11.cc
txc12.o: txc12.cc
txc1.o: txc1.cc
txc2.o: txc2.cc
txc3.o: txc3.cc
txc4.o: txc4.cc
txc5.o: txc5.cc
txc6.o: txc6.cc
txc7.o: txc7.cc
txc8.o: txc8.cc
txc9.o: txc9.cc
