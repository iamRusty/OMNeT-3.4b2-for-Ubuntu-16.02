//
// Generated file, do not edit! Created by opp_msgc 3.4 from token.msg.
//

#ifndef _TOKEN_M_H_
#define _TOKEN_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0304
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif


/**
 * Enum generated from <tt>token.msg</tt> by opp_msgc.
 * <pre>
 * enum TRTypes
 * {
 *     TR_TOKEN = 1;
 *     TR_FRAME = 2;
 * };
 * </pre>
 */
enum TRTypes {
    TR_TOKEN = 1,
    TR_FRAME = 2
};

/**
 * Class generated from <tt>token.msg</tt> by opp_msgc.
 * <pre>
 * message TRApplicationData
 * {
 *     fields:
 *        int destination;
 *        string data;
 * };
 * </pre>
 */
class TRApplicationData : public cMessage
{
  protected:
    int destination_var;
    opp_string data_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TRApplicationData&);

  public:
    TRApplicationData(const char *name=NULL, int kind=0);
    TRApplicationData(const TRApplicationData& other);
    virtual ~TRApplicationData();
    TRApplicationData& operator=(const TRApplicationData& other);
    virtual cPolymorphic *dup() const {return new TRApplicationData(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getDestination() const;
    virtual void setDestination(int destination_var);
    virtual const char * getData() const;
    virtual void setData(const char * data_var);
};

inline void doPacking(cCommBuffer *b, TRApplicationData& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, TRApplicationData& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>token.msg</tt> by opp_msgc.
 * <pre>
 * message TRToken
 * {
 *     fields:
 * };
 * </pre>
 */
class TRToken : public cMessage
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TRToken&);

  public:
    TRToken(const char *name=NULL, int kind=0);
    TRToken(const TRToken& other);
    virtual ~TRToken();
    TRToken& operator=(const TRToken& other);
    virtual cPolymorphic *dup() const {return new TRToken(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, TRToken& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, TRToken& obj) {obj.netUnpack(b);}

/**
 * Class generated from <tt>token.msg</tt> by opp_msgc.
 * <pre>
 * message TRFrame
 * {
 *     fields:
 *        int source;
 *        int destination;
 * };
 * </pre>
 */
class TRFrame : public cMessage
{
  protected:
    int source_var;
    int destination_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TRFrame&);

  public:
    TRFrame(const char *name=NULL, int kind=0);
    TRFrame(const TRFrame& other);
    virtual ~TRFrame();
    TRFrame& operator=(const TRFrame& other);
    virtual cPolymorphic *dup() const {return new TRFrame(*this);}
    virtual void netPack(cCommBuffer *b);
    virtual void netUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSource() const;
    virtual void setSource(int source_var);
    virtual int getDestination() const;
    virtual void setDestination(int destination_var);
};

inline void doPacking(cCommBuffer *b, TRFrame& obj) {obj.netPack(b);}
inline void doUnpacking(cCommBuffer *b, TRFrame& obj) {obj.netUnpack(b);}

#endif // _TOKEN_M_H_
