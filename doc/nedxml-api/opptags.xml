<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ NEDXML API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="file">
    <name>cppexprgenerator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>cppexprgenerator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">CppExpressionGenerator</class>
    <class kind="struct">CppExpressionGenerator::ExpressionInfo</class>
  </compound>
  <compound kind="file">
    <name>cppgenerator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>cppgenerator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="cppexprgenerator_8h" name="cppexprgenerator.h" local="yes" imported="no">cppexprgenerator.h</includes>
    <includes id="nedcompiler_8h" name="nedcompiler.h" local="yes" imported="no">nedcompiler.h</includes>
    <class kind="class">NEDCppGenerator</class>
    <member kind="function">
      <type>void</type>
      <name>generateCpp</name>
      <anchorfile>group__CppGenerator.html</anchorfile>
      <anchor>g055fc998e7f139730a27a70977f51329</anchor>
      <arglist>(ostream &amp;out, ostream &amp;outh, NEDElement *node, NEDSymbolTable *symtab)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>index.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>index_8h</filename>
  </compound>
  <compound kind="file">
    <name>ned.tab.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>ned_8tab_8h</filename>
    <class kind="struct">YYLTYPE</class>
    <member kind="define">
      <type>#define</type>
      <name>INCLUDE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>391839f157e857028cd094e755cc2233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMPLE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>f24471f1578a70e28e9c6775449d88b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHANNEL</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>ce6a11e892466500d47d1f45f042bc53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MODULE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>2c63ae95fe7c6106ae1ec9c283afa486</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PARAMETERS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>9e4247f482c47b0c2ed1a5684bae1f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GATES</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>e97ed27398317dcf3bb658424954883f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GATESIZES</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>fbcf983afbd1a4711b1b6473bde696e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SUBMODULES</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4a08a0743a54d80ec62a9a0fd6bc3e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONNECTIONS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>b5e65a957b83d792bcaf547766f49ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISPLAY</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>b4bf926a45354a2f328f1a7b94ebd3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IN</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>c2bbd6d630a06a980d9a92ddb9a49928</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OUT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>ec78e7a9e90a406a56f859ee456e8eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOCHECK</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>926a31e3b8ceab24aba3be9fa3b2f972</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEFT_ARROW</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>e78ccf44cb7970752cbfeb22e6a66d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RIGHT_ARROW</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>9ed2533108b634266a6261c8f37e4fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FOR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>6634515171060cf2f7afd70a96cb9bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TO</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>f75a3636100d46e8e30e2797e2ec7471</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DO</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>89f8701562ac09bf5c1e58516124c500</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IF</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>c138c68a0709c57bc5f7567abc1558eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LIKE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>98120a08ef36f426749e1ec5c47147c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NETWORK</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>f24f428a59a4f0f3bca0428de5d8958e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDSIMPLE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>afed1577e9c2ff4e4b09c2956bb08ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDMODULE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>b3545862c490459078e6719b37fe7462</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDCHANNEL</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>5a4fe5222def04ba919e881ef4407efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDNETWORK</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>226f6484339d3a0467028031ddf8ac95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENDFOR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>62c7f2ec15cb2bc858f3135f52094880</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MACHINES</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>c0dbb7f9dd46453862e0332037af2587</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ON</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>d76d1750a6cdeebd506bfcd6752554d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHANATTRNAME</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>2d9e4c15cf2bdf678eaa0987346cd2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTCONSTANT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>54da92ecac2003270bdba7a7d69eea8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REALCONSTANT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>6e86c203b111564d375434007ca82edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NAME</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>47f2e62c0dbebc787052c165afcada0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRINGCONSTANT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>19d2eba99f95ee82cbcb4f6c8b2f903a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHARCONSTANT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>fdd1d289a789841d72b75dcb64e9dea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRUE_</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>ca1e6c3771fa0306e1dad2b11d22a8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FALSE_</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>d4986ecbba005b963f63a85f7c8c281d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INPUT_</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>bc07662af1341880d9c38bfb0ac31ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XMLDOC</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>c607f01f7a50245e257c9c09bf4fc371</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REF</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>a3b633c1a963f8868f44e8fc27904649</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANCESTOR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>e6199b24fc964773ef9057dc1c53aebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONSTDECL</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>eabcf5734225e4fc8b3095f191abead3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUMERICTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>42e4ce0be7b87f6c1f782a716eb2db40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRINGTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>e3c0c75e52a81351f42d0b452d72fa5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOLTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>446f9b29c37f494a1d74fdf12dfca6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XMLTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>f09173f3957f65488a15f231f894c65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ANYTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>b41f3baf0803bc3e829f6e4606114cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CPLUSPLUS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>7f9c0dc3641dae5a211eb9d9feb93f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CPLUSPLUSBODY</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>7c4d8d7dbebe3bc71eed5808862fa959</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MESSAGE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>f8a3e30cb4858ca8a098acae107286c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLASS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>eb04f2e0012cb07d68538599161c9693</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRUCT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>88b4cb090646c7bb2f20b3dc9cdc9640</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENUM</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>378181c29a641d58f55d647b5a9599f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NONCOBJECT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>a5e18d8a7a868940384157162d6afbd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXTENDS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>8d5395ae941e991ee0d577611fe9ef83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FIELDS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>16210f5ec456adef4dc1a868862d8a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROPERTIES</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>8600d139046f426a8d99c4ae7f27ed5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ABSTRACT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>fac4c0927892b28c42e3bbb664df5d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>READONLY</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4fe050ad41ce8823deb2010f9c75ae85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHARTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>37f049b22831de3b1236d503412c143d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHORTTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4912e6d2d07fe673d3e10602c311bdee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>0659130d6949456615a8c816a38bb166</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LONGTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4bad68e925f19c6c4bca13755f098df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOUBLETYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4a62c39d1656bda38f2655e2c41ad74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNSIGNED_</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>afdd48662375fcf0edd94d8144a3e9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIZEOF</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>2a2364e237449400b9b4a26388131796</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SUBMODINDEX</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>cf618bbc247cdc04434a905ac0eff6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLUSPLUS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>50f4dcb9af1e6428f106beaedc658b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EQ</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>baab8d42f075ee8ddc9b70951d3fd6cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>5af9139e882aef6c820ae908589a40d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>b89310b3f2f97e4e9415fc5a51549612</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>38a01c8e60e89c1d671a68259085288f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LS</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>eb0ce037090c628feafc65349031b214</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>a4d6abc7b58eb11e517993df83b7f0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AND</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>cd1b97556dfbbac61063a63031d2f91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>3363ca4d6d3cc0230b2804280591c991</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XOR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>45cd11034d1a7d86c3a88d36f5e7f1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>d3e9fe0ec59d2dbb3982ababa042720c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIN_AND</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>34d1c579e67e1698527523d476e5baaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIN_OR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>0a0b8507f34a2f2d4137cc8d1d6e14ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIN_XOR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>a771f3eb4fb6e0b4ed23cb59d112a547</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIN_COMPL</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>096e35d4474ce594d89b4f533876d90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHIFT_LEFT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>034963f41a47c5e3d3b52def7f25ee06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHIFT_RIGHT</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4cba8e36c31dcfb39982e0154d192ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INVALID_CHAR</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>30ee9df6fb7620c92658da971e911941</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UMIN</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>368a0522dcd74f477a7858102b663b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yystype</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4ccf5315e8f5c1cec48ec67ca1771e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_DECLARED</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>f0232d21120b2cfc5e5f82f0fbadab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_TRIVIAL</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>2e3dbf169c5ee24cf6af37c61cf3995d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyltype</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>e2ea1b9f8896c4587b575b5196e60cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLTYPE_IS_DECLARED</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>4332d355678b732da19b65634dc8df36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLTYPE_IS_TRIVIAL</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>a74132fedf91ad815c092333af771376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>YYSTYPE</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>2af2fd0824f967ec31ce1773894931e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>yytokentype</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCLUDE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa92f6f94469432973066c534d9bd1d1a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMPLE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa91a6b6e9893ec9e5d9710335b4c74d3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANNEL</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9d9d3e3b5dc628d73e5ec4da418f2a6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa989e95e5d1ee3b8077a76005fb143771c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARAMETERS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9d11aad7580a1dfde8fd0be6832f6d31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GATES</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9568b59df2792e4304f25a9533d37d0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GATESIZES</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9f12ad39e55d646f85bc05ef9581ac4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBMODULES</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9cb5dca88d82a97d74b1c86841eedc655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTIONS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9d9dca57ba942acbb3e50057c8cf13278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISPLAY</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9b853c1004c3396eaa2a89d575d12fa79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IN</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9f3180515f5867a29932df1dc207b31ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9c72cb4ba9e379a25e80f157177dbe2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOCHECK</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa923d115f0496bb8712774cd2cc1ab97e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEFT_ARROW</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa95dfa7318822abaa401347107d89ae9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RIGHT_ARROW</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa967842bdd9404946ad33353a26fac6f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FOR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9a809654855caa62449850d9122fd77a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TO</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa97a745bf8e4299d36823f18d0c317cee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DO</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9bfea6036e64d9c7c773d277a57d2f959</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IF</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9252802eda493fb6b4a279c4452acb547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIKE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9a2d2e0af4765444f49b02f373dbf09df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa956a2a28eb93430f5083e6427bc59319c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDSIMPLE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9b70618d099ebb78a5137cc21354e605f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDMODULE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9c9dae7c64239249cf9959c1d18e08c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDCHANNEL</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa962af5d9ff2cce441e3e8088003afd744</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDNETWORK</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa984f112c2a9b939624283c1093c9afad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENDFOR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa918062d5e10eae0b2fc5361af64efdc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MACHINES</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9a8403beab4fa5ec341cb07808810fdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ON</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9977d478dacaae531f95695750d1e9d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHANATTRNAME</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9324264a0465c5fbe1cbee4586b8b183c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTCONSTANT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa97afab556703f9767f13771e661f1c76b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REALCONSTANT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9811de4a365faa9d487865516d9b209b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa967bc2ced260a8e43805d2480a785d312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRINGCONSTANT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9de8e56e67b0d4624769c39a1c2b83dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHARCONSTANT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa99ebb3b5af196d38645fab18a15931856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRUE_</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9f497c2d65ca909475aebbbdb0cecdf76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FALSE_</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa909ed3e936cbaf5ce18b3b45f1e3238b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INPUT_</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9cf92e04a6a681fe1eda0d7cb300dfbe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XMLDOC</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa99450bcea9df4dff5b11cab88f4b082aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REF</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9bfdf17eb53b95728af2d4afeff366dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANCESTOR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa91dab13980ff64dd8cf4eb2c6924f65b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTDECL</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa906bbea448c434cfb5c37d02a8fe8f8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMERICTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa930f49c2e348182e831b1ac5c0c9b2b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRINGTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9e1717a5be2df5e14c96d51116b05d16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOLTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9f3c713ad164f594d52a25a7fc5b8b806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XMLTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa958e2351c176515e77b0edd3c4495bc99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANYTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa992532b93c535d32fb6ea6a00c7700e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CPLUSPLUS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa917440129f03cc873aa3cdab59b6c32c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CPLUSPLUSBODY</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa99561f9b950eb6e8b055c3d4d7746ba4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9b3e6d7e18839259526a01001f558200f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLASS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa98dabc58c34c5df57f2151d6f233d6c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRUCT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9840fc36796c5af05b4616165e6449dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENUM</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa95bc38f5ef3a09fbc02c3f3576277a5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONCOBJECT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa94783331e736e020d7f37357879036230</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTENDS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9a42036d5711155c7b0803e2c40be7c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIELDS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa96fe2638ee58344c8104e71cf1767c48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTIES</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9047ba7196577e06074ca7356435a1bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABSTRACT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa97b62cfe03ccf259e4f0a1be2bf90491f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READONLY</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9626af06d585fcb18d2cd6cdec0d235cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHARTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa93e9c980470a97e9605a9a9f6ecf5e707</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHORTTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9686b8667a64e5fc753d7085ac8aaf22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9dee5b191108342e6742e3e42fab3acb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LONGTYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa900c17eddce6edcd88ba65da67b485dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLETYPE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa908856d73d8f04cbfb5a2bfbce5471d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSIGNED_</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9e339108240d08efa79b10baf3ca97de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZEOF</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9acf3a9a27bdfb0bd9fba6a5420768f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBMODINDEX</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9d77d3adf6735d2cf8d97b964f3f64b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLUSPLUS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa90154998e9cd921a68d90d767f4a7ee3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EQ</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa99efdc855f3c1477957fb50affec07f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa94d3f872f5054b256b01ee4f2c8cf51db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa912f5476fa04803e6cc72f2198730d892</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9558711b4a2a25070b970d85f5926d5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LS</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa902184fb9810a874bca5d19359ab57a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LE</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9662ed4b51721a45f07d645d4ca099a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AND</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9865555c9f2e0458a7078486aa1b3254f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa996727447c0ad447987df1c6415aef074</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XOR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9c62338ffb5de22369c75caa565b5da1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa90378ebc895849163b249d0b330257dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIN_AND</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9ecb49f088fefe73f3c58be790d55f396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIN_OR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa94c5cb2de48ec1afa97c3d41f72f3549a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIN_XOR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa900d4d82b89a1d06b8d2d0e55f45fa3d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIN_COMPL</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9f5e2d6a8f2c136d1dfdc7f0afa741992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHIFT_LEFT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa96b92a832eae42ec7818fa36a5c5b4799</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SHIFT_RIGHT</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9ac747046082df3e61fbd91b181a92a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CHAR</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9fdfa1056b2c4aa1ec5f98772e822c3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMIN</name>
      <anchor>15c9f7bd2f0e9686df5d9df4f3314aa9590d05a1f88e54492b1bb5b31e68a68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>nedyylval</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>fbf38864c6be84cb3dd7d6c75d4600a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYLTYPE</type>
      <name>nedyylloc</name>
      <anchorfile>ned_8tab_8h.html</anchorfile>
      <anchor>b6e1c7a8b474dfc19a9b258dad2135b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedbasicvalidator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedbasicvalidator_8h</filename>
    <includes id="nedvalidator_8h" name="nedvalidator.h" local="yes" imported="no">nedvalidator.h</includes>
    <class kind="class">NEDBasicValidator</class>
  </compound>
  <compound kind="file">
    <name>nedcompiler.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedcompiler_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="struct">ltstr</class>
    <class kind="class">NEDFileCache</class>
    <class kind="class">NEDSymbolTable</class>
    <class kind="class">NEDImportResolver</class>
    <class kind="class">NEDClassicImportResolver</class>
    <class kind="class">NEDCompiler</class>
    <member kind="typedef">
      <type>std::map&lt; const char *, NEDElement *, ltstr &gt;</type>
      <name>NEDMap</name>
      <anchorfile>nedcompiler_8h.html</anchorfile>
      <anchor>32b38584eb84557c57c16610c377a1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>NEDStringVector</name>
      <anchorfile>nedcompiler_8h.html</anchorfile>
      <anchor>0f15fb056f8cbf0da87c5e1733bfe66a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>neddtdvalidator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>neddtdvalidator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <includes id="nedvalidator_8h" name="nedvalidator.h" local="yes" imported="no">nedvalidator.h</includes>
    <class kind="class">NEDDTDValidator</class>
  </compound>
  <compound kind="file">
    <name>nedelement.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedelement_8h</filename>
    <class kind="class">NEDElementUserData</class>
    <class kind="class">NEDElement</class>
  </compound>
  <compound kind="file">
    <name>nedelements.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedelements_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <class kind="class">NedFilesNode</class>
    <class kind="class">NedFileNode</class>
    <class kind="class">ImportNode</class>
    <class kind="class">ImportedFileNode</class>
    <class kind="class">ChannelNode</class>
    <class kind="class">ChannelAttrNode</class>
    <class kind="class">NetworkNode</class>
    <class kind="class">SimpleModuleNode</class>
    <class kind="class">CompoundModuleNode</class>
    <class kind="class">ParamsNode</class>
    <class kind="class">ParamNode</class>
    <class kind="class">GatesNode</class>
    <class kind="class">GateNode</class>
    <class kind="class">MachinesNode</class>
    <class kind="class">MachineNode</class>
    <class kind="class">SubmodulesNode</class>
    <class kind="class">SubmoduleNode</class>
    <class kind="class">SubstparamsNode</class>
    <class kind="class">SubstparamNode</class>
    <class kind="class">GatesizesNode</class>
    <class kind="class">GatesizeNode</class>
    <class kind="class">SubstmachinesNode</class>
    <class kind="class">SubstmachineNode</class>
    <class kind="class">ConnectionsNode</class>
    <class kind="class">ConnectionNode</class>
    <class kind="class">ConnAttrNode</class>
    <class kind="class">ForLoopNode</class>
    <class kind="class">LoopVarNode</class>
    <class kind="class">DisplayStringNode</class>
    <class kind="class">ExpressionNode</class>
    <class kind="class">OperatorNode</class>
    <class kind="class">FunctionNode</class>
    <class kind="class">ParamRefNode</class>
    <class kind="class">IdentNode</class>
    <class kind="class">ConstNode</class>
    <class kind="class">CplusplusNode</class>
    <class kind="class">StructDeclNode</class>
    <class kind="class">ClassDeclNode</class>
    <class kind="class">MessageDeclNode</class>
    <class kind="class">EnumDeclNode</class>
    <class kind="class">EnumNode</class>
    <class kind="class">EnumFieldsNode</class>
    <class kind="class">EnumFieldNode</class>
    <class kind="class">MessageNode</class>
    <class kind="class">ClassNode</class>
    <class kind="class">StructNode</class>
    <class kind="class">FieldsNode</class>
    <class kind="class">FieldNode</class>
    <class kind="class">PropertiesNode</class>
    <class kind="class">PropertyNode</class>
    <class kind="class">UnknownNode</class>
    <class kind="class">NEDElementFactory</class>
    <member kind="enumeration">
      <name>NEDElementCode</name>
      <anchor>gd34cccc2e635c441d3d7721c4c15b68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NED_FILES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c40452314d3bc7d1a1bfa6f196918c8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NED_FILE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c47a8aaf0e028d7dc9ef6e84686599af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IMPORT</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cc0d4ebcbad2ba024f9aa2a3459f44d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IMPORTED_FILE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c38a5a5a98cf19fd097d31cb47e9d0b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68ca5d202195e740e8da772a6e109f70d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL_ATTR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68ccc3d27c4c2b26c0f226ad3b1f9cb1f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NETWORK</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c49baab0207d82003b5c546df08cfff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SIMPLE_MODULE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c24308b4324187beac81e6920d09d31fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_COMPOUND_MODULE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c2f52963e4eb44e8aff5e3dd3707766cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAMS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c8e4d8efeb89eb96e153d1b3bf7a36c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAM</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cb54508e039787e6f0398f384430dc08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c28227565427af0c833a5bee75ef5d644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c12bb7f956774de679e41dc75e4d540df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MACHINES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6545e7fea53cd501a81633689e23918a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MACHINE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c5de77cb733d4db9819e209acaf54a0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c15ca0c9a2e2b66624bb6775019c7324b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c737cb9551d7e0f206a95594b9b4e51ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTPARAMS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6906efec943ce12a80e90df82705530d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTPARAM</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6ac40ee44a991d13f4ffe57ceb59a4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATESIZES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cf2c0ca9888fba66d86d3eec2b644f843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATESIZE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c9e292eabd0c7f9c5bc9b63b63cacb736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTMACHINES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cffabf6d8f6808275f3e4502abe54337f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTMACHINE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c75566a1e1eebed34f6a79f4ad2bffd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTIONS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c91040a6621bfc3dd6d6a1d49251b97c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTION</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c5a4b3bae4f85c56101b612c59d62a7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONN_ATTR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6ee06f720a279cd76969f34a560f87f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FOR_LOOP</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cdb97756772cbe0a4d32c44c201b85da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_LOOP_VAR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c290776706ad7d0dfddc572f4b1700649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_DISPLAY_STRING</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cd6dc3e3e90f73030accdbe3e2f211308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_EXPRESSION</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c734f944e9aff83bbc91a0955b1897e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_OPERATOR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cf527a555c91f595c4d8a87031e9a6576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FUNCTION</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c67c8ebfe2cdba16710b755fabd957b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAM_REF</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c18e3798f77d56b7a3f9bf00271eedc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IDENT</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c7af94c708923ef46195eb3f40a09e03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c04dfd92c2418b5a0adc97610178515b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CPLUSPLUS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c580edeb93570c921dd22b3aefab4cd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cd70d3465bf52a059f19f75b77882008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c8b9f948df5d9953eda28c4b599225041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c02f84cd957697624b7c37400ba00dc6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cabeb508e148820edf30d11819ac5df76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c2fe992d1dde8aeabc148e00701be03a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELDS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c8e14996df6f58540dbd1627654aef3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELD</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c50b0047b9bb5b428cc5cad20b99bc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c66d2f84f9f6159edd967a14f7c27b4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c9e9eee707e30a18866aa3827671383ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6671693f35af380e17da8157cb10f11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FIELDS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c014fa7e5ded799707be0c6896c8a06c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FIELD</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cefe111337aad0cad283a278378f7f34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTIES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68ca264dd186ed27b290290fc41c478fdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c366803979f7e863f328a2fc32d282e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_UNKNOWN</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c2dc1887831f5e3d5c57cd37acdccfda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATEDIR_INPUT</name>
      <anchor>06fc87d81c62e9abb8790b6e5713c55ba5c0f02b3217387ffdaf4678bb363233</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATEDIR_OUTPUT</name>
      <anchor>06fc87d81c62e9abb8790b6e5713c55b20d39d6e2b24d5caf2f464516be2ef4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ARROWDIR_LEFT</name>
      <anchor>df764cbdea00d65edcd07bb9953ad2b7d678de9192750b44ba2249262c7bca30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ARROWDIR_RIGHT</name>
      <anchor>df764cbdea00d65edcd07bb9953ad2b7338a686090debdb66ccd280c6dc9f5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_BOOL</name>
      <anchor>99fb83031ce9923c84392b4e92f956b514618ce2c296116b27fe55ce16205471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_INT</name>
      <anchor>99fb83031ce9923c84392b4e92f956b5d20b6bcc27f89550849690a374896c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_REAL</name>
      <anchor>99fb83031ce9923c84392b4e92f956b51730e9cb82a9531949b478499b29fa63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_STRING</name>
      <anchor>99fb83031ce9923c84392b4e92f956b581770be78156b5091a33b36be0561642</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST_TIME</name>
      <anchor>99fb83031ce9923c84392b4e92f956b55d72316af96665a2ce78389fce0470ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nederror.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nederror_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <class kind="class">NEDException</class>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR0</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>4c3d11a63e2590ad0e259dc59d5d2425</anchor>
      <arglist>(context, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR1</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>faa696dffa0e17a7033a09c5a2651b4e</anchor>
      <arglist>(context, msg, arg1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR2</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>fef2247c7bfd9b9e60090107620d8c0c</anchor>
      <arglist>(context, msg, arg1, arg2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INTERNAL_ERROR3</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>da383a951cc9e537c2643a1431f7c2a5</anchor>
      <arglist>(context, msg, arg1, arg2, arg3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NEDError</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>1f9db7e6b48772883b40f025399b7349</anchor>
      <arglist>(NEDElement *context, const char *message,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>errorsOccurred</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>0d399ab0efeaba35472fe1612d892e5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearErrors</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>5a1056d4e9d26a692f621e83be8cd8d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NEDInternalError</name>
      <anchorfile>nederror_8h.html</anchorfile>
      <anchor>f3eb1618945f8e8965229e5c1b3e37b3</anchor>
      <arglist>(const char *file, int line, NEDElement *context, const char *message,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedfilebuffer.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedfilebuffer_8h</filename>
    <includes id="nedparser_8h" name="nedparser.h" local="yes" imported="no">nedparser.h</includes>
    <class kind="class">NEDFileBuffer</class>
  </compound>
  <compound kind="file">
    <name>nedgenerator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedgenerator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDGenerator</class>
    <member kind="function">
      <type>void</type>
      <name>generateNed</name>
      <anchorfile>group__NEDGenerator.html</anchorfile>
      <anchor>gd11995032b7d55fc99feb4f79d6731f4</anchor>
      <arglist>(ostream &amp;out, NEDElement *node, bool newsyntax)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedgrammar.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedgrammar_8h</filename>
    <class kind="struct">my_yyltype</class>
    <class kind="struct">LineColumn</class>
    <member kind="define">
      <type>#define</type>
      <name>PARSER_PREFIX_USED</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>854f3d5ee77705f2abf433902ec192be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_create_buffer</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>c86ea8173dfcfc5c989d3295a77e2f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_delete_buffer</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>d1868c6b38b45af25a4a0f449912a808</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_scan_buffer</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>6849452203fd033f103556fdf858fd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_scan_string</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>6c5cf8c3b7a69bf60a87dd6eb00fe579</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_scan_bytes</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>3b70699ea880c5d25a1c75f4ad96c315</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_flex_debug</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>301f4439c9b191c80db45f5b1a8c7269</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_init_buffer</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>a14efad9f9c24106a3e3398a4f6621c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_flush_buffer</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>b01a4c7245136f22a63acac7c0ceb343</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_load_buffer_state</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>039fc377fd4784139d8706ba0ae229fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_switch_to_buffer</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>968d5b9e7e06a38bfca977b343d47d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyin</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>a789f4617e33fb99594cb04a3688a0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyleng</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>fa07a629486cb790560bb95713ec7794</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yylex</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>5611300548b2030d86b6ab9168132b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyout</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>4fd44867d448dcb6fc32ea004a15de54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyrestart</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>2259355ac49295f72feab070a34a9b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yytext</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>0d71f919dbec1ffd74b2460fa7e5ac28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yywrap</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>5be541efdb129f7cefb2437f52fe7359</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyparse</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>7482716c0f7d5bc8387ad56daa3a9fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yylex</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>5611300548b2030d86b6ab9168132b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyerror</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>fd2adb2274e61b81cf475d1ebea69d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yylval</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>75acfb3798e577ebd296e604e422e86b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yychar</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>34af3aa88645c2f95bbb4d573f8713cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yydebug</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>7fde6236fcb0f6e5d1d20ce98d9f0d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yynerrs</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>956a31a9c729bfe871bb770d99e1942d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yylloc</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>0e48b4ad7ce99f1617702ffe76dc00de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>2ceb5b985e149f18e018b142cfdd7264</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLTYPE</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>05958fcca5262ce3895ecf3be642dc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>yy_buffer_state *</type>
      <name>yy_scan_string</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>4e675484a09bae5d02471a93fc465dc3</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_delete_buffer</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>96aa2be6da067a3df4fc0187a7b4c503</anchor>
      <arglist>(struct yy_buffer_state *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runparse</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>6a1f51c59e1c361b6b323db2c0f50f3d</anchor>
      <arglist>(NEDParser *p, NedFileNode *nf, bool parseexpr, bool storesrc, const char *sourcefname)</arglist>
    </member>
    <member kind="variable">
      <type>LineColumn</type>
      <name>pos</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>5db42ac8af5c08f937049e91e174b697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LineColumn</type>
      <name>prevpos</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>d503b230caf787844066a886e5e6ebe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyin</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>46af646807e0797e72b6e8945e7ea88b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyout</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>619d4112149085d6bb91df662ae98701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>use_chanattrname_token</name>
      <anchorfile>nedgrammar_8h.html</anchorfile>
      <anchor>f8286e0fc6f81078ed1e02b5beb1f071</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedparser.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedparser_8h</filename>
    <includes id="nedgrammar_8h" name="nedgrammar.h" local="yes" imported="no">nedgrammar.h</includes>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <class kind="class">NEDParser</class>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_NUMERIC</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>b028b9896a89a6d6b252cbd5bbec71ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_CONST_NUM</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>910ec460fe8b7b4c4ddfa576d4f6ff5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_STRING</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>4e4e428e3a6a191834e3ff63bd301866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_BOOL</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>375775d23dbf60915db33f1add80c006</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_XML</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>74a3c3ebe3681ab4e034a1319cfb3e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TYPE_ANYTYPE</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>e8969deb5b9c71fa28bf843dad18abaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NEDParser *</type>
      <name>np</name>
      <anchorfile>nedparser_8h.html</anchorfile>
      <anchor>497ba1b155bd1ff3551bccd03fa86cfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedsaxhandler.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedsaxhandler_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <includes id="saxparser_8h" name="saxparser.h" local="yes" imported="no">saxparser.h</includes>
    <class kind="class">NEDSAXHandler</class>
  </compound>
  <compound kind="file">
    <name>nedsemanticvalidator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedsemanticvalidator_8h</filename>
    <includes id="nedvalidator_8h" name="nedvalidator.h" local="yes" imported="no">nedvalidator.h</includes>
    <class kind="class">NEDSemanticValidator</class>
  </compound>
  <compound kind="file">
    <name>nedutil.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedutil_8h</filename>
    <member kind="function">
      <type>double</type>
      <name>NEDStrToSimtime</name>
      <anchorfile>nedutil_8h.html</anchorfile>
      <anchor>89d4c606970981a9efcb294f12b50cfa</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>NEDStrToSimtime0</name>
      <anchorfile>nedutil_8h.html</anchorfile>
      <anchor>b5cc81ff55d47d66f56e86074ecd457e</anchor>
      <arglist>(const char *&amp;str)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>NEDSimtimeToStr</name>
      <anchorfile>nedutil_8h.html</anchorfile>
      <anchor>ca7b6c293bbfb10d3a3850b9bd5504e5</anchor>
      <arglist>(double t, char *dest=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedvalidator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedvalidator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDValidatorBase</class>
  </compound>
  <compound kind="file">
    <name>nedxmlparser.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>nedxmlparser_8h</filename>
    <includes id="nedelement_8h" name="nedelement.h" local="yes" imported="no">nedelement.h</includes>
    <member kind="function">
      <type>NEDElement *</type>
      <name>parseXML</name>
      <anchorfile>group__XMLParser.html</anchorfile>
      <anchor>g98ac72a45c3b7b83d91fe18fa7b04c3d</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>saxparser.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>saxparser_8h</filename>
    <class kind="class">SAXHandler</class>
    <class kind="class">SAXParser</class>
  </compound>
  <compound kind="file">
    <name>xmlgenerator.h</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>xmlgenerator_8h</filename>
    <includes id="nedelements_8h" name="nedelements.h" local="yes" imported="no">nedelements.h</includes>
    <class kind="class">NEDXMLGenerator</class>
    <member kind="function">
      <type>void</type>
      <name>generateXML</name>
      <anchorfile>group__XMLGenerator.html</anchorfile>
      <anchor>g3f1e4ce5192fbdcf68539752e2e9a8a0</anchor>
      <arglist>(ostream &amp;out, NEDElement *tree, bool srcloc, int indentsize=4)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelAttrNode</name>
    <filename>classChannelAttrNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ChannelAttrNode</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>e2ae861436abce724d7e5d9da79d1d67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelAttrNode</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>71ad3e23beb58485a3aa9ac591513dc9</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelAttrNode</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>864a3f3e93601aebf645bdeaf5c0c46f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>a2118f584b6f4af138e85238bdff5fbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>7916e54c70a2b3400096e9a1ce44bb50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>bbc750c69ba9897b5be756eedf7658f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>e2f44d2601e142b04c2421fa18719724</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>bbf78b59a30951adaac30ee2b46d6bd1</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>6a8b0f1a2c19ffb38df2a2b0950fed96</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>5e08e0deb42fa87e4187d03b4d319d74</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>6c0a5dd7998ad0ab75e600c5207c111c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>645e96d871431fc029909f60733d6ded</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>0a416f802fb4f4ea1ea396474e6c0a07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>de584687d2991f08b408617a886f9418</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>8008ee0aa3306b45d7c17d201d519888</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>1fd258aa6e17a18421349d73ce67f541</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>9716d8b4366953a09b72a4c2ba5c95b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>89c25baa1b8c05999c73851f8f0096fc</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelAttrNode *</type>
      <name>getNextChannelAttrNodeSibling</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>7ad62c9ad6b3dd6c13ff184c7c9f3f05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classChannelAttrNode.html</anchorfile>
      <anchor>b118b38efd974e345d7d7e173bdefca9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChannelNode</name>
    <filename>classChannelNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ChannelNode</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>3af697ec39ecd4fa39e93ee90d10fad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelNode</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>0795e4419ecac7e0af78058c67f0911f</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChannelNode</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>3c59c8311733886c8045b2d142cc2a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>8009392f448a207cd863b288e899d3b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>14249985544e618c9801d1fb30a6eeb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>18487b5b076d4e044eb9147574ddac00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>4013c26fcd059b71c71e509c6b6ddeb4</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>bc79f16126e63b5a5ada480d040a39af</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>831d59b0f19d50fb0f9af925ac2d70e0</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>d7f75a6d247d17ccb925e1726fb285ba</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>d08f4cb50b0722a58548c4f73ab8e1f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>4b8ccb47cce4b6a8443efe9194c03701</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>a367b9c97745dd7f87b3f91b0ff8bf34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>20e5398d58478db69d61c13db0847ab3</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>e6ab8f1da8dbaf165572c79d081be2e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>7a11523afc2a77a77bf7b8796b93020c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>ebadcdfe77f3ca68f5532b853d1b2a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>1094e96772bf91e9cec62b5b2bbf88bc</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>4b53d3aeabd9cf5b974d04c6e4393b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>85ce817f27554eac746bd3db6f0c6ac5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelNode *</type>
      <name>getNextChannelNodeSibling</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>38d3c9aeaa850cf3833591590ce30e4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelAttrNode *</type>
      <name>getFirstChannelAttrChild</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>f199fdda44eb535bdfdd16fe4d03d66b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisplayStringNode *</type>
      <name>getFirstDisplayStringChild</name>
      <anchorfile>classChannelNode.html</anchorfile>
      <anchor>bd5302275e8ea8d19eedd3061e6b3eba</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassDeclNode</name>
    <filename>classClassDeclNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ClassDeclNode</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>b262fb81133e9511be6196c5cfb66e4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassDeclNode</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>a3c3ae6c71c3f939f71c776e5898054e</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClassDeclNode</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>c72cc51de5fb00b31579856d6e97884a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>d33a6d82d1be0e42da05d4376e1dec31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>c6938243151f5370c44feb4557383d7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>219fe3a1c185808fdbdb6879c92611fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>c4602e0a9137903594af8a3b7c34f33a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>2b99b869d1823546d9624a6070c7511d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>4d869d3a3b9744ef4ff82aed23c2eca7</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>76ac257b0b64028599fb0c16e546c91d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>6303743512f6572eac5c9c6fad847318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>125a935233173d7e88d6ce636c26fd63</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsCobject</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>4eb18ae550fa7fb400518f782e9488cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsCobject</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>f191a0c980a115c2daa0edbb01b0997a</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>34d97aab254e066f658e3dddd372eadb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>8d76c025e48b74c48d7b8c4cba8483d1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>dc2f9b4a9ef08e86e4d4468a6376f528</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>5b8e89f7558dda458c765e9da6594e8f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>4b178ebbfc59c7006023730df612c2dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>b0021040b985696be1534bc183df4f7d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassDeclNode *</type>
      <name>getNextClassDeclNodeSibling</name>
      <anchorfile>classClassDeclNode.html</anchorfile>
      <anchor>7bb640c737c06419e479fd904edbd804</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClassNode</name>
    <filename>classClassNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ClassNode</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>217389d155a37b90d12fa6a9d49d6326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClassNode</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>1d359be4cf6917c9ae270f52fbd9addb</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ClassNode</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>3c0d617d08db3d2f0e9ade88f30bb04d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>6511de69b074b0d77699e54e5a3097cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>3a22a505c018ec551d3ee25254ffef49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>1fddf34300ff16702ef7b78905649fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>589bb306009522c43619adf5b243eda2</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>a2416f001037b0ceb52cf8e7b1921c58</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>4c7a6853f9138358f218067407cb60b6</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>5cf9b30996168e35fdd22843e6b303a0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>e97acff04037428871d97596d85982ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>02b5b7ef59fd96a82ff2c3cfd0469fb7</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>0574d8661499e8cd83c4ab584683afcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>c9d52a14102291c7253f159f8b91d6fe</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>078077eb751cd2b55527d7b2d0597295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>b752da1622b453419bb0007ca6564512</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>11859bbd4f3913082444901e4dbfeb96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>849fbd8287936a33abe88fcc8b971056</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>68f13792ee5cfd05c78992bbec9f4217</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>5fff7d1911560a92ceffc5f2a52f3493</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>cecdbf57384df1f4bddb1132774b982c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>5835d763ea4d537f273b01dcdcda1464</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassNode *</type>
      <name>getNextClassNodeSibling</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>68662a66e14ed63f44457442d48db465</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertiesNode *</type>
      <name>getFirstPropertiesChild</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>8b8e1c67d9a4d93b07c35839867136cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldsNode *</type>
      <name>getFirstFieldsChild</name>
      <anchorfile>classClassNode.html</anchorfile>
      <anchor>f80152ad98076208d37fe7747b73c3c7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompoundModuleNode</name>
    <filename>classCompoundModuleNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>CompoundModuleNode</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>f673c4f351dcf7f1b1a3f71f10a8ed4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompoundModuleNode</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>6b6f1cefee7adcb756ae7fdda283b465</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CompoundModuleNode</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>65d01bc516a951a189d396e249e351b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>e5b33bd52ed3daf03d788f5fd482547c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>10ccf39cefabccb6ada42c55f448825c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>a9ec0c2dd124681ef95f9b2a33cd5ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>cdeacbef26d6f06cde48c50bd449bdb8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>141110190c89ac30e19767d5072eb9c4</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>1d22b7b7a1429936c6b78f3b5590198c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>63995258ddc75f20579739dccf8b6702</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>132c1ce4076634d54374ea24a13d5962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>b668a82771ad13de979e200a03c21bcc</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>d4581c27841334d35c92edff481b086e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>ea8d1a15b264dc4731e4ba5f95020612</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>2f0b7be57d17baec97c5aa6b6e9c36a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>3089135cb58e9f2de63f0a028c59eed4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>4bfc287a0dadc5c9d652487735908ac3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>aa2d27a3642225591bf66e38bf0741a1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>b9c72ff9a6cbf6e5a8b7bc777983c2b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>584c394999b27ba2a9608f0b106586c7</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundModuleNode *</type>
      <name>getNextCompoundModuleNodeSibling</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>90a7879eb4d5a939b8953b3e1c3e490a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MachinesNode *</type>
      <name>getFirstMachinesChild</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>823f34b2c3be3572d81ac3651fdd9089</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamsNode *</type>
      <name>getFirstParamsChild</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>304b1543fe655f08a66ebf0e5ebc9769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesNode *</type>
      <name>getFirstGatesChild</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>cf89ed546d50e2b410684595600b6ef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmodulesNode *</type>
      <name>getFirstSubmodulesChild</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>6e23f3e8a2ee37e8374541d166aaa077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionsNode *</type>
      <name>getFirstConnectionsChild</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>7a3786ee661645d508feb1d03ba2ac4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisplayStringNode *</type>
      <name>getFirstDisplayStringChild</name>
      <anchorfile>classCompoundModuleNode.html</anchorfile>
      <anchor>5fbbcbe1777e7178f0078a87f2f47dd3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnAttrNode</name>
    <filename>classConnAttrNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConnAttrNode</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>e05680c54644dc3496e6b0d906360ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnAttrNode</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>550fb1195bc767e7107a8cb32782bec9</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnAttrNode</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>c1f461f94f0857ec0ff480f140dd47e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>c7b191b43e7e420005c5d8b11b149720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>bf22d7fdea6262351d24a41660e6e508</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>bcabf73fc4e9c56e8f44b4ed8efd59db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>2e5e871abdfa6c4709d0d390297d445d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>2f241b0af2b2be34b061c18349dbb6ae</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>cb8d89fa504c65988b50792ca0993a8f</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>25de76cd979bc9ce607f693ac83587c0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>aef7c37c4ce81f6ae9f7dd0350186a52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>8668eb409a743f836b2ffe1ca8176217</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>f5f91b476f007474d3981b2dca464e4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>aeef47999b28959afdd0a4e45e1aae6d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>68e69b2950745a973f48342505d8c43f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>7cb9cbf0b4e4871886f426a8f10d64d8</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnAttrNode *</type>
      <name>getNextConnAttrNodeSibling</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>c8a1f0b0b68f0d7d1e816aeb023113ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classConnAttrNode.html</anchorfile>
      <anchor>40eb29f0dd1e87da40e4bd7f71a2aa49</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionNode</name>
    <filename>classConnectionNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConnectionNode</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>b43bebf8df3f014558a629fb1ff3f445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionNode</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>e38bdd3b4bed6a0b07882aba1847912a</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionNode</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>bde2a835ef53389eb1b6674eed1e79c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>cee8a2f7b52f6048a8d29043c57bff50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>381ccd919da011c1b7f1b1b3739b0335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>9c6716103e87add3950cafe486970601</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>1f63c21974e69ad7413f0944c2339df7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>2b0273cfeeb20ddb5efa5f6eb1986b74</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>2a4d34032ce9e696a1f827077678d5b0</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>02a14a7f17c5a05b376bf2379d9a533a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCondition</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>bfbcab79682d29f1851d31d9e21ff883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCondition</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>55adea855e9a82407fedfc25aa50f5c4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcModule</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>629c94e6eb96d939cba84e3c02c21cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcModule</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>0a9e29eda142775937f594d397292e33</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcModuleIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>78eba5062250cc630a65301dfb58b84e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcModuleIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>3d6ccdc44468293894ca8d3acfbdd9f4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcGate</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>39cc914633fe6a11ded833306d42f544</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcGate</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>7b9f92ee89fc3e6c0116d0f6983162fb</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSrcGatePlusplus</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>1a9cb3775b8f3b74e29fe91a219b96b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcGatePlusplus</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>672bab333f55a1415a821a1bf5e170cf</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSrcGateIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>22f5a9456179efaae2ceb709a5e56c53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcGateIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>26ea70ecd40f0bb6f45632f73dcb365c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestModule</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>d35505baf6a000b395f15fe9eee691d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestModule</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>69bc285d0168e2592b6d87e3d8e59523</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestModuleIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>2047ab9a4d4e1ad02eeb815f27f3e705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestModuleIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>550d9ccfce9333a76119c2dae1257c37</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestGate</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>18410faf83bfef0d6117d5fe644ded55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestGate</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>adef179bedd5c51417ef3ccdcccb9404</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDestGatePlusplus</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>2a64a4c6043764b88b4152e55b7f12fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestGatePlusplus</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>8f5a86fac558c3bb8775439264c366be</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDestGateIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>60da01fec0dc7e893576a51c85fb9296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestGateIndex</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>c11a3bd3b3bae9f4fb76116a83a1e6d1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrowDirection</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>5cb8b18bf6e0e612ef26c7e04723fe80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrowDirection</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>fe401842f6c67a7aa415424a10cba314</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>22bb30b3e3fa987ad6f179f7b465f6d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>379c162148eb77ee0af2f035f4dcaf0b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>10cefd5394dd489b09dd784597f87827</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>847f76585dad01d7e067e7124dfd6aeb</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionNode *</type>
      <name>getNextConnectionNodeSibling</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>d500fa18f87ed584376d16b6d939d846</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>005f468cb4bfccdb9556a2c59595d866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnAttrNode *</type>
      <name>getFirstConnAttrChild</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>10eae5bbb08fdcb907909e05b5a0cea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisplayStringNode *</type>
      <name>getFirstDisplayStringChild</name>
      <anchorfile>classConnectionNode.html</anchorfile>
      <anchor>5a0c2ae42c5a6d5ca0e6b73f951894a5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConnectionsNode</name>
    <filename>classConnectionsNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConnectionsNode</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>47c587ae161d33e41a43afbcf4df09ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectionsNode</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>4aeaf35566b0ee10d724f2949cef9dbd</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectionsNode</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>3dbf31cf2a018c7f08ba5efc70d0b2f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>c4aa848a773559b93ba0c09277783e8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>d9217d8f6fb81e3a073659d275610b66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>b8c38eacd808801bb13070f518d10d23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>d3143f7229764e26dcf99ded2c6d4023</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>150d655c60d83471b94bdbe734022268</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>82ab6002f4d6c47648999de3d7b5c5eb</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>248731550b5e48249398d284d0d3db63</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCheckUnconnected</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>8a9a8278ab30eeb5b978c925ddc08234</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckUnconnected</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>13ae6f5cbfec2de8039dca7b06cac690</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>01471b39e4c84bcf4cbae1a871bcd4e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>7c8d8061c63d9dbd12ced595e692196c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>2ed6c260c9426984538f799e18495963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>3505c80ef5fe1d93ac367edbc794ea9e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionsNode *</type>
      <name>getNextConnectionsNodeSibling</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>c52195eb8330c821a9671d2dc056460e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionNode *</type>
      <name>getFirstConnectionChild</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>c5c7c3980e4f6ae9e8cdf390dd48fa57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ForLoopNode *</type>
      <name>getFirstForLoopChild</name>
      <anchorfile>classConnectionsNode.html</anchorfile>
      <anchor>8a2ac02a8be3681a2921e65898da50ad</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstNode</name>
    <filename>classConstNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ConstNode</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>ec7000447b7e2c09bd9e87f763d7aee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstNode</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>173eb5169398df6821e8a183ffac2b95</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstNode</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>7eb007b7a0e28127ccf22c8368980fac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>dbb3a03562ed5060a98f081131dbfd06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>0cf093e169fc3c7ca0a88c030158c877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>61162107ac8a63b83df1de2b9ed0c5b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>961f12fc3fefd1f44e0fa8606217f65e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>dbee5f076e2f23cc7356757f779face1</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>ddb6977beabb0000cc23d8918e5704cc</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>10d412aa3d8c4e8106282d0cc478d6bd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getType</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>03773de4a81ec814317756ac264fb014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>82db8532838091fdd156adba8673f2d9</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>01dfb802d1669c11f9e8e84c4e905a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>71ec56635d855818ebba1349f5949d72</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>21d3df536a686c2b118af926aa2a7df9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>4184963e73b00988836deff6e2e96d6a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstNode *</type>
      <name>getNextConstNodeSibling</name>
      <anchorfile>classConstNode.html</anchorfile>
      <anchor>ba322a5132fea50adf4bbc7b308c0242</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CplusplusNode</name>
    <filename>classCplusplusNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>CplusplusNode</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>c246894481a6f103f89877c7b800863b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CplusplusNode</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>00f63c39074a8c5e96c41f77a5da6d4f</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CplusplusNode</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>d83cd692fcf11889131296a30e91018f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>ac08ece0da17f15d366cc6b35c495164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>4a67500c7ebdb7c08dc1f9f32bd8dfdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>ee29d2479bd83a4e0eff2bb473a0a5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>ea3ac753de443a1b72294fe6165a31d5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>22280cb35e679cf4da3e04c3f7cac7dc</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>793ebd24751b4d037c6b4b315aae37a3</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>0493c3d14893f9ffcd7301e0cb801a26</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBody</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>da7b3f5e7bb046e7464183df3c791de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>a4b5ce563641c3f54df141b562a2400a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>ccf0c2792104504fcb033863f57aea3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>6efabd3280406276d5049190ed9f8a88</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>b2f90b1b219f2d8c8d3539210281fe9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>c124bf4bc3c11aa3f1ec9b01eb02fd52</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>f9536f07abdb4280bd88fe4334cdc897</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>8eb1ff22359148e6eb958ac2fd64a54a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplusplusNode *</type>
      <name>getNextCplusplusNodeSibling</name>
      <anchorfile>classCplusplusNode.html</anchorfile>
      <anchor>27511f35a14b3bf609bd7802ae59c489</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CppExpressionGenerator</name>
    <filename>classCppExpressionGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>CppExpressionGenerator</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>e0272d39d55eb5a14d11206af771b230</anchor>
      <arglist>(ostream &amp;out, NEDSymbolTable *symboltable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CppExpressionGenerator</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>50869d2420ba038e6550f471afc780b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collectExpressions</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>f59eb9af9437f1e8e86d86fba0ee01dd</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateExpressionClasses</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>6866c2b17852da755c1f56a5f4a8e23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateExpressionUsage</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>f38d53f0fa33fdf779dfb3b728a90d15</anchor>
      <arglist>(ExpressionNode *expr, const char *indent)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; NEDElement * &gt;</type>
      <name>NEDElementVector</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>f233b973f18a87f310b17db915e41d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; ExpressionNode *, ExpressionInfo &gt;</type>
      <name>NEDExpressionMap</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>2594cc87d637ab6dd92ab23326143844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODE_INLINE_EXPRESSION</name>
      <anchor>d0d3e4525f1486b909079a617337d739e1a817293c5afafb9c983f49218d47c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODE_EXPRESSION_CLASS</name>
      <anchor>d0d3e4525f1486b909079a617337d739ade0036d23ff03fc4043f35b59187660</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExtractArgs</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>9e04c12ec2e569425f3f042031ccfbf0</anchor>
      <arglist>(ExpressionInfo &amp;info, NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCollectExpressions</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>e1384562fbb0083428f88c825d90ebb6</anchor>
      <arglist>(NEDElement *node, NEDElement *currentSubmodTypeDecl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>collectExpressionInfo</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>b3f7f7b7b4d12ee4429025a8a5ef8ba7</anchor>
      <arglist>(ExpressionNode *expr, NEDElement *currentSubmodTypeDecl)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateExpressionClass</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>427bfe2270a729968bcdc696ad78549a</anchor>
      <arglist>(ExpressionInfo &amp;info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getTypeForArg</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>f8ec67e1460fa14abb7de2836f8dc5e7</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>getNameForArg</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>413beac0217a75133273d97c52a23e33</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doValueForArg</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>93c84fa4cd7260017b4bd6327c1559b5</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doValueForCachedVar</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>453b4244d48af98272d89856a589c851</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildren</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>4bf4e415ea9d071b173765f8ba31cdd1</anchor>
      <arglist>(NEDElement *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateItem</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>ab1020ea1fe2e1c208d431bf5981620f</anchor>
      <arglist>(NEDElement *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doOperator</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>12b770c773d38d2b0e032dd122f6ca18</anchor>
      <arglist>(OperatorNode *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doFunction</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>0d895c5c91f7f6705136addcea429769</anchor>
      <arglist>(FunctionNode *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParamref</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>e735e5c5d33d3bb84d88e5961aff76ae</anchor>
      <arglist>(ParamRefNode *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doIdent</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>4db1034e8e7fcda05f75b3e1733e5087</anchor>
      <arglist>(IdentNode *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConst</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>f95e5b2e9d801d87bbdc80d302bdcff2</anchor>
      <arglist>(ConstNode *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExpression</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>da0ed0295df8bbf271f270df946f27bf</anchor>
      <arglist>(ExpressionNode *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>needsExpressionClass</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>717f2fa54a856138cb008faba25ed2c4</anchor>
      <arglist>(ExpressionNode *expr, NEDElement *currentSubmodTypeDecl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream &amp;</type>
      <name>out</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>333d1928fcaef6608f8472ded5d58dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDSymbolTable *</type>
      <name>symboltable</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>e9c1acd7a3b2e77a3d5fe345d72dafb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDExpressionMap</type>
      <name>exprMap</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>c6638197622ca426e0bc45b767b1d3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static int</type>
      <name>count</name>
      <anchorfile>classCppExpressionGenerator.html</anchorfile>
      <anchor>a4d4db44a7d4fe2a16d694df894119cd</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">CppExpressionGenerator::ExpressionInfo</class>
  </compound>
  <compound kind="struct">
    <name>CppExpressionGenerator::ExpressionInfo</name>
    <filename>structCppExpressionGenerator_1_1ExpressionInfo.html</filename>
    <member kind="variable">
      <type>ExpressionNode *</type>
      <name>expr</name>
      <anchorfile>structCppExpressionGenerator_1_1ExpressionInfo.html</anchorfile>
      <anchor>73ca2bc25947a81f6b95038dbbed736f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ctxtype</name>
      <anchorfile>structCppExpressionGenerator_1_1ExpressionInfo.html</anchorfile>
      <anchor>017a58490d843d86aaaaa94e2331d8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NEDElement *</type>
      <name>submoduleTypeDecl</name>
      <anchorfile>structCppExpressionGenerator_1_1ExpressionInfo.html</anchorfile>
      <anchor>f36ef709be817406019457b7da3e02df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structCppExpressionGenerator_1_1ExpressionInfo.html</anchorfile>
      <anchor>b5069100db215b2e92d5c2dd4e38392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NEDElementVector</type>
      <name>ctorargs</name>
      <anchorfile>structCppExpressionGenerator_1_1ExpressionInfo.html</anchorfile>
      <anchor>97e44b2f9b5695ad90c82c8774f8ca41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NEDElementVector</type>
      <name>cachedvars</name>
      <anchorfile>structCppExpressionGenerator_1_1ExpressionInfo.html</anchorfile>
      <anchor>947ea29a5b816f5765014ec1ed7a768d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DisplayStringNode</name>
    <filename>classDisplayStringNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>DisplayStringNode</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>40a3bae952b91ab2538a64c160d36d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DisplayStringNode</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>4067c749db0dbe295a76793f2873b2f0</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DisplayStringNode</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>984fd306cca3ce0c98f182848694bdfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>832cc74ab2eb114ece8f6c3fa86dd493</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>69b297bc853127cb144e970d007b910e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>e63cd32ed9e551da10a802161a8befa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>7e82eb75e489f992b2846d3aca3f1300</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>5bc0f4d89923f2919d1791c8c94b516b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>e5c3aa4e496dbd58b9fa07151c8c00ec</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>216286ce363e2717a6ef429b84308938</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>3878579e370112436ed6df0581d91a86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>1fc655e39eaa9c644d0888b0531e4ddc</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>4127d248ab39c7177ecddc015cbdae6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>89313301dfbde96d3a382cbd163459fb</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>882878f2e50d71d3dd2f1a0aa08ffdcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>04a736f0b4e3605708d6ee6e42e118b6</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisplayStringNode *</type>
      <name>getNextDisplayStringNodeSibling</name>
      <anchorfile>classDisplayStringNode.html</anchorfile>
      <anchor>4a46adc7bcb46781fef0ad80974bf606</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumDeclNode</name>
    <filename>classEnumDeclNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumDeclNode</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>fccbb88122a0be6ebab83b87a0a28dcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumDeclNode</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>7e7dcd554dde87be005afb18928df2f8</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumDeclNode</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>4e203f32750e5ae16240ac56af7cc201</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>7c039f6f5b7362e3cecc0e58fd532cdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>4903d56788dd4c9cd1cf8c5f1ce11994</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>0c82f8aa0b03e968257c2d8c8b0962af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>954dbed0f66520e3af52c6c393e4da17</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>4de6a2be06d4ca3b92b61ea975a87b38</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>81be1277df6a0c14f98c27636f89bdff</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>de356fc3a76a29a87ff0c732fe418936</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>114f03d2ac4120f46a77ca4b1d2850be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>4a07dfe2f73285ca1b9e9a6e6aa01299</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>a543123a6a16d4d4bb07eb719c733285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>e83163eb9f54c820454cb7311fc26645</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>a879f4b80cc790e6ba5be7bf2e4d74e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>b8df09d9cc46cc5aed03307a12539c83</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>2a264064da70f8c006aad0128be889f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>103cd4f6727fd175c03b71ed6444a59b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumDeclNode *</type>
      <name>getNextEnumDeclNodeSibling</name>
      <anchorfile>classEnumDeclNode.html</anchorfile>
      <anchor>38d36d1eca3f3d6979f6fad286b79b8c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumFieldNode</name>
    <filename>classEnumFieldNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumFieldNode</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>96e08e4237e47af997e4e5f6f3be514a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumFieldNode</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>6640f26a575871e50c0b877f222f4eb1</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumFieldNode</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>a78f2c360b57e8a05d95a9d7c5fb6b50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>ed8420a6687496521a4424e7e4c94aa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>3dc96d86ae3bf1c236880e0385850a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>a2f3024f8eb75d5d84090625f92d90ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>80a72a8a11c8bc61994464662060c422</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>f2982c77b2f2f390a264237a1fc1461f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>7620b92111ee12b260807497e516239b</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>b66a954f5cbdeaf7e15c4cf94f942e18</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>80565f4cff6e7403599553dfea97c8a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>7820c33d1c7d924388261e4884acb103</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>52273ee960123261ce640c7274eeab8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>7322a42d6bbeae049c23c91711e3fabd</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>93a097b60ec344b580976958b07a6e9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>36258de7f7d8dc167646113a5e2c90c5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>c6f21e58cce7eda1f9a19579fe81b471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>9c34360b53c7ee5d6e3a64f1a5d33052</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldNode *</type>
      <name>getNextEnumFieldNodeSibling</name>
      <anchorfile>classEnumFieldNode.html</anchorfile>
      <anchor>4c6e822d3a3ad1e379f4e7cb8a70735b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumFieldsNode</name>
    <filename>classEnumFieldsNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumFieldsNode</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>a6fdaf0927a73a8af32f2fab1c42f4b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumFieldsNode</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>a2e4d3312743ae33e659015d71ff3a7e</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumFieldsNode</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>7d44a7fd71a6ab178ba8ad8b5ee8b8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>93d8e21b859ea7b066fc7043eb119ca2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>939bd6acc92df3d6e9845a5e0686d1f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>0e7785cd62985cb1f8866c82674d03ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>721dfc82180fdbb2718cef3d1c4fd8d9</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>ab004cd9be284350530ec0232f5a96f7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>6e27866083c6e9c2f88bcd5dc30365c4</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>9031786a78892214d36fe7763f6fa2d0</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>e669bbbd8ec393b9709e56f3c26e10f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>7b14f0654870cd27e2aff2a519095af5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>f07c14d3584f38e0a6923edfaf8d6b67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>6584238ed85dd640d6d5858547d9f12c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldsNode *</type>
      <name>getNextEnumFieldsNodeSibling</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>2bd19323574e8ddbf6655f8fb1ebc22b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldNode *</type>
      <name>getFirstEnumFieldChild</name>
      <anchorfile>classEnumFieldsNode.html</anchorfile>
      <anchor>a4cdf41709213331699855349deb5edc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EnumNode</name>
    <filename>classEnumNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>EnumNode</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>2e598ac43f4ff04d07caf53bc1966fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EnumNode</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>49fb3ff15d1431287ac7bf2ed898b65c</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EnumNode</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>24858803b2cae0ccd9be2e08a62ad38e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>29a8cacae4aedae3227607bee23dce8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>444bc727f008b5bd1e15cdcd3503fc59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>915b10ab8f669121e8ab2c4e1dc35ddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>a7f97228d7fcbe817700cc7d0ad7dd4c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>d1a37b6752cef86dbbfcd58a398dbb3f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>95b2e5cc7c632e31926e855bd5c390c0</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>ec5e16d0bc00f8530118b9f4359e208d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>bbd5f2aa404148699a1af7ba4da8e3f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>02cada873bd5e8066e8799fe31b978c2</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>e996cd956912eb51caea55ede879217d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>cebafd6f641e737a8b44d7629339eedd</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>9c75ff51f7d8fe41ebf4aa609771077a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>74cf7f6bc3d7ac3be8bb4c2d62085fc6</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>eab9fbe699697defe729bc7d7b02f631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>bb076095e3c6785532bd11e1feda6428</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>78d4f6667b9863f3ca0cab0dddb0f681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>077f3dcc239ab47f51f457bd0898c825</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>6674f3dd7bd5eccf2956208d7d4e9820</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>6454383498a4221d048f67cc290cd9c3</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumNode *</type>
      <name>getNextEnumNodeSibling</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>6eb000cd7b9c52576cb79b228643b9e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumFieldsNode *</type>
      <name>getFirstEnumFieldsChild</name>
      <anchorfile>classEnumNode.html</anchorfile>
      <anchor>dec441276a909152bb225fc9e68c12b4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExpressionNode</name>
    <filename>classExpressionNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ExpressionNode</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>dc8888de5329d356224c8a93f3ce2b75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpressionNode</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>67f5c10013fba0d2cd9c72f9113e3ffd</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpressionNode</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>e1f902aad773060855a93f59e2f27a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>961892e9e45502838811b0cd07d17a89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>0caa36bad7e64b9f5bb3e5b68b9cffa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>1b8205f6ab46939b14e4354f8332f959</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>874e7e28048c60501d13d807c0a57904</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>e31b871d8b5b6635e789a5faf1865478</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>14f9b340a0098670acc4d181a82c016e</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>785b271aa808ef0eb1d95fdbaea09fc5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTarget</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>ab3140bb3e7ffb9e894b243b49c7d449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>86bf17293de8f65467e092f3a1039560</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getNextExpressionNodeSibling</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>a8852780150ce0caba9a9f8f4e7674e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorNode *</type>
      <name>getFirstOperatorChild</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>8d8a51da2ab3ffbeacfeb5b6effaee1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionNode *</type>
      <name>getFirstFunctionChild</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>2e933ffd1a6c757e7d035d4291ba6a83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamRefNode *</type>
      <name>getFirstParamRefChild</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>d3d0f898a6d4e8ab2b57650d4f141420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentNode *</type>
      <name>getFirstIdentChild</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>7fc0b07e188b073fe631cb63bc14cf7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstNode *</type>
      <name>getFirstConstChild</name>
      <anchorfile>classExpressionNode.html</anchorfile>
      <anchor>1f009f1a89abc966154bc321cb6f745a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldNode</name>
    <filename>classFieldNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>FieldNode</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>b0e6aee1f2d69ff217945198fc05b509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldNode</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>b29386b0247925a79a5149d5f9cdc632</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FieldNode</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>bf8117ac206282117fae5f683318ed6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>7942c87a328d0fc5c671ee4313555baf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>1fc93737a7fd88422f2e7dc8780cd2c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>92c7f301fd0149426bab4fbbe3447d3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>b22343675721419f9b8472bc7748e975</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>8ff5051937398b4dcd143ec95ad5d0f8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>c5bc0e608f88a93d6720fada0fa58e25</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>232b59a3bc166dec171267e99ef080e6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>821f79e3627cc7a1b5a4121de865f006</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>7b0079eea3cb9811dfe24f5ce5344e84</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDataType</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>a0860832938d473961c2cb875c987d1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataType</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>cf909ae4ad129d6c1713675db6997ab3</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsAbstract</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>3282d2d5e9b894fcd5062982865083cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsAbstract</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>3aa364fb486621ecba3541bb224365d5</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsReadonly</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>d5ddb9c12efc9c8c6cc19b9ff2464aab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsReadonly</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>c697bab0584fc30f1d99bde5d175d082</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsVector</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>f03748fed7775599c9217350121e4b72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsVector</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>e2033a6e1cf582cff71becfc2da69ad6</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVectorSize</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>ad29e41719be6d453ac59422fd2af084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSize</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>772101293297eb4d71d7202a25a5102f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getEnumName</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>9906ea965f54a4283cc6630122d8dcdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnumName</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>7e4c1bde580849342ca514ea358ff43e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDefaultValue</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>c186ccea4fc804cc8baca330807e3475</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValue</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>69295c71ec855b213ceafc02eb52a9eb</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>1493417276ee3227299fb6a5e10fd931</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>3af9802ffbde77265c17fba00e313c4d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>e672247d1a0418e8a92b21fa7e053450</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>a631e330b1b5ea3573f310d13314f965</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldNode *</type>
      <name>getNextFieldNodeSibling</name>
      <anchorfile>classFieldNode.html</anchorfile>
      <anchor>966d6e4e2bfbb4f3d93269e4a8cd47a2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldsNode</name>
    <filename>classFieldsNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>FieldsNode</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>33847d3f9d97a5fd6ae45a65acc98559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldsNode</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>a2c0293ca27981501569c24b9d697657</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FieldsNode</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>f4bfe885063f9d2e8a414d3726f68066</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>ef99470dc5bf43c7d7c149082f9ec06e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>678da98bb5636417db9160278b533ebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>752e43b0dae4c867e68d8c309ef57b11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>c9762fa6584a9ad19e95c7a8f603c772</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>da77677c234e9d8a29259bb6f89eaa38</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>d9e98ec94f3be0fe245190e8448a28c2</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>50f313998963a04a9f5018e14cc32617</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>8396415cb28592323ee08df4ddd5741f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>15524d7044ba2e5d50c0d7d453637d46</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>9f099c98e6c2a3dfcc76068607cce264</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>203f7bad119967c568367fd2a7556de4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldsNode *</type>
      <name>getNextFieldsNodeSibling</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>496d2d2ae70d10983298ba487f71b495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldNode *</type>
      <name>getFirstFieldChild</name>
      <anchorfile>classFieldsNode.html</anchorfile>
      <anchor>3cccd1b57d7ddba4edfd9d6b9d998863</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForLoopNode</name>
    <filename>classForLoopNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ForLoopNode</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>4fe6f16e22cef57486c4e2917daac874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForLoopNode</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>90203c93a88f95db095cb8338bf29e34</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ForLoopNode</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>d1fe665a598f2d68d05746df84bad0b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>4881995038d0ae8ec6c956b6d5ade1f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>21f534ba0fa4d2cef691bdc33e2a1c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>eea46347018aa7d8150b85235f7365e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>bef298b494ba8298d85a4dc6c4fbbce8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>50e817b9b27fd0af7be98caad7dfe795</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>e77fd48438fa7aa51e75426e20880f68</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>110852310da1fd878f6021217cab26d7</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>e903806668cf1a4239e8b5478c586639</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>8a18ed6fa39a229bdbb1a03a89c5b663</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>f9843bdaf0be5f6fdeb898d8e421a092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>b96637e546a628c6d133914810be881c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>39506ed62c7408837643b178af2d8a1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>33aa2c57a88ad51bd02283d4d30f3a77</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ForLoopNode *</type>
      <name>getNextForLoopNodeSibling</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>9cef6bb91abcaab5842fb8ba968f39d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoopVarNode *</type>
      <name>getFirstLoopVarChild</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>3a9901889dcfd829ee2e294c3e15264c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConnectionNode *</type>
      <name>getFirstConnectionChild</name>
      <anchorfile>classForLoopNode.html</anchorfile>
      <anchor>af41689fb23182dc585f811ea30e6773</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionNode</name>
    <filename>classFunctionNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>FunctionNode</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>c4467a4c13382e0058cb2bd4fb70e0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionNode</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>3bf10b6408f64098e2a35f0accea22a0</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionNode</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>d9c4a35db175de9386ac86d91a1a95df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>732a1754374ebda945e4232ac908e216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>40c42aeee07df9d05ab4e0132f97063b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>3aa1a18589e8757d4f82a143d214ad7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>ad27ca7a3b6bb9a40c304ffc6ca0c38e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>0eda7493fc7ca5048265c16773996bf8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>af626a7f8aef8639da7e24bece1fada1</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>ffa06cbbe38b8c6de0f569f1894f3d23</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>ad1c974315779b203f01c8757a870175</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>91a155b9b8e59ba09fab6288ffa3e16b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionNode *</type>
      <name>getNextFunctionNodeSibling</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>56a1367db6e1995b4a7c51e1a65515bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorNode *</type>
      <name>getFirstOperatorChild</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>989bd8ec011bfaed1097e01adecc714d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionNode *</type>
      <name>getFirstFunctionChild</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>4e8084376edcac4045f5c0214d770680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamRefNode *</type>
      <name>getFirstParamRefChild</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>6dbcb6589ebe611e32dc57ca8ac30b4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentNode *</type>
      <name>getFirstIdentChild</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>dd23141d06af91e79f9b63803187ddd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstNode *</type>
      <name>getFirstConstChild</name>
      <anchorfile>classFunctionNode.html</anchorfile>
      <anchor>403b301f5347319195b26ba226216493</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GateNode</name>
    <filename>classGateNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>GateNode</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>ce862b58c7aa91e9f0b22eddeefc0e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GateNode</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>4125e6dea8c820730b99421e544e4b27</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GateNode</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>afdee2eab3278997f8b9020d5dacc2a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>61f8008f57264469c3e657ecc7775a4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>68fc57fd26f5f0b56ee915cb18a991da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>3a0649c44c5cc1e59b1a5888f9790c04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>b4f0469ec2c8f6bb3675eb9cfd81437b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>3c813aed6d2dfe724698220d8f7374bc</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>34ec27769f77b771559af87688113ce8</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>c8d6187ac4e2498841fe2685dd37ee5b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>49ffdf87c71115e86ab2b2718552cb0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>88ed65b841ebd140f664bd1c5c32ec54</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDirection</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>fa16c29ec735bd2679116ec0d844ad3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>496b96194379453dc4a9acb12c129e80</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsVector</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>d6647da2b785166099cd2558e12aec06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsVector</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>62dc087566b9c58b5e2f9b88f9f2e424</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>400395bf110e8aaa453bd0b03d362699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>4847bab75d090a127f5786c5deecfd8e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>4937a5be5fccc4c2d9112254133468d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>6e403bb6ea44d33a98115921ceb68eb5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GateNode *</type>
      <name>getNextGateNodeSibling</name>
      <anchorfile>classGateNode.html</anchorfile>
      <anchor>c1606e91681ac7367994515ad579437f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GatesizeNode</name>
    <filename>classGatesizeNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>GatesizeNode</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>b9f93ea339657f89fd9c33f092bbfa06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GatesizeNode</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>8d5da74b91e8c001874bbd6e02d2ad66</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GatesizeNode</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>732ae506d63715c6ee3cf0d1a2c7fcdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>f7e128e8c1b2ad8ef942abd9e77265d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>9e80c4fd5c79b49411da44ea66a8c2a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>18029454048d91eb76cc2651115bf898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>ec2975c3e32e0ce69a77b1ba6713ba20</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>3628007ca49d3c7777f3db191110f31e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>494d3b253ef97de368d03e7a2ae97c93</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>3f3ef25a3cd7a2c5a33525336e924d25</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>ab3642b07e1e31efac67b15e3f899916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>23286256a298b566dee7280baf1cba71</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVectorSize</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>c1636d30c7ddb44f19fb378678cbced9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSize</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>ee684231f147d4f66f4de63bc3a360bf</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>ade0a6492650f983f7561291b5daac89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>c1237bd29fadec5d7bc4f10997806b3f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>3d7fda6f58a0c43ed17618aea6a761c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>6b3940ece6059f2edcc5648023a495f0</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesizeNode *</type>
      <name>getNextGatesizeNodeSibling</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>c0340a5f246e59e59c32136f3e3b7015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classGatesizeNode.html</anchorfile>
      <anchor>5f5eba6e44024e6a1e2fd57af40e33be</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GatesizesNode</name>
    <filename>classGatesizesNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>GatesizesNode</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>73bdf0597091971b2a92c5151bda034d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GatesizesNode</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>47398da38e7e2b60c2a31f76a55afdaa</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GatesizesNode</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>e60e8d6998a35ec86e95f976239cac09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>131e3498bb924b1e3a64beb38bf5baaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>52c1ad70d998692b7b1b6aeb975a0f26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>9009635dce0d331c6d2b9185f3c25a3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>375ef805bcb4af2826a1bee8b55cf51d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>bdabe68a4cd9546691c1485e4501ce17</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>2965c3337990d75831729a3a757e1ea1</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>d34da863eb5cc5738f032e52997c07b5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCondition</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>581bc164c79ab62daa68f9de2aefac4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCondition</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>9d5bc05dff209b705373b33d09647a6d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>647820b6a83b58aabb5aadcccd52db7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>b84d517924feb2d3f961794d913ba404</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>9f48a933a9b178fb60ddf0ea3c006d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>b8d075096dc29b7219d51990ac7cf0e9</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesizesNode *</type>
      <name>getNextGatesizesNodeSibling</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>6f57e1e03140b8ab393d70bf73d56b8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>f369060a24ed827419a843499a1baf5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesizeNode *</type>
      <name>getFirstGatesizeChild</name>
      <anchorfile>classGatesizesNode.html</anchorfile>
      <anchor>7e8df3034120573ae060969f7ce3e55b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GatesNode</name>
    <filename>classGatesNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>GatesNode</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>6d6f1233d73501614b83d1e850110e90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GatesNode</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>b5ca07b6143adb5309370cb14202e3a5</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GatesNode</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>4f7792dcb2d400cc8933a50ce5adbd0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>3e6448b91bf039c3ced2ce74af0ded6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>8d0a508c928e8581c79fb868db319f98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>0cd77653460190fd64a4b2c6da92de24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>e348b6f9f517e6622e4c5fc94efe738c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>6b00ab462c67ff2dc7f51e88768bb570</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>2bb54dcac6c11217b31739043c5e2df7</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>ea5988e5d16f5792ab98b74e08f9a431</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>2919fc3f8a23ed38e0d1ea8e39b06e43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>d80e50eff8ed15e5cc6fb49dd0c8ff04</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>93c7e54e10b7bfa651083a9cac9527ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>430dc6b3539da2594a4ba732f2a2d71a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesNode *</type>
      <name>getNextGatesNodeSibling</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>5abee2018f8e6535bf279800c018b64f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GateNode *</type>
      <name>getFirstGateChild</name>
      <anchorfile>classGatesNode.html</anchorfile>
      <anchor>87dc76f9ee0e4637286e6bc446115754</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdentNode</name>
    <filename>classIdentNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>IdentNode</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>fd6650613e1de0c4d0baf9fb21308bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentNode</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>07e4fb982a730cc4447d673046ef18fd</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IdentNode</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>d478c2dd30e6f8245e0cedc281f71087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>d11e142a0cf3252fb6345fca4e71d0fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>b98cd4fce654f9c3e75aeadb266c44eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>bb8e555226dc0af8df55775cc918f9ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>2b477c707e8a8d37708b19a69a97e57a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>915c2dae96be56544fe5a0309fe1cade</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>33d2a6f060ec78a0d2cb61a2b6fb9b6c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>e7b777d5c5db7f937b47cc6e169141a9</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>283f3aee46cd8ca5e8e7adb2a6a0b856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>755315a0b61ead13f2b035b0949a1b5b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentNode *</type>
      <name>getNextIdentNodeSibling</name>
      <anchorfile>classIdentNode.html</anchorfile>
      <anchor>74cc54f50b77b27db6c6d2462c60c358</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportedFileNode</name>
    <filename>classImportedFileNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ImportedFileNode</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>96859ac5c38c3a339680711e827ce499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImportedFileNode</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>d0c27c947debbea68bd43948ca23d410</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImportedFileNode</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>ac5ce0d5285e06ac384cbafedf27f3fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>8a338745584f57ebd550a878e27fbe4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>8b43c4dc8091a92b0e61b3a215ef505c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>6e9578273f754dc0ade85531d6ef6d61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>83548d1a7b77a5e6ad3112a39e691723</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>5be815ce6139949372b9e510833ccace</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>b256b7806272ca94760081d5eac6d16c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>2a15bddc1d2f4ff74ff75fd0bc14c593</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFilename</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>7addc23b5dd89f4a0bf724048f1a801e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilename</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>9d66f1a472f1e7f3a30b6be3b99daf31</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>32a254e3363da126555e6d8a9a6ee33c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>09dca218f8ec23401a034467e5a8cff1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>6e7830386fce39f3196c4de22441d7df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>b7bdd2945340059d809e6536bb5ce9b9</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImportedFileNode *</type>
      <name>getNextImportedFileNodeSibling</name>
      <anchorfile>classImportedFileNode.html</anchorfile>
      <anchor>cdf36002b631a7b69b49063c880e2d92</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ImportNode</name>
    <filename>classImportNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ImportNode</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>d50e0532f9bc5d5620b13775d3c92b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImportNode</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>9adcd7ef578b7adacbf4272bf3db1156</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImportNode</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>755a7b07af37568e6abaef0e8b206929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>93e254cda001b803fd0a13542e331feb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>c78f7f8616005fc6760fd0bfec3ef13e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>2cad4fab8e6e614cfbb93b9c6073d4cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>e2aaf2348eb02e2825fbd8f29e4b54cf</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>187839aaa1684d7afdb1e2c62119bcdd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>8a9c5a1a38aa62210f4136b169c86cf5</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>2c4b0d9501016cb9865020d11ea81015</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>ac8f583e363e0e57e2d40f8a2c3667fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>efd8513e5bf1c73cdf8086b79f025008</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>369150a08c99656c9833112a935b7830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>3faba7a245990fda5920594dc5d27db6</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImportNode *</type>
      <name>getNextImportNodeSibling</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>0a39f0e613092e009d1d928f0b924c5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImportedFileNode *</type>
      <name>getFirstImportedFileChild</name>
      <anchorfile>classImportNode.html</anchorfile>
      <anchor>8146fe29cc8e111ee57f9c024c525ab8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LineColumn</name>
    <filename>structLineColumn.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>li</name>
      <anchorfile>structLineColumn.html</anchorfile>
      <anchor>4f9ec2585dc48f468bbc56462a326eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>co</name>
      <anchorfile>structLineColumn.html</anchorfile>
      <anchor>143619e60acf9ea157e82cd14a62982e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LoopVarNode</name>
    <filename>classLoopVarNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>LoopVarNode</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>d1a52aac7f31720a94e49f421b238a1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LoopVarNode</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>3f5a19bb497e3f0db0eb99d70d9a918d</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoopVarNode</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>53a4087d7ac1ff9fb0a77ea7a38c0d39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>4fd45180f28c03ab4a3d92e9c2bf04da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>9b97bc591f770795014b40a4b9dfbb94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>f46c0982eaecab5f652bbdf9028f267a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>3eb0109afcb4fc8a74c4a6ae692bb4d8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>492d364a2a6af38beacce06000c73535</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>d8533b7f2c7432c8b93e8b2a56951d25</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>e59b04f1b767d13dfbe0f6157559ac9e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamName</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>4d05086d7d22faae8d51c7a78b0ec254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParamName</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>c68fcac3590f5c1b0fc9167b3e0a36af</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFromValue</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>3619ddfa18cb30923eb8ddc9c0415b4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromValue</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>000595ecfddd8f6fa74d832c48430d66</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getToValue</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>fcac72a6cc65585376642371c9b08916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToValue</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>a5dee4b9ba21089a1b6630f4bb46344c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>84cea1dae12b324be2c0e0e9e006b6f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>bcea69d4c213a89dae0227fa73019ef5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>d9c5ed79d34bf7a776046bf9a53ca869</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>886903340de306d320fa7c0529a8413b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoopVarNode *</type>
      <name>getNextLoopVarNodeSibling</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>8289160cce43025a1fa01506a0738eb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classLoopVarNode.html</anchorfile>
      <anchor>89aee41e49f9b8ce7b092155e548ef09</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ltstr</name>
    <filename>structltstr.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structltstr.html</anchorfile>
      <anchor>2304e89521f8964d65a63a57e9bf20dc</anchor>
      <arglist>(const char *s1, const char *s2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MachineNode</name>
    <filename>classMachineNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>MachineNode</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>22964db063e7b8e6f4fd91836c5ebfa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MachineNode</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>1ab971dbe43d6ae2c573995d4b78ca63</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MachineNode</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>c15eea5c70481c6bf9e34876fcfc39b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>aaf7f5bf95be38d555b46149a6b52d7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>b689253460b1fe3d2327da049ab394ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>80c282e8b41b467cabf1c29c8b3564a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>32954d4e0301f1c682d753b1150c1a1c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>de55887b1af754bea4f5a69ff14f494a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>96feaceaa923599e79b41e17a6d78cac</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>6dd1b048dbd47a1324220239c45ef5dd</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>e4f2e3cf7af4679aa4bc3ab406e46953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>c1dd6089406cd272382871e62477a663</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>f2ea9bac1ccf57d83550de50e8fb6155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>dd9d68f71e89f9a4ef6cfd6b64b75aa5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>8cf901b06b379e3258318bf27bba827a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>75809c7b5b1e06c3abe014a4e51b9b98</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MachineNode *</type>
      <name>getNextMachineNodeSibling</name>
      <anchorfile>classMachineNode.html</anchorfile>
      <anchor>f3bc86d7b182feff962252a2d0dabb26</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MachinesNode</name>
    <filename>classMachinesNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>MachinesNode</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>0497a5601de3d9a1a2d9245366383723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MachinesNode</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>cbec6f5c1d4baec6f5e0f74661de7d4e</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MachinesNode</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>21108bcead8a8ad6d72920cbf90411b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>d431d3b23e38fa81058eb5127c36c633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>0909d50c493ebf639402963944c2f242</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>4a1be452c267f0be793069767a73eff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>576fbf7975dc7694444c409bd15df5fc</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>e07784449b002ea9e1a6bfb50612277c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>09d7b4aa8fa6c09dd5473adfccbc8390</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>cc3ad6a52c8fcc46ac625633af72fed3</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>ade7afeebd44eaa8e3c8c7918a0cf545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>fe9f148a158030c42e64eb27c4addc4b</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>54c45b9c2d8f6cde0d99e3ea06643c38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>72cb23372494ab9a4164429657fbabb0</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MachinesNode *</type>
      <name>getNextMachinesNodeSibling</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>ce37cfcf3d78c69c6036242a03c0caca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MachineNode *</type>
      <name>getFirstMachineChild</name>
      <anchorfile>classMachinesNode.html</anchorfile>
      <anchor>31c0da78c5b2f2062ccdc4e19ea1b572</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageDeclNode</name>
    <filename>classMessageDeclNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>MessageDeclNode</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>f5059ed6d33a71fb538c5482183ecd95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageDeclNode</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>ced2aa4f90b0205d554cd1d37fbab523</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageDeclNode</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>a94cd1cc60b8fcc438a02feea32d12ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>747164999f30a25d1f313cea5518fddd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>ec37c2377b93382f65fe9533bcdbbfeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>9eaec365f587effeb8bc506dccedcf0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>c4e47af36dd0e6f07d30b23dcbc0d978</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>2d18b79e1015a65975735265179683c6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>60af6754ff70cbfd664cfc09c260ffe1</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>6fcc2fa12a1115fe40aa90a651b27237</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>1f8418cbd9630816c423dac90dc56c60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>0b54c47587527ad95a34e98fdd011873</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>c8c98eb657edd7c3ec82c63c361f80c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>620d964586354ff70e2108670d9fbb0c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>10de49705d6a068e16675bb6bb5ed70c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>94656c7ff62b3c98d5bc7a2b5c80232c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>1ec93e180dab5bc1a47cd5ee8be38cd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>a4708d031b9703ee4880f2a9d0d8f01c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageDeclNode *</type>
      <name>getNextMessageDeclNodeSibling</name>
      <anchorfile>classMessageDeclNode.html</anchorfile>
      <anchor>1b7a7d23f3379693da546be5d4aa4298</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MessageNode</name>
    <filename>classMessageNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>MessageNode</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>cdf47309b91db6bc72a8d3b8d3721229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageNode</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>30019af5134709ea17dad1005aad8149</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageNode</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>18f9a02643922409b9cfc201f4ab8351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>52445222577ee674b43cf590e213edd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>9af88e2d04dc90ddbbc607ec2841a662</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>1aefdbbaab5add10587279f6a98a7cc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>e0d3f405fb89cea1c146e38377bcd243</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>b942f613e6ffd9d1d55011f43a524682</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>93e3a56a7714350bab19ccace2b2c0ad</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>9ed2184800fcf7b5cad5ff32fe4bc9ab</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>387ad2f157ebacef6bb93cca41db12e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>464e5667151cf79769e7cb410385abca</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>89bac0c4dd9714203a11133a0780f585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>94497d9af0c2bc8006e79ca102f8a983</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>2688bb7ca4a7ae077bd90015e49f6aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>72ab481851670862fd34817f264a14d7</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>af5304f12c7b5f864d43dce8e06d5b71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>eeb84787046aea97f5cd76ed6d6e1782</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>0d8de5537bbb61b96daa656afab61d7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>07177d7c2037947dc6b78dfbe9b38472</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>59f8bcc26706b4b5d55adb90c0d801a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>62af9912f98b0009ff5cc830986f9e37</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageNode *</type>
      <name>getNextMessageNodeSibling</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>94b9c222034448fbb4537fc3181aa05f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertiesNode *</type>
      <name>getFirstPropertiesChild</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>3060711cb008ff8a598af965488f5860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldsNode *</type>
      <name>getFirstFieldsChild</name>
      <anchorfile>classMessageNode.html</anchorfile>
      <anchor>860805a75dff90be7d666cd864ed137e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>my_yyltype</name>
    <filename>structmy__yyltype.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>dumy</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>bdd0b9a8263fed759d228ec58285a3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_line</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>c5932af440ccbef99721271a15bde6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_column</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>c47ea06c03617f764b979da7bf3f9d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_line</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>497f9626849c208f6a3ab7707449e5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_column</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>78950c23bd753802728313277edfa122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>text</name>
      <anchorfile>structmy__yyltype.html</anchorfile>
      <anchor>cf6b900c2e43ffc9c62300218379fba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDBasicValidator</name>
    <filename>classNEDBasicValidator.html</filename>
    <base>NEDValidatorBase</base>
    <member kind="function">
      <type></type>
      <name>NEDBasicValidator</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>11348f92e3ec9a28b9f4bb79307652f5</anchor>
      <arglist>(bool parsedExpr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDBasicValidator</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>82ef28ac7ccde2f2b871013285854853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>e261662b2d3ec5206c86b54dd675bcb6</anchor>
      <arglist>(NedFilesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>1b4e48aaea15c4297f147379004900da</anchor>
      <arglist>(NedFileNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>2cf1419b2ba8e3aecbb634c65769c08d</anchor>
      <arglist>(ImportNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>3153539220053dde963ee8644d2e7c1b</anchor>
      <arglist>(ImportedFileNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>cf2a9c76c655a722e1ed9efe9cac0f78</anchor>
      <arglist>(ChannelNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>99b8dad241a9864a7c15e64307d09150</anchor>
      <arglist>(ChannelAttrNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>4e7e5dc47ec0ba9f218427cac9f28057</anchor>
      <arglist>(NetworkNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>0c7b86884989ec74bc6e016c10d5d62e</anchor>
      <arglist>(SimpleModuleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>2f1043e89db4c1e044f53177241d893b</anchor>
      <arglist>(CompoundModuleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>baa51922d39504b861001344722660be</anchor>
      <arglist>(ParamsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>5d7a1db13d5f950c9d10f0cf36343a0f</anchor>
      <arglist>(ParamNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>dd57f6b18bdab9c29a1b1a5696fbdc43</anchor>
      <arglist>(GatesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>3274d3071e055e2fe87f57dfa65e4950</anchor>
      <arglist>(GateNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>5b830acca9aa54bec160ced306602525</anchor>
      <arglist>(MachinesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>bae2589ab36fcc8c13011bc723210874</anchor>
      <arglist>(MachineNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>6a59a787de02e22694b611baaaee4f7c</anchor>
      <arglist>(SubmodulesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>1d0348245d2292a5e2d72412104bb980</anchor>
      <arglist>(SubmoduleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>ff34bcfd54ca41aada3e1d03a8eca7a5</anchor>
      <arglist>(SubstparamsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>ee2923dd6c78f74e60b46d996c0d23be</anchor>
      <arglist>(SubstparamNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>4a3238632e3a368f46c98fa043d8aec7</anchor>
      <arglist>(GatesizesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>22003aad506963ba74c8374475ddc14f</anchor>
      <arglist>(GatesizeNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>d4c79baf2688ee520cc8dfe18ad805a1</anchor>
      <arglist>(SubstmachinesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>a6693b49137ceada4e2fab54e7d15455</anchor>
      <arglist>(SubstmachineNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>70ae74bae28b3ab5288887dd61af2b67</anchor>
      <arglist>(ConnectionsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>fb9404d56711e839d787984fe883c580</anchor>
      <arglist>(ConnectionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>e929a64ca23ddd97f5fedc99d9c6838f</anchor>
      <arglist>(ConnAttrNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>3c6accbf8f48ae914ad061b5fd1d3025</anchor>
      <arglist>(ForLoopNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>02886120c0ccc9d2feaa06d91834b2b0</anchor>
      <arglist>(LoopVarNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>35a698813cde6345a95e964edab66223</anchor>
      <arglist>(DisplayStringNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>ff1817df36b4a8d11cc49a19ba780afa</anchor>
      <arglist>(ExpressionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>6c3b16de3d7b5c2b5c30d03b35ffe5f0</anchor>
      <arglist>(OperatorNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>6eb2787f404981bf5b23cc60fceaf569</anchor>
      <arglist>(FunctionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>242ed280c696615c63ed3645984cb514</anchor>
      <arglist>(ParamRefNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>a35e4c906021c0c8b045a2ee14202cf0</anchor>
      <arglist>(IdentNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>82cb4dd505e4cebe3b1a157779b3874c</anchor>
      <arglist>(ConstNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>e0ebfa04ebb44e6a4b75009600a63941</anchor>
      <arglist>(CplusplusNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>bf6adb4703342cd73f1b188f9f4ad329</anchor>
      <arglist>(StructDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>d717723e13a13168047e79469c468bf1</anchor>
      <arglist>(ClassDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>73bd59580c780a3854dee9d7a22f5816</anchor>
      <arglist>(MessageDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>57379bdd54b187e2b0756eb1dcb5cbd4</anchor>
      <arglist>(EnumDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>7d7b596f5b75c54325642db278396bfa</anchor>
      <arglist>(EnumNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>2382a04d5254b186fc41fab19c36c7fb</anchor>
      <arglist>(EnumFieldsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>f592ee7d532239583280ce390e095ffb</anchor>
      <arglist>(EnumFieldNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>8d31ebd3add1da364b5a6c36be732a50</anchor>
      <arglist>(MessageNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>2aec1676298a0093c249add89205dd1b</anchor>
      <arglist>(ClassNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>9f7c928d34680c7060593cb28b40aa59</anchor>
      <arglist>(StructNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>5622671438bf7eca36245b25b1bbf9b3</anchor>
      <arglist>(FieldsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>846643f2112062be4d4e9cd2061fb2ce</anchor>
      <arglist>(FieldNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>22c65c3f69da12bd6497c2cc049c24a6</anchor>
      <arglist>(PropertiesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>761b9328309a3cf701d0be83174deb2e</anchor>
      <arglist>(PropertyNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>f424cbde7058659cfa8b82801d3e7d56</anchor>
      <arglist>(UnknownNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkUniqueness</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>c6047719c9cdf5949ddb4b524b47fc52</anchor>
      <arglist>(NEDElement *node, int childtype, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkExpressionAttributes</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>5a65125bc62a18357526544e5c6d25a2</anchor>
      <arglist>(NEDElement *node, const char *attrs[], bool optional[], int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>parsedExpressions</name>
      <anchorfile>classNEDBasicValidator.html</anchorfile>
      <anchor>6ba75069234df7b806c9eeb2187c000e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDClassicImportResolver</name>
    <filename>classNEDClassicImportResolver.html</filename>
    <base>NEDImportResolver</base>
    <member kind="function">
      <type></type>
      <name>NEDClassicImportResolver</name>
      <anchorfile>classNEDClassicImportResolver.html</anchorfile>
      <anchor>75c4e2526f267cd9946edd4aca228a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDClassicImportResolver</name>
      <anchorfile>classNEDClassicImportResolver.html</anchorfile>
      <anchor>1be0ae2cf986230de71f2f2e087113a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addImportPath</name>
      <anchorfile>classNEDClassicImportResolver.html</anchorfile>
      <anchor>6167f7cdb459895adf201e94ad479bd4</anchor>
      <arglist>(const char *dir)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>loadImport</name>
      <anchorfile>classNEDClassicImportResolver.html</anchorfile>
      <anchor>a3824474bed5ceeb8fdac82feb2074f8</anchor>
      <arglist>(const char *import)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDStringVector</type>
      <name>importpath</name>
      <anchorfile>classNEDClassicImportResolver.html</anchorfile>
      <anchor>a62355dfebc13b759bcbef3ec4b9acf3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDCompiler</name>
    <filename>classNEDCompiler.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDCompiler</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>50c602c9344b660e50404aa8452fd437</anchor>
      <arglist>(NEDFileCache *fcache, NEDSymbolTable *symtab, NEDImportResolver *importres)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDCompiler</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>a2375a2c21ae27bf5ab2dc14da1c3a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>590e59056d9537b742a2b84663fe1125</anchor>
      <arglist>(NEDElement *tree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addImport</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>f4edab20e0867f00bc29801353274eac</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isImported</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>5d8b7e42ab211200f2a04a30e74312bf</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doValidate</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>e494178b8fd8a5272d3816b0773381ea</anchor>
      <arglist>(NEDElement *tree)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDMap</type>
      <name>imports</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>723cc2dbf7183ddc47b644ebe79865ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDFileCache *</type>
      <name>filecache</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>2c8a7861148ab088d5f75af510e27f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDSymbolTable *</type>
      <name>symboltable</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>902d91c938821819da04230882dc64bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDImportResolver *</type>
      <name>importresolver</name>
      <anchorfile>classNEDCompiler.html</anchorfile>
      <anchor>00d4e8e33679684fbfd967f128d2e440</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDCppGenerator</name>
    <filename>classNEDCppGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDCppGenerator</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>cd3a0ee918563d3510095a4191a959a7</anchor>
      <arglist>(ostream &amp;out, ostream &amp;outh, NEDSymbolTable *symtab)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDCppGenerator</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>c33510c92478a0886f322faebe0c23e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndentSize</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ffc104e1728d638bd048323d434fb25b</anchor>
      <arglist>(int indentsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>67621881506b2c4689d1ae91721441c4</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="enumvalue">
      <name>MODE_NORMAL</name>
      <anchor>53dee982c8bd2325ffd4e8f026840c3f3bc04e3a17aabd639c766a335f493bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODE_FINALLY</name>
      <anchor>53dee982c8bd2325ffd4e8f026840c3f63012b4cb6412f11ba24c0259ce527f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>increaseIndent</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>67159ae43f6c787ff68bc17cbee14f1c</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>decreaseIndent</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>3d74764162c0beef8686167db0fae0a3</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateItem</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>c7ea7b0654a641c54b4a7fe97506c8c6</anchor>
      <arglist>(NEDElement *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildren</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>359abf6a75cc91c039d61bc18aee9b8a</anchor>
      <arglist>(NEDElement *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildrenWithTags</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>24dc4db3cc7f98481db1796eb0aa795f</anchor>
      <arglist>(NEDElement *node, const char *tags, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildrenExceptTags</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>9591d62bce0655f1a927f48a34a07be3</anchor>
      <arglist>(NEDElement *node, const char *tags, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ExpressionNode *</type>
      <name>findExpression</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ec39c5ae670042e688f1504375bc1ac9</anchor>
      <arglist>(NEDElement *parent, const char *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ConstNode *</type>
      <name>getConstantExpression</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>a680611f7fb7264f29310a00dec8a1d1</anchor>
      <arglist>(ExpressionNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeProlog</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>9d7dd8e1c5f6992faa157b2bed6fb55e</anchor>
      <arglist>(ostream &amp;out)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printTemporaryVariables</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>f4de46845ec16d07f75704f872652d16</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>beginConditionalBlock</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>3339c0ea0141ae183864749b6dd1ca38</anchor>
      <arglist>(NEDElement *node, const char *&amp;indent, int mode, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>endConditionalBlock</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>274dcfe9775e81ae7afeb0329e82ae45</anchor>
      <arglist>(NEDElement *node, const char *&amp;indent, int mode, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNedFile</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>4a550cd303eac424437707dbf4897152</anchor>
      <arglist>(NedFileNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNedFiles</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>2ea4689f4b7a1cfe3b4ff5a07e8462fc</anchor>
      <arglist>(NedFilesNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doImports</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>3f589a49fe00dadc1deaba7ec1abeef4</anchor>
      <arglist>(ImportNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doImport</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ee22ec54e47d83dcb7ad67a83c060de3</anchor>
      <arglist>(ImportedFileNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannel</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>dcbca88328b2241f178fcb755e776566</anchor>
      <arglist>(ChannelNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannelAttr</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ce7fd16fe67041deb62c6fa9cd7bc383</anchor>
      <arglist>(ChannelAttrNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNetwork</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>e1f8a1999942f7c3b40829c5c7637172</anchor>
      <arglist>(NetworkNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSimple</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ffe7c723ffbd9100b764ada0f98f3bf7</anchor>
      <arglist>(SimpleModuleNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModule</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>dcbe656d17e077e724fd238d60e8d8e3</anchor>
      <arglist>(CompoundModuleNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParams</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>a556304d84eb81bad5c5bfe07a27522e</anchor>
      <arglist>(ParamsNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParam</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>55b3f9a7a55a9016d4419c6fc4bb9624</anchor>
      <arglist>(ParamNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGates</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>4f56a1ef6e1aaaeaa7c344b4ca972280</anchor>
      <arglist>(GatesNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGate</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>917045e5b1355b514ce064a067436517</anchor>
      <arglist>(GateNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMachines</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ada84f4c6bbf1e93ffed711482b073f4</anchor>
      <arglist>(MachinesNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMachine</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>3906bd726d8b4c9a76d46495bf6cb3e3</anchor>
      <arglist>(MachineNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodules</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>cbffc4141e06ad84084e767c7fb41f11</anchor>
      <arglist>(SubmodulesNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolveSubmoduleType</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>4239fff641c9aa61bc2761811bb1322d</anchor>
      <arglist>(SubmoduleNode *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodule</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>6a8d0f506262248a1dded24444ec58cb</anchor>
      <arglist>(SubmoduleNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmoduleFinally</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>59a12b685814309a6654c031a1446287</anchor>
      <arglist>(SubmoduleNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstparams</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>e4daf507ab25ab32ad412795fa4af5a1</anchor>
      <arglist>(SubstparamsNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstparam</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>729e3dbd6d17c2f62f17f27d7eddc6b6</anchor>
      <arglist>(SubstparamNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGatesizes</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ec8aea4a209c2942e4d3b0e08a056f2a</anchor>
      <arglist>(GatesizesNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGatesize</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>3dba2bfc7c786a69b6c0ae445119cd10</anchor>
      <arglist>(GatesizeNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstmachines</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>de79fb794f5f02f6854179f548afbb94</anchor>
      <arglist>(SubstmachinesNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstmachine</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>1620724f21f7f252a236564b569f8249</anchor>
      <arglist>(SubstmachineNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnections</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>b4d226657cb796a882bde6c86d5c0d9d</anchor>
      <arglist>(ConnectionsNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolveGate</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>1cdd8f247ecb0e2c7fa9de85b9db1b28</anchor>
      <arglist>(const char *modname, ExpressionNode *modindex, const char *gatename, ExpressionNode *gateindex, bool isplusplus)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolveConnectionAttributes</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>8ed4ccab7be3dfda7737954679af5fc4</anchor>
      <arglist>(ConnectionNode *node, const char *indent, int mode)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnection</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>36b9e6f35cc632db574cda0dc6adb2b7</anchor>
      <arglist>(ConnectionNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnattr</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>52b288dc1a88f5a4628fe21903a7cd15</anchor>
      <arglist>(ConnAttrNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doForloop</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>53c6c600efe6377ebacaa92702b76b7a</anchor>
      <arglist>(ForLoopNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doLoopvar</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>7aa0cc3e32e2dfbaade3c4173e56949d</anchor>
      <arglist>(LoopVarNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doDisplayString</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>a4224c377593aaf524a3bc1c7e6c496e</anchor>
      <arglist>(DisplayStringNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExpression</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>7094a3cae7c67ae11b382af6450c37e2</anchor>
      <arglist>(ExpressionNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCplusplus</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>55609129ee67f2f065dec0837d3eb8ea</anchor>
      <arglist>(CplusplusNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doStructDecl</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>b5312ba9b32aebe98a50b5c8677817f3</anchor>
      <arglist>(StructDeclNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doClassDecl</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>b5102e48141600e63ff828cc6808990d</anchor>
      <arglist>(ClassDeclNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMessageDecl</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>860efc2c1480949602cdb46c7a775856</anchor>
      <arglist>(MessageDeclNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumDecl</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>50f10abaecff296123b135df2348b040</anchor>
      <arglist>(EnumDeclNode *node, const char *indent, int mode=MODE_NORMAL, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnum</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>5457579fa83dc04924eacb228a195a8b</anchor>
      <arglist>(EnumNode *node, const char *indent, int mode, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumFields</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>16893668c09faca2b0647e6a3c324b72</anchor>
      <arglist>(EnumFieldsNode *node, const char *indent, int mode, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumField</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>2ce6afea6311f1efc3b3cdd8f2f0b8e5</anchor>
      <arglist>(EnumFieldNode *node, const char *indent, int mode, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMessage</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>4db33a1c8a46d29a8c0aefdfcee7f0a4</anchor>
      <arglist>(MessageNode *node, const char *, int, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doClass</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>e8558909e211e030f9829e839468f702</anchor>
      <arglist>(ClassNode *node, const char *, int, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doStruct</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>8a2afca7300bd0a88d361b87619b7e75</anchor>
      <arglist>(StructNode *node, const char *, int, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepareForCodeGeneration</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>3abc0598ea7075a6979f142f44ee92d9</anchor>
      <arglist>(NEDElement *node, ClassDesc &amp;cld, FieldDesc *&amp;fld, int &amp;numfields)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateClass</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>c0f4d9cbfe5a60d8403f9cc38599294f</anchor>
      <arglist>(ClassDesc &amp;cld, FieldDesc *&amp;fld, int numfields)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateStruct</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>348827ceed0bd56b0279b9b1c1bf72b4</anchor>
      <arglist>(ClassDesc &amp;cld, FieldDesc *&amp;fld, int numfields)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateDescriptorClass</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ab8f94c22c0ceb4bc542f44f3e7941a4</anchor>
      <arglist>(ClassDesc &amp;cld, FieldDesc *&amp;fld, int numfields)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream &amp;</type>
      <name>out</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>e269bb282d08f99089653e2d37c3a21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream &amp;</type>
      <name>outh</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>e69febba99f90a82bc111998d8eba582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>in_network</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>ac902caa4a29dc9ffed69879e1687627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>submodule_var</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>e13814f913f5a5a421a2b9db2b5343bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indentsize</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>932a48d22be5ff6ec6068b2c33cfec87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CppExpressionGenerator</type>
      <name>exprgen</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>09913523208f6f39c8b7722c4fccc5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDSymbolTable *</type>
      <name>symboltable</name>
      <anchorfile>classNEDCppGenerator.html</anchorfile>
      <anchor>3d1d6a0382f161fef383a696bb82f238</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDDTDValidator</name>
    <filename>classNEDDTDValidator.html</filename>
    <base>NEDValidatorBase</base>
    <member kind="function">
      <type></type>
      <name>NEDDTDValidator</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>f2518c705c264dbfa246593051cd2a69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDDTDValidator</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>2a6b7713f5416f3e82af03fe8b73f274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>8ad450fa058a4d00e643cb5a5f7067b2</anchor>
      <arglist>(NedFilesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>8a0ec468ab34ac3d01d9b71ed7c1bac1</anchor>
      <arglist>(NedFileNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>902e02904193e060073dabbf666f2617</anchor>
      <arglist>(ImportNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>eaa32b22c011bb7251bb5915b7307ce3</anchor>
      <arglist>(ImportedFileNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>50562b5ca1ae657c5f5015eb453b33b6</anchor>
      <arglist>(ChannelNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>289d858aa8160cc4e0b6d5565a8a8fed</anchor>
      <arglist>(ChannelAttrNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>6a14efd7f3deeeaf19f5a65ef8cca527</anchor>
      <arglist>(NetworkNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>8f43a388ec71ce8184bdf36b874cb689</anchor>
      <arglist>(SimpleModuleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>9077aef09c1af72976723063e37a3d53</anchor>
      <arglist>(CompoundModuleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>8ecba23e92aa1a5c40ba0d61ae6b9103</anchor>
      <arglist>(ParamsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>c173426007b3dd36762530aacbc10b9b</anchor>
      <arglist>(ParamNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>b7602dfd8a6e1f6a80e2b38c444d6084</anchor>
      <arglist>(GatesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>bdd4859735a2177799d2637fb2253e87</anchor>
      <arglist>(GateNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>4f45e7ae6793edd55d0b0f6af160ac5d</anchor>
      <arglist>(MachinesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>5a6867997def4b2356552feafed5d254</anchor>
      <arglist>(MachineNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>d57ce7d0382739f88527c0f77542de19</anchor>
      <arglist>(SubmodulesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>9ac7f7644e94674b6c56a9a890bff9e3</anchor>
      <arglist>(SubmoduleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>dfefd45ec09b5805758fe974087e0704</anchor>
      <arglist>(SubstparamsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>68062cb3ab4a796fcf286b5d32c9bd8a</anchor>
      <arglist>(SubstparamNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>222a1a6a373cd3a6d99d5266e3513201</anchor>
      <arglist>(GatesizesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>4accc8e5bbd2ec683ac08739a2c4929f</anchor>
      <arglist>(GatesizeNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a63d90f6160d99fae37ca8d8c99c67c5</anchor>
      <arglist>(SubstmachinesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>beaf98eb5b290f56952408eb8ff365c0</anchor>
      <arglist>(SubstmachineNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>8a52d6e704e5dc1729e39446999cf929</anchor>
      <arglist>(ConnectionsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>362e29aad3a6a17cd1ab898813a99667</anchor>
      <arglist>(ConnectionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>fd11de9713f46743efeda947149e3c86</anchor>
      <arglist>(ConnAttrNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>fbfd66467c6b4106794231061ab9f37b</anchor>
      <arglist>(ForLoopNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>0fc82404463b82a16bc1ec6708691610</anchor>
      <arglist>(LoopVarNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>46a92ff041e9e0674cc89ac1e972f267</anchor>
      <arglist>(DisplayStringNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>576789f29fec61a521af371347dafaf3</anchor>
      <arglist>(ExpressionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>08bb39ae1b94d99dd8a8b983b540598a</anchor>
      <arglist>(OperatorNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>f46690f1f9631b37bda45d68a7e6224e</anchor>
      <arglist>(FunctionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>abda4f9a2f3f85b2ef3ac16c07a7c088</anchor>
      <arglist>(ParamRefNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>d7362358cbb5b4fb740616d16418dd63</anchor>
      <arglist>(IdentNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>14c96eef9b0b87b0dd19e12086ada542</anchor>
      <arglist>(ConstNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>400a148104139970b5f147c15bbee27c</anchor>
      <arglist>(CplusplusNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>7a0e669b70f8cd2839d7337969ba9ea6</anchor>
      <arglist>(StructDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>010efe173909f795d909c8208b05afb9</anchor>
      <arglist>(ClassDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>c65c7c7cbe1cac115ce5832cf6012821</anchor>
      <arglist>(MessageDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>f230c0932d04411c583330b2aa6fda41</anchor>
      <arglist>(EnumDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>bdd028705cdeaf7ee288922c58e8541a</anchor>
      <arglist>(EnumNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>a17583b0d050bed3c263cd2af353ee36</anchor>
      <arglist>(EnumFieldsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>86a1c60b9a1f60d9d0f155e61ee3e7fa</anchor>
      <arglist>(EnumFieldNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>80e27dd260c5f0822cc679f694f3e103</anchor>
      <arglist>(MessageNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>8d65306d66f7c2fdc065bff3898d0487</anchor>
      <arglist>(ClassNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>c8a0b1f5fc06f27e5f41d76b596126fb</anchor>
      <arglist>(StructNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>39e4ec587233c5f27a3e785c903ef269</anchor>
      <arglist>(FieldsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>1f29d74b5da3b9ac1267ad47bfe9dd8c</anchor>
      <arglist>(FieldNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>7f559f3b589d496bbd29fe706a0ac916</anchor>
      <arglist>(PropertiesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>3f8c46219bbd7df8746aa68b109a930b</anchor>
      <arglist>(PropertyNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>0300918dbfd7419b70a8c4b6ed93c716</anchor>
      <arglist>(UnknownNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkSequence</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>4eba02f1f9a67480882bb1ad0fec77c3</anchor>
      <arglist>(NEDElement *node, int tags[], char mult[], int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkChoice</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>96114b05ea868139fd521bbe17130714</anchor>
      <arglist>(NEDElement *node, int tags[], int n, char mult)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkEmpty</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>f339af60b53404e6bf56ddbf7519b1a5</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkRequiredAttribute</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>341920722c8f87a9ce6ff954276d244d</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkEnumeratedAttribute</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>3034965bc42aa512ca5cd8056a77af22</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *vals[], int n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkNameAttribute</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>67643d134883d5f27e3d9dc60f25b8dc</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkCommentAttribute</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>be429bd79ae65885ed3920bff3187177</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkNMTokenAttribute</name>
      <anchorfile>classNEDDTDValidator.html</anchorfile>
      <anchor>56243ce7469acbb90dd60d595c87d657</anchor>
      <arglist>(NEDElement *node, const char *attr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDElement</name>
    <filename>classNEDElement.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDElement</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>150fce9ac6ab72088eb50b289e348a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NEDElement</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ae540ce25b7c00beaba23b0a36d5a396</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDElement</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ddf63060f4f3e4532ce98590418ea0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ad5f24ca41d0613a11cd7742dba25f47</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>96d65f0b87ffdaf6421a7b1ac941e3b5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getId</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>2fac9778556dbd69f2bcebd42866af0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setId</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>901658abb3f29d40ed489ad6f3089fb7</anchor>
      <arglist>(long id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>d3045c1c3a95dcdbc20bd8319a3e3511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLocation</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>2cc84869236bb532ef3308c49eb6ac2a</anchor>
      <arglist>(const char *loc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyDefaults</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>dba305757fac9fd821f908fdace0646b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>028e3f1709d83254b9a005998ac57fa6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>667a2302bc29ff83f3c0353031787fb6</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>lookupAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>0d4f24f9f5054bcdba51f5e6d909fcea</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>bb0e68ce8c095f820916a8d213045341</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>7dc2b37862ff34dccadc8c60355f8001</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>3aa8eb20fbd0fecd8fb2a0f5e66fd99d</anchor>
      <arglist>(int k, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>1e64d405d63c4ece5baecdaa7a23abd9</anchor>
      <arglist>(const char *attr, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>798534bcfbfc9c1ba45daa4bbcb36abb</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>e9a5af76c97812f1bab6eacdea0e1fd3</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getParent</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>bbce7c0950070a418f9433fb19ff85e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ba4ba6b0c789ac6a657dca297e8bcbd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getLastChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>2cdeee7fd5e3eb5ca7c15e3354ba815a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>3a29a67fd9b7d52e7d83badd88fa0682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getPrevSibling</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>419e46c88a88142fc294cca33d6196fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>d72aa365201a45a46f9614a925837c08</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertChildBefore</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>7566998f868f802e08a3f0c1bb132ab6</anchor>
      <arglist>(NEDElement *where, NEDElement *newnode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>removeChild</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>948264625ae9c4e18eff00fa98b22c3d</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>b075bc5661a07d7b202f54a33076910e</anchor>
      <arglist>(int tagcode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>f11371f18d0680e07dc8cd741577a7bb</anchor>
      <arglist>(int tagcode) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumChildren</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>0888baf35a5035610dd2e46c016567c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumChildrenWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>ad4ec43ef6e13628a04d7334e924df56</anchor>
      <arglist>(int tagcode) const </arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>d65ed23c12c7ef89b91b1ca7a911643c</anchor>
      <arglist>(int tagcode, const char *attr, const char *attrvalue=NULL)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getParentWithTag</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>e4e94bcddbbfa0736db9987d31d22435</anchor>
      <arglist>(int tagcode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUserData</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>8f8b72addeaf41e83aa1dfe1e9d07b0e</anchor>
      <arglist>(NEDElementUserData *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElementUserData *</type>
      <name>getUserData</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>66d8dcbdc98eab3a6248cc79eb8c165e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>stringToBool</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>eb116fdb333899f9a3845027e4039867</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>boolToString</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>7c1cdcf885beb64a3a832c4dadbe654e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>stringToEnum</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>deac700b89f0f2996a9f015a764f3189</anchor>
      <arglist>(const char *s, const char *vals[], int nums[], int n)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>enumToString</name>
      <anchorfile>classNEDElement.html</anchorfile>
      <anchor>c912116d6281c6095cf05725379ae4e4</anchor>
      <arglist>(int b, const char *vals[], int nums[], int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDElementFactory</name>
    <filename>classNEDElementFactory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDElementFactory</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>b2ece66835d8f80a90d1fe11588d9cee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>createNodeWithTag</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>a6ff3c953864a0a5d228b34a7ca35c2a</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>createNodeWithTag</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>1decfac52d6a6957cd40ff10f3c38fa9</anchor>
      <arglist>(int tagcode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NEDElementFactory *</type>
      <name>getInstance</name>
      <anchorfile>classNEDElementFactory.html</anchorfile>
      <anchor>9f2c035bb1591dc6bd1226e8fb0fc83f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDElementUserData</name>
    <filename>classNEDElementUserData.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDElementUserData</name>
      <anchorfile>classNEDElementUserData.html</anchorfile>
      <anchor>46b365f03364b521e1cd80e90faeb09c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDElementUserData</name>
      <anchorfile>classNEDElementUserData.html</anchorfile>
      <anchor>0280085a77bb34733ea20c5801b692ba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDException</name>
    <filename>classNEDException.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDException</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>2b7aa64c643357a35b565d53c37a69cc</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>errorMessage</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>94f74f6792ed3d5858d4169c10546c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>errormsg</name>
      <anchorfile>classNEDException.html</anchorfile>
      <anchor>ce491407827a0457d59af2a534e67061</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDFileBuffer</name>
    <filename>classNEDFileBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDFileBuffer</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>d95258b50e93a66a5052d6838a25a603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDFileBuffer</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>ed84e2fcce5856de7f9ddfd233402bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFile</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>ba0c7c33eec39664fde117db6c51d5ff</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setData</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>6265482a10d8d9b25f7c6547dd852739</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>cb9c2c8efa72652336bc462d1ce6d29b</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFileComment</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>735fa7bc68bda8888f34ae1d4169cdb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>f9996288f39dcdb0f9563e0895284f71</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>28e61a48fcb3bb7b408d0330eb9c1fd3</anchor>
      <arglist>(YYLTYPE pos)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFullText</name>
      <anchorfile>classNEDFileBuffer.html</anchorfile>
      <anchor>50d5e5c4aedc94103a84797a6583e0d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDFileCache</name>
    <filename>classNEDFileCache.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDFileCache</name>
      <anchorfile>classNEDFileCache.html</anchorfile>
      <anchor>141bfb1b6d6394c44330d560159d84d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDFileCache</name>
      <anchorfile>classNEDFileCache.html</anchorfile>
      <anchor>064a0c3c72e2d8a74d60fb3f06e6710a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFile</name>
      <anchorfile>classNEDFileCache.html</anchorfile>
      <anchor>7fffd28549ab606674193715ccde2965</anchor>
      <arglist>(const char *name, NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getFile</name>
      <anchorfile>classNEDFileCache.html</anchorfile>
      <anchor>28adaddcf1ef9ce05d427328a87f93b6</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDMap</type>
      <name>importedfiles</name>
      <anchorfile>classNEDFileCache.html</anchorfile>
      <anchor>d450aed8ab072840ad30e55b63fd3421</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NedFileNode</name>
    <filename>classNedFileNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>NedFileNode</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>d2d9fd558ce858eefef4a87f51173dc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedFileNode</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>5bb4bb04825a2ebdaa7127fff29498db</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NedFileNode</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>1635c734f80d672cf720cef1497e0151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>8215e7b44e2e161511e8ba7b8e3ccb97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>52169b4a02a6962a588b673b353838c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>ccf34fc0281fa9142c4dc5679c550f46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>0eb0da190767e9943048faf6b82b5d73</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>bc2563b0258d7edfe9deb3105882fdfb</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>db2683fcaccc46bcdc21a9d2f9688d14</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>b5032806b5ec23d68977b767e05c2748</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFilename</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>c98e33a06d76429ebe4939af683ca6f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilename</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>9341b9defd0722ca2e49efcc1b99c15c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>e438b9069d33c12f547a7e9d6d7e27bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>c1cd899aabe770f3b620daf1d7c2e31f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getPreferredIndent</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>5ef8b8cfab71edd4754a46fcc0ab0140</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreferredIndent</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>c95b57a4dc1d5ad865befeb2f243d8ed</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>499683a6f347587993c56a4cdd3cbaed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>e662594853f725e267f10a8eb142e8b1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFileNode *</type>
      <name>getNextNedFileNodeSibling</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>c683927840c6dae6a610f6825f950f39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ImportNode *</type>
      <name>getFirstImportChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>c79ed2b603253caa2ff9e7f1b57fef7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ChannelNode *</type>
      <name>getFirstChannelChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>80d57ac6759d61cd1c271cb30ce7db6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleModuleNode *</type>
      <name>getFirstSimpleModuleChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>e1ac9fe93e91e85178f67050a3e74ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CompoundModuleNode *</type>
      <name>getFirstCompoundModuleChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>d4638cdeedc7b5ae07e8dc5e85fddf74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NetworkNode *</type>
      <name>getFirstNetworkChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>b34b61079a1b9072a8c055e538fb5341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CplusplusNode *</type>
      <name>getFirstCplusplusChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>52f13741b78a35fce5256196e94f22bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructDeclNode *</type>
      <name>getFirstStructDeclChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>ed48e8ef4d40dafb255c11f527b45f65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassDeclNode *</type>
      <name>getFirstClassDeclChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>07a268788c8e9f1d9b3b81f1622f855f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageDeclNode *</type>
      <name>getFirstMessageDeclChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>ce84f5a67fb3bd936c16615e7b7e3ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumDeclNode *</type>
      <name>getFirstEnumDeclChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>62d80cd8e48c6aa90d3a5be7b34ca4e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EnumNode *</type>
      <name>getFirstEnumChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>5eca904e5ea13eb03d05908f7d262403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MessageNode *</type>
      <name>getFirstMessageChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>e5d3dcc036fbda05e29c2cfa571cd2a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ClassNode *</type>
      <name>getFirstClassChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>ea72a7c97e2ad0281e2beeda604cc7f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructNode *</type>
      <name>getFirstStructChild</name>
      <anchorfile>classNedFileNode.html</anchorfile>
      <anchor>a91e357ef8bbeceac7bc1bab7b9a7248</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NedFilesNode</name>
    <filename>classNedFilesNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>NedFilesNode</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>6a3c7911f558b7fdb7ff3f3274131722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedFilesNode</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>8b8e470536017baceb4804d6ebdfd33a</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NedFilesNode</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>4854b83b80f4f7eba42a36f6fc546d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>ab174c821e50fefd4e5ba3e3b1cdccbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>739ead2e0e6543cc1be16fde0f761f71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>afa22afa11ca47f5641f4e104aef10fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>a209ab63d733567a06278692520fd454</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>07a6a36b619286a40ef7e62f002e1efa</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>c06589b81cad508fcef2a4fa1293a073</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>169201e3885bea9f02517af2305ee929</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFilesNode *</type>
      <name>getNextNedFilesNodeSibling</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>b8f64218827b856071ecc5d52ef471be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFilesNode *</type>
      <name>getFirstNedFilesChild</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>d3be5f7a94790a9c59c924fdfd054db6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NedFileNode *</type>
      <name>getFirstNedFileChild</name>
      <anchorfile>classNedFilesNode.html</anchorfile>
      <anchor>dd717ea3723dcba7bc185e1021456e46</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDGenerator</name>
    <filename>classNEDGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDGenerator</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>cac0132ff7bd66b7e0131ef8b1c81f02</anchor>
      <arglist>(ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDGenerator</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>ba7202e8a7011102b1eb4ecc4be71542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndentSize</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d49a3db42f66d21593ad5d158abce52a</anchor>
      <arglist>(int indentsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewSyntax</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>4e67d91f55cebb14ecb7ec0016c51816</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>ba82bf901871ffb48fafd1a126ed4bb2</anchor>
      <arglist>(NEDElement *node, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateNedItem</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>0a20372e9b3314c91ad5c425444a25f5</anchor>
      <arglist>(NEDElement *node, const char *indent, bool islast, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildren</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d9c90f05794913bd76d6bc4ec33b2763</anchor>
      <arglist>(NEDElement *node, const char *indent, const char *arg=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateChildrenWithType</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>0c02d807fc57c849f5400a4cdf488e6a</anchor>
      <arglist>(NEDElement *node, int tagcode, const char *indent, const char *arg=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>increaseIndent</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>10123847e0d9c57ad4cd840bcd2b8f92</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>decreaseIndent</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>8ab6be79092b4be3cac847fccf9dceba</anchor>
      <arglist>(const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printExpression</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>491fb3a0d7c9dff0d53c108be4eb9d61</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printVector</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>e8e8cf522bc2069d473e39ed11cff369</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printIfExpression</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>8c9b6207fc578c815ded90bf2ea4d9ff</anchor>
      <arglist>(NEDElement *node, const char *attr, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendBannerComment</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>7262665dbeae2392cc1166ebf10b3fe0</anchor>
      <arglist>(const char *comment, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendRightComment</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>2afecd527db453e88c8fd8895ec28126</anchor>
      <arglist>(const char *comment, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendInlineRightComment</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>8c2450df002438329772f4fd4c73de84</anchor>
      <arglist>(const char *comment, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendTrailingComment</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>512519b60eea633dfeded4b3b5c2333b</anchor>
      <arglist>(const char *comment, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNedfiles</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>048a343961bf9f21f2c491d5b6380b3f</anchor>
      <arglist>(NedFilesNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNedfile</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d24ccef6cdcec3148c063b0810005638</anchor>
      <arglist>(NedFileNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doImports</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>6e96110aff4452294702fbc11f2e2ecd</anchor>
      <arglist>(ImportNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doImport</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>47a166b57ab973f1b2b3d5ef7aa8db17</anchor>
      <arglist>(ImportedFileNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChannel</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>af7644d0bf4836495a895b73ef7195a0</anchor>
      <arglist>(ChannelNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doChanattr</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>74e04f2ac900c2fd3ca68b1e4d9a5715</anchor>
      <arglist>(ChannelAttrNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doNetwork</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>7d1d8bb4452a39a8f8c03d4a83d9b517</anchor>
      <arglist>(NetworkNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSimple</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>fe69ac84cdbdf098a8616ecb7b87545b</anchor>
      <arglist>(SimpleModuleNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doModule</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>971d484355d1dfbae134a2d210db5a37</anchor>
      <arglist>(CompoundModuleNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParams</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>5d985f4642c337c771f3afddd8cfcf76</anchor>
      <arglist>(ParamsNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParam</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>c09f4931b386f6644fe3e6563c995caf</anchor>
      <arglist>(ParamNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGates</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>0f258cecb857329580ef321b4eb39e0e</anchor>
      <arglist>(GatesNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGate</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>6ba954df762968f5f248db1bae7c5eb8</anchor>
      <arglist>(GateNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMachines</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>0c0b438a24571f4125875ddc280f9c7d</anchor>
      <arglist>(MachinesNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMachine</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>111a8e7ceeea2e35006ac2feec20ede7</anchor>
      <arglist>(MachineNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodules</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>5ddecbd8383e06923d27b5331f2a9f8d</anchor>
      <arglist>(SubmodulesNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubmodule</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>937e2ad8236f7830b17fd2443ce5ae8f</anchor>
      <arglist>(SubmoduleNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstparams</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d2f9aa30ae340db86b5a2f4c39188dc2</anchor>
      <arglist>(SubstparamsNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstparam</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>3283da01e87662921bf74ed9d76830bf</anchor>
      <arglist>(SubstparamNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGatesizes</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>b074098b448157b24cae420b7d102bae</anchor>
      <arglist>(GatesizesNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doGatesize</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>bfb8a1dc8f2323aaa2b67fa5839b97a9</anchor>
      <arglist>(GatesizeNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstmachines</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>15f2cdcef85a6e93b7a136591f088d54</anchor>
      <arglist>(SubstmachinesNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doSubstmachine</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>832c4241ce62b956c2362d8a4e28be81</anchor>
      <arglist>(SubstmachineNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnections</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>108fbd7e43627e85461a958b3300dbcf</anchor>
      <arglist>(ConnectionsNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printGate</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>a92b25cc51e21a89b7169fa85fc3b311</anchor>
      <arglist>(NEDElement *conn, const char *modname, const char *modindexattr, const char *gatename, const char *gateindexattr, bool isplusplus, const char *indent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnection</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>9a62a3968ae1adf81379a95a3d15045d</anchor>
      <arglist>(ConnectionNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConnattr</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>1907e8ee1f8702b49a987bf3b077c09b</anchor>
      <arglist>(ConnAttrNode *node, const char *indent, bool islast, const char *arrow)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doForloop</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>281dfa71acc4252f1b22487236c50559</anchor>
      <arglist>(ForLoopNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doLoopvar</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>1dc8d71aa5a302960dc65c093424de3f</anchor>
      <arglist>(LoopVarNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doDisplaystring</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d888a412455bf5ab8a910294aa6a93ac</anchor>
      <arglist>(DisplayStringNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doExpression</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>40adaf43160cafaed0cc21339f05132c</anchor>
      <arglist>(ExpressionNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>33e16c8f33d5a25a658987cd54781db6</anchor>
      <arglist>(const char *op, int args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isOperatorLeftAssoc</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>b39f868c6b28c312a2078700f71a3623</anchor>
      <arglist>(const char *op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doOperator</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>b131df28ddda9cd70f10fab6ffeb2273</anchor>
      <arglist>(OperatorNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doFunction</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>f4fcd16f87fbbe5370e843e704d8e9ad</anchor>
      <arglist>(FunctionNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doParamref</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d56591b774f39e598b569a91711eef21</anchor>
      <arglist>(ParamRefNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doIdent</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>ba31419f2ff1c6dd409fe1fdaf5c3a81</anchor>
      <arglist>(IdentNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doConst</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>e4647c1f427df07e6bc76c7fc8f0a0cb</anchor>
      <arglist>(ConstNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doCplusplus</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>bb9f59dbd0decd80dd38b95411c7b7d3</anchor>
      <arglist>(CplusplusNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doStructDecl</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>0f3c6eb9c12a55f2b5b7eb1527d667ae</anchor>
      <arglist>(StructDeclNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doClassDecl</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>1f16e96d860ba6cf8d59d394bc8ec39b</anchor>
      <arglist>(ClassDeclNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMessageDecl</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>96bb54a78e24e99f5545f8fc79c5a3c5</anchor>
      <arglist>(MessageDeclNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumDecl</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>73387c71485efa453af059bba55511fb</anchor>
      <arglist>(EnumDeclNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnum</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d44928433cebdbcfbb783b4415c468ab</anchor>
      <arglist>(EnumNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumFields</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>204a9c03c9fbb0eb41f26c776811edaf</anchor>
      <arglist>(EnumFieldsNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doEnumField</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>41c9a7da5e589aeaf3ae188cdf49b8ba</anchor>
      <arglist>(EnumFieldNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doMessage</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>b5aa36436be160206452dbab7ef90ca6</anchor>
      <arglist>(MessageNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doClass</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>356f8f60c70e8d8dae169586d4831ec7</anchor>
      <arglist>(ClassNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doStruct</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>3833f296a3300c7ed16b7fc8e9082b0d</anchor>
      <arglist>(StructNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doFields</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>d9bfb203f788f0a8a25d170c6e9bcb02</anchor>
      <arglist>(FieldsNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doField</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>7939736a4721f15ff0b7b579009978f4</anchor>
      <arglist>(FieldNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doProperties</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>61469c926d6a95cc0ed74cb0e22594cd</anchor>
      <arglist>(PropertiesNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doProperty</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>a8ffd3a04b1b23164c0fa0f6abc9d486</anchor>
      <arglist>(PropertyNode *node, const char *indent, bool islast, const char *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>newsyntax</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>f6796aecf82ca5865a218c019ca93b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indentsize</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>4ddf0b1672844c91a4de1e2f7386228e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ostream &amp;</type>
      <name>out</name>
      <anchorfile>classNEDGenerator.html</anchorfile>
      <anchor>3284401cbf2ea60ec20c1c4f9f7b7130</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDImportResolver</name>
    <filename>classNEDImportResolver.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDImportResolver</name>
      <anchorfile>classNEDImportResolver.html</anchorfile>
      <anchor>23d5eb9fabe42bb04facfc33eb7cf09e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDImportResolver</name>
      <anchorfile>classNEDImportResolver.html</anchorfile>
      <anchor>45f0f07e188ca81a3a8ad55c6a592617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NEDElement *</type>
      <name>loadImport</name>
      <anchorfile>classNEDImportResolver.html</anchorfile>
      <anchor>df3d1d92fa709dc11115f7f8326a55c4</anchor>
      <arglist>(const char *import)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDParser</name>
    <filename>classNEDParser.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDParser</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>afbb0ade788416925b3009cc946349da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDParser</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>181f2596ac1ec4bf51016095294898d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParseExpressions</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>1b7a1a174baae51aadfbccc994d0efd2</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStoreSource</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>066ddffe712ca088663aebf8324afbea</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFile</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>85b7fa1ae3bfc639bf9aa252259711db</anchor>
      <arglist>(const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseText</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>ccce04a44c7d3c7610ad93a2fd4c790e</anchor>
      <arglist>(const char *nedtext)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getTree</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>555dfd07a6f7f09c3716cb7a0daacdcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>a6a3d6a2b38534ee4e48ee544f043b1b</anchor>
      <arglist>(const char *msg, int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbg</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>13ec3d8fa8865d0a161484542358a270</anchor>
      <arglist>(YYLTYPE lc, const char *what)</arglist>
    </member>
    <member kind="variable">
      <type>NEDElement *</type>
      <name>tree</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>e71c9dccc7f15ae5b87d3d595b642980</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NEDFileBuffer *</type>
      <name>nedsource</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>940cccca39da306ff822f747fb05d3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>parseexpr</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>5f852105b63abc6ae5622ef2d259546a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>storesrc</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>ec8c4c245c59687ed1e77a738c436552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>filename</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>4fa612b851cf13aae2eef96de8da4571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_errors</name>
      <anchorfile>classNEDParser.html</anchorfile>
      <anchor>f1f36b0308a4136769f153fc30f8933f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSAXHandler</name>
    <filename>classNEDSAXHandler.html</filename>
    <base>SAXHandler</base>
    <member kind="function">
      <type></type>
      <name>NEDSAXHandler</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>250a1be54e157c61c940e93a2c80f1af</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDSAXHandler</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>d90052182bc68a2f5ceab207da598c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NEDElement *</type>
      <name>getTree</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>19a3f5d1f17452556f61833e0b600ed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startElement</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>9850a0a0c0efe737275250d0c7ea0aee</anchor>
      <arglist>(const char *name, const char **atts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endElement</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>8e7d27bbcb616572a9f10c6ab415b9ae</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>characterData</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>017a67d04e793400b3d7b999e07323f1</anchor>
      <arglist>(const char *s, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processingInstruction</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a5d037d0a2068f051d439c05e5d11293</anchor>
      <arglist>(const char *target, const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>comment</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>a3dd05686a99b392c7dab5cb336a373b</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startCdataSection</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>9fb5f9ebbbdec67f4540c1282ee87041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endCdataSection</name>
      <anchorfile>classNEDSAXHandler.html</anchorfile>
      <anchor>31b85283ef5295115cfa35c48bf7da15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSemanticValidator</name>
    <filename>classNEDSemanticValidator.html</filename>
    <base>NEDValidatorBase</base>
    <member kind="function">
      <type></type>
      <name>NEDSemanticValidator</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>1c7e791a8cf98b301500a06b98e87265</anchor>
      <arglist>(bool parsedExpr, NEDSymbolTable *symbtab)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDSemanticValidator</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>dca8e529012b8aa3f4a153c44a9da300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>66ae53020f0c8c3100ff833021d30fe1</anchor>
      <arglist>(NedFilesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>37047d697a7303420e00da36a4309657</anchor>
      <arglist>(NedFileNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>35adb51c24c3c9e0300935b0f0771f87</anchor>
      <arglist>(ImportNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>bd1b242bdc4274fd4ee9d6d53c6a05d1</anchor>
      <arglist>(ImportedFileNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>8cc7a12a37997f9de3d783a2ab7e946e</anchor>
      <arglist>(ChannelNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>c267241b1ffd46a92d7e0857283dc159</anchor>
      <arglist>(ChannelAttrNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>ef6407fc3aeae91b1d632dc7b79820ae</anchor>
      <arglist>(NetworkNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>33a5ea3145009e17de61b719e2750447</anchor>
      <arglist>(SimpleModuleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>6bcf5abbc209f3184d7aac96e15fad48</anchor>
      <arglist>(CompoundModuleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>584c72098b8f4a8db5e8d25bb8bc7576</anchor>
      <arglist>(ParamsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>6f623a1c70e8a0df662c8fbcb6a030cc</anchor>
      <arglist>(ParamNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>deee9b18b3e906d946685d1b50caa2db</anchor>
      <arglist>(GatesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>8e70d1d2a9a37a0271e4d1e0d213420a</anchor>
      <arglist>(GateNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>59e1f8053262a433272a8bd6572e566a</anchor>
      <arglist>(MachinesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>7e55ce33995b09dc55714ae8adfa1170</anchor>
      <arglist>(MachineNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>ee0663ce6d14926351321db427282f6b</anchor>
      <arglist>(SubmodulesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>a3976b633db669e04641c5f61f383f9e</anchor>
      <arglist>(SubmoduleNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>8a69da68a5b2c65de99aece97c1fb827</anchor>
      <arglist>(SubstparamsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>534859421a7ad39554a084ed03fda2e3</anchor>
      <arglist>(SubstparamNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>f044cf584e86602ee57e47a2e8eaf5df</anchor>
      <arglist>(GatesizesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>a03d95ffd781b89efc78e9dd3a4e37ae</anchor>
      <arglist>(GatesizeNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>44c4d427f3005381c5cbc3488b0ceb6b</anchor>
      <arglist>(SubstmachinesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>355151aafd8da164ef347d1f56488313</anchor>
      <arglist>(SubstmachineNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>c9c5352b9c539f8676ffd489f76ca2f2</anchor>
      <arglist>(ConnectionsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>3128b08144a9a37d155b74eadeebc931</anchor>
      <arglist>(ConnectionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>8eec0b342e9fe7fc002792b86a85952e</anchor>
      <arglist>(ConnAttrNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>f69b6ec617ee0226f5a95f83fc7f6036</anchor>
      <arglist>(ForLoopNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>c767f140c9557051da0edb1e9f166eab</anchor>
      <arglist>(LoopVarNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>8a1c6531062dfe306c070790e013ac2c</anchor>
      <arglist>(DisplayStringNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>f1898dbdf5210896d3bf1c8c1131d16d</anchor>
      <arglist>(ExpressionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>75f458fa73a71aafbe404a78987ce918</anchor>
      <arglist>(OperatorNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>bfabce34c3753d61c27811c1aee7f20e</anchor>
      <arglist>(FunctionNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>6785ad4b96cdb5931f8e905cd2a827c5</anchor>
      <arglist>(ParamRefNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>b44abc9b322347e3791716a3af049c4f</anchor>
      <arglist>(IdentNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>e319833fd9b7cbd57d3164024e0b987d</anchor>
      <arglist>(ConstNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>9ba1214c74b179a4404deb8561e9e87e</anchor>
      <arglist>(CplusplusNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>ec0a33471942396407bbab34a71a37ac</anchor>
      <arglist>(StructDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>550e8c6905deb043d5cb39dd70985443</anchor>
      <arglist>(ClassDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>82404c98843cd870fecb18daf0ef1e9f</anchor>
      <arglist>(MessageDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>a661c552f8585e60c70044b08176860c</anchor>
      <arglist>(EnumDeclNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>8944cf7bdff328d25036c810a9e5223e</anchor>
      <arglist>(EnumNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>dd0503978a71674633d5c9f776f885e1</anchor>
      <arglist>(EnumFieldsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>e42083b04b0868e895b0e30bf1921f8b</anchor>
      <arglist>(EnumFieldNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>61e15192d9bf002e3745b0ca48b3a61f</anchor>
      <arglist>(MessageNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>1a7be239925c42247dc1ef1922ef4fab</anchor>
      <arglist>(ClassNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>92b7da0c929bf9d51cbf857563172455</anchor>
      <arglist>(StructNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>afc10977cc96912ae7c503f401231430</anchor>
      <arglist>(FieldsNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>277dc79ac300bfa44af44a764eda08aa</anchor>
      <arglist>(FieldNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>9f039d699cb5a9278f61afe540c320f1</anchor>
      <arglist>(PropertiesNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>8411c1495676cde92d5164763c2fa0ff</anchor>
      <arglist>(PropertyNode *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>f98cb4e080171090ea868475e5c9a80f</anchor>
      <arglist>(UnknownNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NEDElement *</type>
      <name>findChildWithTagAndAttribute</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>f06953a6cfebe26121e8da02275bbef6</anchor>
      <arglist>(NEDElement *node, int tag, const char *attr, const char *value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkGate</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>1795c04dc8d51a3c83f4c41e1112eace</anchor>
      <arglist>(GateNode *gate, bool hasGateIndex, bool isInput, NEDElement *conn, bool isSrcGate)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>validateConnGate</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>674c7077c2889650d25f030b7c005b29</anchor>
      <arglist>(const char *submodName, bool hasSubmodIndex, const char *gateName, bool hasGateIndex, NEDElement *parent, NEDElement *conn, bool isSrc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>parsedExpressions</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>6dd843c9e32e68b5cf81182faae9f086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDSymbolTable *</type>
      <name>symboltable</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>960f0a98c9207cbd92dbe181a09d9d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDElement *</type>
      <name>moduletypedecl</name>
      <anchorfile>classNEDSemanticValidator.html</anchorfile>
      <anchor>6b186f25d4102fb8acd58cac54df4bbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDSymbolTable</name>
    <filename>classNEDSymbolTable.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDSymbolTable</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>daa0f9be8a1a27eb43af8e3b64472162</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NEDSymbolTable</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>835d9cc13d61b18d3c6994411fd7cd62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>707536f5f193a641bc3b5a9e75388306</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getChannelDeclaration</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>56edb13e5ee1247d4ef8aa9c8934128d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getModuleDeclaration</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>0dcf836bac12ff42bb416b719e8dcd5f</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getNetworkDeclaration</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>d1deb60b56b115034fc6f684abaec2a7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getEnumDeclaration</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>6fbd9292c286cef6a29c71090dc05f9d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>NEDElement *</type>
      <name>getClassDeclaration</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>6ab424ad39032449aa2c0e40bc7cf89e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDMap</type>
      <name>channels</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>5e66e5c30dbe332de202664108940b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDMap</type>
      <name>modules</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>9bba291697d3262010c9723c8bce4d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDMap</type>
      <name>networks</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>dd5a058180fb98902b8c7e9295bacb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDMap</type>
      <name>enums</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>8ab747605e572deb7481fbb9d7cbbcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NEDMap</type>
      <name>classes</name>
      <anchorfile>classNEDSymbolTable.html</anchorfile>
      <anchor>36eaae29f63329e5d70f487eb59e4fa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDValidatorBase</name>
    <filename>classNEDValidatorBase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validate</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>d159cbfeb58436b5ebf94eaa0fe552d1</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>abf9af3b5d04d55fce7dc0667f685b5e</anchor>
      <arglist>(NEDElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NEDValidatorBase</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>f2c954022becad27bbecc23f59123cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDValidatorBase</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>88d3f8aacfa86fc6b3c7122e8773a974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>0a77457b4d8e9c9ec028fa86011f2dc1</anchor>
      <arglist>(NedFilesNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>7c7e850ed19348a13ec47f6096e16df4</anchor>
      <arglist>(NedFileNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>aa63f1db4e3e767633f04c4f1003a1d0</anchor>
      <arglist>(ImportNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>c3668f78100cfc5a07a29cf178b4e804</anchor>
      <arglist>(ImportedFileNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>44b02bd406a42838a8011d4c946d98bf</anchor>
      <arglist>(ChannelNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>320d6664f3afaf684f10a0bf7531c0f1</anchor>
      <arglist>(ChannelAttrNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a944e3a3b8c83d5250643a0726a25391</anchor>
      <arglist>(NetworkNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>b4a6a4ceb8f03684c87b3fab71af421e</anchor>
      <arglist>(SimpleModuleNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>7a14ee3af7b80a1e810d6313a2f86d0e</anchor>
      <arglist>(CompoundModuleNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>1b32f7520e0f62b9fbd8ea9dde071d51</anchor>
      <arglist>(ParamsNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a9d4a3436a37a3f8f6e3e8fd7244b9f5</anchor>
      <arglist>(ParamNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>c729f11d186ef1b6edf0e7345efbfa11</anchor>
      <arglist>(GatesNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>36a1847f37c43cd413bd5f9fb1c11ca1</anchor>
      <arglist>(GateNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>51b1d6f74f48e5550ae3045618007588</anchor>
      <arglist>(MachinesNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>e15b1cd7f855a9cbaa76779466a09a4e</anchor>
      <arglist>(MachineNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>d75b05b8190afd7b15c39d088c7787a9</anchor>
      <arglist>(SubmodulesNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>600e6dc620dc3015079b93e5fefa8fb7</anchor>
      <arglist>(SubmoduleNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>027012fd7c51203afc7595f722e8758f</anchor>
      <arglist>(SubstparamsNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>547beed49af86dee3c599397165ec6e6</anchor>
      <arglist>(SubstparamNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>b80bfde7a9f76c43c483ca2368452e13</anchor>
      <arglist>(GatesizesNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>7aecb7d2c77959472d20241bcc29c351</anchor>
      <arglist>(GatesizeNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>d68892b761f2f665d59caca9739ce927</anchor>
      <arglist>(SubstmachinesNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>102f2732152508f4d7c2eaaee1d507bd</anchor>
      <arglist>(SubstmachineNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>30b9446f09450478cb8f02955fe66219</anchor>
      <arglist>(ConnectionsNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>6ae38f5421a7747eb5f51462c0e234e9</anchor>
      <arglist>(ConnectionNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>7f37cc813da3ece0b626463bb2ef85ab</anchor>
      <arglist>(ConnAttrNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>86fc116eff46e460c57b3c585dd0bfc0</anchor>
      <arglist>(ForLoopNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>72057dc96258296ef07fa8a3094db5bf</anchor>
      <arglist>(LoopVarNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>012fda7ffd28c1d48e4251172b6c5b20</anchor>
      <arglist>(DisplayStringNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>c018fcb68dab659757345b976deb525f</anchor>
      <arglist>(ExpressionNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>116bf168f88c93a8b651e2281a73f2ca</anchor>
      <arglist>(OperatorNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>b53165d5bdf5c86d23709285321b765d</anchor>
      <arglist>(FunctionNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>481d7333541054785cf13a443ce758f4</anchor>
      <arglist>(ParamRefNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>49f55742d571cb42e3008bc5398b4336</anchor>
      <arglist>(IdentNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>c477744994f329a4bdbf4e2d94cc5351</anchor>
      <arglist>(ConstNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>e68527824e2e63c6c4f0ef648c7593a9</anchor>
      <arglist>(CplusplusNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>7f0662355e51b7d0ec2e30d3979119f7</anchor>
      <arglist>(StructDeclNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>8107cb27aa94b8a08da9e4ba1fc5c4d2</anchor>
      <arglist>(ClassDeclNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>483f04fa66b43a138d6f671bffc68ba4</anchor>
      <arglist>(MessageDeclNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>a2c1171c893a51272dc1ddc3b22bab40</anchor>
      <arglist>(EnumDeclNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>e6a72c42480a8064674eb946d47966d2</anchor>
      <arglist>(EnumNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>cd4b1c686f98bd1367ca020b9a8ea96e</anchor>
      <arglist>(EnumFieldsNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>8596f59719ac240a9b3f1c8f330e2011</anchor>
      <arglist>(EnumFieldNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>637addedacecab609229fed18ba88e02</anchor>
      <arglist>(MessageNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>04b288256c95c2cadadb10599f45ffc6</anchor>
      <arglist>(ClassNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>9f3900a9900df0ba03338f1c5d6a4722</anchor>
      <arglist>(StructNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>ed33835bfcf2b2359af249b550209f90</anchor>
      <arglist>(FieldsNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>23751ef25cc221e1194a23183ac95eef</anchor>
      <arglist>(FieldNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>d4cb978c2a8b419ad858ea12360c11e4</anchor>
      <arglist>(PropertiesNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>b275548f26ee9cba55f6a6c0ac44bc86</anchor>
      <arglist>(PropertyNode *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validateElement</name>
      <anchorfile>classNEDValidatorBase.html</anchorfile>
      <anchor>90d7511e06a4ac56962ad2f22fbcb70a</anchor>
      <arglist>(UnknownNode *node)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NEDXMLGenerator</name>
    <filename>classNEDXMLGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>NEDXMLGenerator</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>3c9e1b9b1809a790a4cb46d89d8bb1ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NEDXMLGenerator</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>132f8274ecb8bea44f06d068230cf1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSourceLocationAttributes</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>a94ace04d091737cdac8b4fa48245e75</anchor>
      <arglist>(bool srcloc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndentSize</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>6b8c7f44721a8bb8410007e9f0b7dc0f</anchor>
      <arglist>(int indentsize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generate</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>2a63a3324a507f790e7ac2231350c4ce</anchor>
      <arglist>(ostream &amp;out, NEDElement *tree)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>printAttrValue</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>03b161d7a392bb51d642fe6a5d725b32</anchor>
      <arglist>(ostream &amp;out, const char *s)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doGenerate</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>67c464f12d7fd1154494494d95974678</anchor>
      <arglist>(ostream &amp;out, NEDElement *node, int level)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>printsrcloc</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>949164096c0e56528e4cf6f06a0a6c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>indentsize</name>
      <anchorfile>classNEDXMLGenerator.html</anchorfile>
      <anchor>e049ce25a04d230b66879c0ffeb0ad22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NetworkNode</name>
    <filename>classNetworkNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>NetworkNode</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>0303ba00c970e3a6f9163d33ebac10bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NetworkNode</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>aaa6c0bf8f5e3d7158b640c879c39c58</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetworkNode</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>ec251ac692acfed88c7da4a49272aa97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>b2439b73474f1a6659697f0b57163eef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>3e12b83d8f31ddeb8b2b280e395d2d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>f5fd8c1cd2aee5d6e26e9090548444ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>c6703d9381dcfed9a4d50cb8a0480a4b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>dcfbd53b20a7f70dfe1ee94012e3ffa3</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>f5cc1399e7bf5ba813da96f15030ff36</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>dfbc5d01d123e7e012d47b31b773bfaf</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>95a0021597ccc73411a83f589271a260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>5d32c29e64eccaeb98cc3165847d09d3</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTypeName</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>4f25e10d5226db38d2de30a5630ccb25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeName</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>2a3a81b91a6d4899fe9870f424a271b5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>f0fbf3fc5f628194ced0f54d1d1ebe19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>79a912288de4b9472b2e243b1277a0e5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>3ccf8685fdc62e9f75b39ac6d9345c46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>57d0489e51496ad3cb37e2f23ceafebe</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>3e044292841509a6fc25b0653905d49b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>cba2f02b3306cf221ad4f63f19ee7800</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>d28311c2894fcd2f208f293faf46c5a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>31a6e977feb09d96c3db4ac435110cd2</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NetworkNode *</type>
      <name>getNextNetworkNodeSibling</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>4557ba63aa57613e49da70d3f669d33a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstmachinesNode *</type>
      <name>getFirstSubstmachinesChild</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>9c9fad8b72378abd1503daf2655b382f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstparamsNode *</type>
      <name>getFirstSubstparamsChild</name>
      <anchorfile>classNetworkNode.html</anchorfile>
      <anchor>170f7f6cc682b0a6b6f72e63db07cfc9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OperatorNode</name>
    <filename>classOperatorNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>OperatorNode</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>2ccf34e91e01c10ff3a116145825d61d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OperatorNode</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>7fcd1bc7db4259a650984ab02a06d2a7</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OperatorNode</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>2e92f11178338dd6a50fcc424c7819a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>98e9eadcdaad76b959c6197a9877874f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>fdbea4a7f87149e2a69491d42eb45434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>5889f26887ca010b241cdb260ced3656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>524befd4e7bcb1502e7d86e77bfee9b8</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>6de790aceb1a35a309c68972748f7849</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>5f7cc3649ddc3d39a53acc0757cc2322</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>09ec0e67a51e8200dfd5c5d4adb20caf</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>798cf9dbb8800bd23e1fbfa87cf83a0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>60e6177e378de6c805293974200ec943</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorNode *</type>
      <name>getNextOperatorNodeSibling</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>e540f1f48968e72904e306e05498e0df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OperatorNode *</type>
      <name>getFirstOperatorChild</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>a28d8a89a2580cc9776d00e344319dd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FunctionNode *</type>
      <name>getFirstFunctionChild</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>1beea3dbb085ccd43651a62f0c16fc0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamRefNode *</type>
      <name>getFirstParamRefChild</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>90bca306c23f5ed3f0ac55713e281a4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IdentNode *</type>
      <name>getFirstIdentChild</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>9c15b785f074859d23122c6420d0686b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstNode *</type>
      <name>getFirstConstChild</name>
      <anchorfile>classOperatorNode.html</anchorfile>
      <anchor>7dfccccdd0d117569e696244e9af7e7e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParamNode</name>
    <filename>classParamNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ParamNode</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>e4a1ef06b5174ec3f8928bac25fee340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParamNode</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>e2298e78ca796e434daff7c0eee95be4</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParamNode</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>4607c6f63889bf334fb2541c003b7f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>2fda9819a701a1bf013241d05f2625b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>eade5b2b7ef2d5ab53cd948d40d0094b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>05a3138ffa59e68796b1ef6c564a7880</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>5f6d20f8f8f4beb0b6e8dacf4d6ce8b6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>cc4d7d31475e1033c40fcba94ff55240</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>7c413154cd0aab47283f998ee322c2ca</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>b6377e21d86b7f9cd6a6d8e5f0176512</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>8f32fc25396441f5b06da6b6ce156e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>741b2db782d62c3648d10a918fb82f23</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDataType</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>6d154010a04c2268613076803c89d432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataType</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>62b06932436a6cede7ef60b94d799e74</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>210f0802b2611cf71e526c63ea2c704f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>2afcb6e23d77cef777e599e8377ae587</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>9a8981c31a96a53859104e50766544fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>81625c38528c93ca604320d8839fcbf6</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamNode *</type>
      <name>getNextParamNodeSibling</name>
      <anchorfile>classParamNode.html</anchorfile>
      <anchor>6582d843cada9725594cafa44b1bf192</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParamRefNode</name>
    <filename>classParamRefNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ParamRefNode</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>7d9390dc3158ff8e5002b145c9a833ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParamRefNode</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>c7e2b2199ca3b0105bf3b5f7899cb5cb</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParamRefNode</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>29c411907f1225c871b95b2e71f6a58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>753acbfb693954b0e2f86ee1be2546bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>ebdea42e1895067bf4a5cb4e406d165e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>bf03bdabfedc2714494f9de13438c3ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>b334f20e9cba8e6c30c336870672c3ea</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>062c1ef7e528c24346e6a84be304d308</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>9b3adbd764d5d950224753492393431a</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>c6819f3a12c005c086a64dcff537e01b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getModule</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>d53fe2873f8931f478759208093ed022</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModule</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>f59edd3f071876d3bae58cf1e175e8d2</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getModuleIndex</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>6a32cb99f1adb9618bca2fb83d00fd28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModuleIndex</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>b8e1159b374eab0fb796ee39f3a2a5f1</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamName</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>6326f0e76f0c9921909a4877d5516295</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParamName</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>588982ba57e5833c23a02d3b2036f0a0</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getParamIndex</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>8b5e0712fa665c4c389b00e74844fb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParamIndex</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>4c03b0e3aa5b3fb338bbdda58352af96</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsRef</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>bb4f2948d6c80473f089e1fbbda6ec7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsRef</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>37a27306d2f37d3218f954201a832a89</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsAncestor</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>d50963781c74543a46f8cb24912cbc3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsAncestor</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>54378ac1d0e568e7613325f0da51388f</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamRefNode *</type>
      <name>getNextParamRefNodeSibling</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>d24bea705464dd5fe569aff1362c4f5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classParamRefNode.html</anchorfile>
      <anchor>035179d5956a39caf214b3b4a6d94357</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParamsNode</name>
    <filename>classParamsNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>ParamsNode</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>d487df710c38a89ccb419ab9eb9baf87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParamsNode</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>b86ca364e3bdbc9e21bd744375e9c1a5</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParamsNode</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>7ece2b87d58d90cc854fda4885df9883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>f248001921218124205b4c56a8977561</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>520dc834e9f9bf71e29eb5aa133e0be7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>170ed76d8a02ff7e5edde837d6bd5aed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>c10ff3d3518b7936e5be4d0ac76e1330</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>46a0f9686583df727f8bdf1894b5d6df</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>c17851f178f0348b99abbba92f4b98ce</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>332cc672d02872f1427d31f8585d30b5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>4e49e2f140df4156bb18596eb559dd20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>76e827f9c83f1b1cfdde00830ad73f1f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>5290155396117bef7d817fbe5e5f0405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>faace501bb03d366d761f6fd8b030dea</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamsNode *</type>
      <name>getNextParamsNodeSibling</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>e3810b6d5ef13f9745a32382012c0720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamNode *</type>
      <name>getFirstParamChild</name>
      <anchorfile>classParamsNode.html</anchorfile>
      <anchor>6bd7c5a307c995051cefe53d57226b01</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertiesNode</name>
    <filename>classPropertiesNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PropertiesNode</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>f57fcc765321f771326960cf81add87d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertiesNode</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>d5093fcdc774efb6749092d9f35b2dfb</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertiesNode</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>4feac63ed1748c14adfe32f4285d536f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>d26b4854e52a6845c8b4313a2819507a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>c2d2b8da10d4f2b2a37b1e577f62e258</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>a51ecf1b472dc11fd2f8c9b052ac1a2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>cbc18462e93d646fc62c6d4f5f9928bf</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>4d8f60875d8a026452fb90a90fa30450</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>1875a1e9c7c66d3162ac7183f32e413c</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>e2e4992609e8a0482b66e17b1016aa3b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>e014f96d720ea0f704d34967fc5eb889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>679b40edd375e10aca2ea22889742f2c</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>9cd8df2ebb9c92de6d81bf4bff311d7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>338b3c08bdb840d731194fad6ee98fa4</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertiesNode *</type>
      <name>getNextPropertiesNodeSibling</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>a81a33091fbaff103924c9eac228fbe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyNode *</type>
      <name>getFirstPropertyChild</name>
      <anchorfile>classPropertiesNode.html</anchorfile>
      <anchor>677c34e0df22ae69c74880b770004f67</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PropertyNode</name>
    <filename>classPropertyNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>PropertyNode</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>6df5c7a7b2999b3e0eb6bf5e51d868c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyNode</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>dba3cedf76676103467b885a33f6845f</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PropertyNode</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>0a5ab9382e369d9238a9259fdfde600b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>98d8af3e2a8c0bd0b36be2a94c3174e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>cf4ff87c5a43f4d5a86011dc0d77ded4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>edda576c5f5d562e72d2e756c347fbd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>d599bf45227e07b82080aca1f86fdf91</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>d6bd6a40807cec215e943f31c30ec412</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>094de9953d22334688d0593d27c2a241</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>d4f7bb63dd47976fea418a58e744ef3b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>75b00105e9e3e329798b122d4279ec3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>e8295d5998d8846e159fc9974d498bbe</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>b04346edbeaf3f4ade1012af05f39165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>acc7a027b3b80484cb669c4d5150a56e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>e8d828a7202e3e0d85b88b30734fc9cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>2ef3f0279f1b3e489089c1d945e538c0</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>f27102110572edae01a2d5a630377515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>2a7c89fc97560a39513e9ab037dec2d9</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertyNode *</type>
      <name>getNextPropertyNodeSibling</name>
      <anchorfile>classPropertyNode.html</anchorfile>
      <anchor>e3d86b0d710c8de7884cc9fc70ff72f9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAXHandler</name>
    <filename>classSAXHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>SAXHandler</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>1282d36aa710d93233c52fc9b9578b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SAXHandler</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>645b5725153be482a7d725edad425d93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startElement</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>b130250f24c8336d99c73faa0536d870</anchor>
      <arglist>(const char *name, const char **atts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endElement</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>8f8709aebd98cf4ab774a970556bd1b7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>characterData</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>4850e2ab904afd9c75da115695da308b</anchor>
      <arglist>(const char *s, int len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processingInstruction</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>e7203bffe34434c5268659ffc246755d</anchor>
      <arglist>(const char *target, const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>comment</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>cb58142ba91f363b57c5f5961a1749a0</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startCdataSection</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>ff24ab745be5a16115c8c18618bae1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endCdataSection</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>7135466a24f17f70afd594ec8190969e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setParser</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a7bd34501ba4b132fb56b97b424dbb43</anchor>
      <arglist>(SAXParser *p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SAXParser *</type>
      <name>parser</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>a1b1911c5945bac3a0e1fa53751f35da</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SAXParser</name>
      <anchorfile>classSAXHandler.html</anchorfile>
      <anchor>3cd7ce0b7fec1cd7725288547858a2e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAXParser</name>
    <filename>classSAXParser.html</filename>
    <member kind="function">
      <type></type>
      <name>SAXParser</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>8cce482dd9ff6639a920e9aa90b380f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandler</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>e8646bd422d1454d05f12460df3d5949</anchor>
      <arglist>(SAXHandler *sh)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>886feeb69a71e9ad5927234b9cbd3f0c</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentLineNumber</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>406904e1d9d497ac841a571d21da5bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getErrorMessage</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>30362ffe35699781863d3108d88fadc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>errortext</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>d635202ad19eb7245ea37d139fe2c2a8</anchor>
      <arglist>[512]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SAXHandler *</type>
      <name>saxhandler</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>fc77ad48e3ba22d454919908134abe8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>currentparser</name>
      <anchorfile>classSAXParser.html</anchorfile>
      <anchor>40297d8bec9a1951056b775c3927da0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimpleModuleNode</name>
    <filename>classSimpleModuleNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SimpleModuleNode</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>8e1429c7da4e17dbf20500fa9ae3696e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleModuleNode</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>51131afe0e9aa0d42525f576624d6d96</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleModuleNode</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>063e95e53e704769344e36a8e72bafe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>2e7b8e912c44e3f8608731c8146647e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>1de815a9753af66ef8b72471fbd91c3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>8b7da46309946d0ac528db6440edff02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>5e748088b78a1820a568b8da265d8cf6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>933f4296e5051acc3187480703cb4038</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>c7ffba1c52c47ce1f3e37035252d38be</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>83cf8e3cf71724827b1aa0d2eaee87e1</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>8baf1792f071345e79a9613b9cf758fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>87317e666d474333d5481519f79c3e63</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>3b587f23dd0cf1d8ed317add3e23ec58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>77779786ab7eaf030ab779c943ea8224</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>2bac0fb878aace424412455fc25fd4c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>7c450f068487a8c56924e77f88a4d6d6</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>5dc10f741e96db09c5c1505b397da1bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>271339925dc79f854fe0d51c94c82934</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>39fc4ca8ed60803d5a3e056ef68d9cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>4a79e956141c88ffdcd769111fe2a883</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimpleModuleNode *</type>
      <name>getNextSimpleModuleNodeSibling</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>39c0c934bbaa9425705c5a59a8ee2851</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MachinesNode *</type>
      <name>getFirstMachinesChild</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>4a3943abaae24c25449158fec1dead8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParamsNode *</type>
      <name>getFirstParamsChild</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>668c097fb85218186907dd010a93c2c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesNode *</type>
      <name>getFirstGatesChild</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>ff72da811073004f41aafc3b3870b00a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisplayStringNode *</type>
      <name>getFirstDisplayStringChild</name>
      <anchorfile>classSimpleModuleNode.html</anchorfile>
      <anchor>4827e2aaf2f9e0a8e8ddc3d71dd57dfa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StructDeclNode</name>
    <filename>classStructDeclNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>StructDeclNode</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>6e1d5851b1706a136858d08b16e0474c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StructDeclNode</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>8484550fd232269ddbed86fcc7e0cd96</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StructDeclNode</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>d841736b3755551e9ffbe314e2210c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>bfa9b5e48e97015300bc40477b491380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>81da14644fcac22f2934207d66f8f553</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>2190af13386994a4ad4dee4b9c00c2ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>88d55ee152a78c769a9d8787587f6b16</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>16b1a9f0de98c9a14f3b20309862548a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>8542e1cdb793937d0af90f549ecbb421</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>0a282e1bd1f8501e39561daec954ddef</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>16beb17da5093ee2c2377f48d1deed7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>2239dfdb829cb352ee2f40727804a7e2</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>28d4500d0532734dc4d0314537c4c526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>5f1a099dbec3c24bab5e827f82a432de</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>f8a488f5f0cd18a9f6f3644f3016ddbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>d8fe540fe4f01d35549795dd65b0d19a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>a031450376675fd10e6ee985aba8af49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>ed9240516f609f645d4058b77f59c43e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructDeclNode *</type>
      <name>getNextStructDeclNodeSibling</name>
      <anchorfile>classStructDeclNode.html</anchorfile>
      <anchor>dad41fbdb6a2e0d5f32a9214ccf264b2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StructNode</name>
    <filename>classStructNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>StructNode</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>2fefab63ae4598dbd153d6caf9626662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StructNode</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>4c69865acda57f89f075fb367d70a7fb</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StructNode</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>ecbc7a5ec0e9ba08fd04b5c2030828b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>221ba5d3dbc348a3f0d0fd86e2733759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>e2f7abf43827390b184f09a6c01371b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>75a2f5aa866bbe59ef115827eab8af11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>b27abeb243809b15962744d06da42a54</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>9fd14cab8cd909014f78828911efb7d6</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>2e95e7ef3cd8c6f4e6d05ce011a5b641</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>03ddf5c35ba96970b251f22a66957a2a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>f4414aef4b35e26e2e8c3ba206f31829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>3de8803f0226ffdbccc321ebda78eba5</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getExtendsName</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>7c093645fa4fc73a90b9099d21540d0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExtendsName</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>015e69f20567d0dd8257a8f15388095a</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSourceCode</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>959b00c7ad64a65c5280ea673654967e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceCode</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>1733bf73b25ccc1764540c2c5dd2422e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>c7926da8787d982778ae6edd2aac93ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>a1bb7607a9b4d9ad5c664006da704873</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>e47c947075884c8f8a7e59607e4253ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>08ca27db4ef016fcb17705bf490cd998</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTrailingComment</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>bc5f8aded2f160c6dd1f99b37fb4630a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrailingComment</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>314663d1a7e6e1cb6f91fe0829add4ad</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual StructNode *</type>
      <name>getNextStructNodeSibling</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>aecd77ac489a8e1a3160b0b629143a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PropertiesNode *</type>
      <name>getFirstPropertiesChild</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>7e4512a48262540431b37823a4d24b72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FieldsNode *</type>
      <name>getFirstFieldsChild</name>
      <anchorfile>classStructNode.html</anchorfile>
      <anchor>f2c46e39096c2c6961ba50ff6b26a1b3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubmoduleNode</name>
    <filename>classSubmoduleNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubmoduleNode</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>aa92d23e4b4d528355d848bf72048f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubmoduleNode</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>a96cd7fbee220cba803262eed467d4d3</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubmoduleNode</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>9c55d4ec54d8462ebf0342732cb3589c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>97056b07e268700cf2dfd62d8171de96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>207346e2a17b043dec29431c3c69942b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>fd56a456e26db1fbabe7ee4ff08903cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>fdc45e596fb19974fab34e89710feaf2</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>1a0e4214184f4966fc37e0de1f31ddc5</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>d9890a03abaa3c9a6967e3d118e75a35</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>d66f18c16a5d69ece5ecfa1297e46c92</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>3b30bfa9e43c7e6adfe5b5f34781eb16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>988f93c8c5c961b5393d1c8665358548</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTypeName</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>ba9089ead61f5a961477816c1ff5dfaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeName</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>9413026d430a53daba5de8b03bd4f60d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getLikeParam</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>b5d8d159c7bb8a18f827b5b60c657a61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLikeParam</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>8000e2785b0635352a6bb832a2a25c1d</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getVectorSize</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>4e4107bd1f19afa79fb61cd620984359</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVectorSize</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>661c6897792b5cd93cdf058376807dae</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>064c7c48565d09cc68022264fc46037f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>00776e54fd440839fe26eec05363ffba</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>5e29dd76cc5f94b08c91194071748c7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>3794ebdcdf718d02912c9dc20d7442c7</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmoduleNode *</type>
      <name>getNextSubmoduleNodeSibling</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>5c19e0d7e35d2e22d1423dc4ed375332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>ab2efdf8fef9495410a31dd3703081ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstmachinesNode *</type>
      <name>getFirstSubstmachinesChild</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>f24eaef8ad582a6bc120598c71d93591</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstparamsNode *</type>
      <name>getFirstSubstparamsChild</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>e41bb394a0b5abfd0ce6b13f53cff956</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GatesizesNode *</type>
      <name>getFirstGatesizesChild</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>5a8efbb826d2c05c7441102ee5236dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisplayStringNode *</type>
      <name>getFirstDisplayStringChild</name>
      <anchorfile>classSubmoduleNode.html</anchorfile>
      <anchor>2ffeced40a851a1a389bbb1ac38fe5de</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubmodulesNode</name>
    <filename>classSubmodulesNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubmodulesNode</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>7bf5a79cbbea92492fcb8bf006739f3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubmodulesNode</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>1311e081c864cb919c8b914a1589467c</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubmodulesNode</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>962a054548e7e2ab9ecb1b2c35ba9edb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>c03187bc3a5cec3c4493eec25d2e3980</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>2dedd120a03116471dcce9ec2e7ab1be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>52c7629da610491d85d3aa87328b44ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>509d22454b143932942e2be1410dfa9b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>bb4abee640c37771274ededce917ef7f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>e1f37d6fe5257e78a7f5e3e5b1f11165</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>8c9c391fa4ea4acdfe91206b8a1b7536</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>13f4559a7e465838e8e4206d8af910d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>e60d6a02416f71b9731f792d55796627</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>5efc24d71ca1a4fd38b9d8df2bbbaeae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>255078cff0ca3e4e8d4766ee660c0de9</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmodulesNode *</type>
      <name>getNextSubmodulesNodeSibling</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>e0beeaadbed7f8afdaae6331f989756b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubmoduleNode *</type>
      <name>getFirstSubmoduleChild</name>
      <anchorfile>classSubmodulesNode.html</anchorfile>
      <anchor>9f41da8b3dadaa1012468d88084d75ce</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubstmachineNode</name>
    <filename>classSubstmachineNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubstmachineNode</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>00e1de8b429f8df4c5ebc954dc18efd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstmachineNode</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>48d900c02dc3dd179d2dae79a24a7bad</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubstmachineNode</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>438719f4d85377743810b09f782f699d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>c68b274c53d9de1595afafc50096774a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>1deac80dcb6c8299c274f67968a198c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>ae1f898d23031f55e04641768e266158</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>31c01b3e46e9510168a16229e3158e5e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>14a6e43a8aed2ce0fa8834f7b26c0a44</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>ab62140b3aa685236f29a22042eb815a</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>5be1265b903831e2afdef626efdaea24</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>0a776ff56d5e53111bca0b49e0b26b05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>d9a3a851ebfb2437773034aa2e693f14</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>ea795d479a781f828bd695b5305ed29e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>3fefd13e35d9aea538f9b9c3a69e5043</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>d992b4e493cae336e64ab77ae238827d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>56fae522a9cfeb11cb6cb10c48af000e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstmachineNode *</type>
      <name>getNextSubstmachineNodeSibling</name>
      <anchorfile>classSubstmachineNode.html</anchorfile>
      <anchor>46b9c90a112da2fea2ebe7a1721011f0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubstmachinesNode</name>
    <filename>classSubstmachinesNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubstmachinesNode</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>c1ed43cb4762bdf236f85ea024bbd14a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstmachinesNode</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>88cfcd65765d50d74f1168c4cc69451e</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubstmachinesNode</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>921bee9a21663803fce9d9642569fe21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>93c03a749bcbed191f1b3b9ca5cb9394</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>1ff8933bd093f789e2c60fd0205f4219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>54edfe1ab230d79f0c34954baf745804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>acc0cfa334f5d0cf2446dc6e3e44ba47</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>e98753099d22f04314df33bf0011687d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>dc860bd8d7708a2e158dc61f072791cc</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>a2661c73fe1f4e4063cfa1f30b2f5f0b</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCondition</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>8328a2d904c48a968b5f7521d06aea9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCondition</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>5480095de338cf7200e7df98cf064899</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>55866cf0a33fce2ea686395f7a6fe1e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>87a1b50aa0f4fab12341748e27f7489e</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>a70290146508be0b856e33f9661ee11c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>d0a2b1e4f9b717cb05e1425471aa1c2f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstmachinesNode *</type>
      <name>getNextSubstmachinesNodeSibling</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>dbd0a0030eb4de1f084f84d4943c6af4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>b7a52f825c937f864553f372e37eb6d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstmachineNode *</type>
      <name>getFirstSubstmachineChild</name>
      <anchorfile>classSubstmachinesNode.html</anchorfile>
      <anchor>cdc2b5cbe59f07a4ba3d7ad5c320ace7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubstparamNode</name>
    <filename>classSubstparamNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubstparamNode</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>29d7340795888ed87b287a1598552940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstparamNode</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>960794669ae972ece9b5baaa32e826db</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubstparamNode</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>888dc5fedb75a13000f8bc7506e8514d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>bb865b1de9cb941419e32ca3150e950e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>502e04b735f0c770c97caaa2e422024e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>14ded181a8d022596dead23207ecdf3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>42a2e878a744b8ad5a0675a7a69f1576</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>eabc9ed61a17d95d96d6fc78f97e7bb3</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>9999b68b223691e73a122d3a7cc63176</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>0251606445547c70dfc561c278cf4e81</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>f03dff3c6ae7e03bcfe20b153a01ba2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>0b69461cafc2901bdf19137614b7fcf8</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getValue</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>0e52ce9823d48bec60e13527879bbe46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>2adfe5d0fa9189b4665b5ffc36d6d423</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>ec18c42aeddf6960351e027a28d7a9b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>dc745df46093131d4cc786e26ba69894</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>f74e8fedbc82299180b6264091214cfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>348120ae25c22493e4d261408aade98f</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstparamNode *</type>
      <name>getNextSubstparamNodeSibling</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>423c2443c80855cbe0570505ec62581e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classSubstparamNode.html</anchorfile>
      <anchor>7fab3387a4379e507936bb363f73e9bb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubstparamsNode</name>
    <filename>classSubstparamsNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>SubstparamsNode</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>325b879fcb48a6b031a17c24134f1cb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubstparamsNode</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>fc947795758b7b7d9484779b948c7d33</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubstparamsNode</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>4456a3ab4d444485a1f13f84403e5f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>9ca9637e9e3b40f970de6905d749fd3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>254a089eeddf1b16c406738d4dc4f309</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>ebd15992537ef5b8af6e30c06dd8d7ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>66776aa6c6c85009eaeb15e5df9c693a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>d508a84a076f4f2fdd885ef7c940c436</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>7a5a78e5428a343a27b67752eab60c96</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>838ff58170dc8dd75d8e2cd3b5d5ac6c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCondition</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>841c5b0e24adf3bcbe52faf92d446aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCondition</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>ca671fda328553023a42d29a9ce37788</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBannerComment</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>781b2f683d4670bdb0dc291f1757512c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBannerComment</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>995e3f2850d459782e72b34e8fbdf235</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRightComment</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>c5ebb9b3f23cbf28ff53ffb7383e505d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRightComment</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>5c99f64d803a6ec2065fbe4ac1a33407</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstparamsNode *</type>
      <name>getNextSubstparamsNodeSibling</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>4920501d025178b4b0b4c3cbd29e9c0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ExpressionNode *</type>
      <name>getFirstExpressionChild</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>e4c3ee9521483a305795af239210e653</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SubstparamNode *</type>
      <name>getFirstSubstparamChild</name>
      <anchorfile>classSubstparamsNode.html</anchorfile>
      <anchor>2fd75e9980474b02ed77554b5bbc34d3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UnknownNode</name>
    <filename>classUnknownNode.html</filename>
    <base>NEDElement</base>
    <member kind="function">
      <type></type>
      <name>UnknownNode</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>d86cdf7c941b69cb1f662b9e58675d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnknownNode</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>07e84fb272203b5fda5ec91974ee4ee2</anchor>
      <arglist>(NEDElement *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnknownNode</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>38ccca37788da0493b9cb61b40c8f034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>e801e61c561e0882dba09e9d496499b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getTagCode</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>72e249aca7386ac0d88897d0ae89fa54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumAttributes</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>609800daccf8d5bb0be86930928057fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeName</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>aebc7d6a986fc30b07840972f7946bda</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>00f13ab1f856d018e344c6329fc01374</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAttribute</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>56e1b6f3d0eb893e0d7a2136ce534d86</anchor>
      <arglist>(int k, const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttributeDefault</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>6b738df81b1a2d8ba435c8bbcf7a9700</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getElement</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>b55cb4b993fbc28cbb2a455ec674015f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>27ba9e3ac3dbce3de8644fc59fd31c67</anchor>
      <arglist>(const char *val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual UnknownNode *</type>
      <name>getNextUnknownNodeSibling</name>
      <anchorfile>classUnknownNode.html</anchorfile>
      <anchor>92afe5802e58f54d376a5b8007339dda</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>YYLTYPE</name>
    <filename>structYYLTYPE.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>first_line</name>
      <anchorfile>structYYLTYPE.html</anchorfile>
      <anchor>50ad3435eaea74bcab6f1ae5fbaefd89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_column</name>
      <anchorfile>structYYLTYPE.html</anchorfile>
      <anchor>3a556533babab1b9066fa9bdbb809210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_line</name>
      <anchorfile>structYYLTYPE.html</anchorfile>
      <anchor>3075f2bc3448df5d2a9f16d22bff2cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_column</name>
      <anchorfile>structYYLTYPE.html</anchorfile>
      <anchor>cf87f8c98686f286eaf700c4b62157b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Overview</name>
    <title>Overview</title>
    <filename>group__Overview.html</filename>
  </compound>
  <compound kind="group">
    <name>DTD</name>
    <title>DTD</title>
    <filename>group__DTD.html</filename>
  </compound>
  <compound kind="group">
    <name>Data</name>
    <title>Data classes</title>
    <filename>group__Data.html</filename>
    <class kind="class">NEDElementUserData</class>
    <class kind="class">NEDElement</class>
    <class kind="class">NedFilesNode</class>
    <class kind="class">NedFileNode</class>
    <class kind="class">ImportNode</class>
    <class kind="class">ImportedFileNode</class>
    <class kind="class">ChannelNode</class>
    <class kind="class">ChannelAttrNode</class>
    <class kind="class">NetworkNode</class>
    <class kind="class">SimpleModuleNode</class>
    <class kind="class">CompoundModuleNode</class>
    <class kind="class">ParamsNode</class>
    <class kind="class">ParamNode</class>
    <class kind="class">GatesNode</class>
    <class kind="class">GateNode</class>
    <class kind="class">MachinesNode</class>
    <class kind="class">MachineNode</class>
    <class kind="class">SubmodulesNode</class>
    <class kind="class">SubmoduleNode</class>
    <class kind="class">SubstparamsNode</class>
    <class kind="class">SubstparamNode</class>
    <class kind="class">GatesizesNode</class>
    <class kind="class">GatesizeNode</class>
    <class kind="class">SubstmachinesNode</class>
    <class kind="class">SubstmachineNode</class>
    <class kind="class">ConnectionsNode</class>
    <class kind="class">ConnectionNode</class>
    <class kind="class">ConnAttrNode</class>
    <class kind="class">ForLoopNode</class>
    <class kind="class">LoopVarNode</class>
    <class kind="class">DisplayStringNode</class>
    <class kind="class">ExpressionNode</class>
    <class kind="class">OperatorNode</class>
    <class kind="class">FunctionNode</class>
    <class kind="class">ParamRefNode</class>
    <class kind="class">IdentNode</class>
    <class kind="class">ConstNode</class>
    <class kind="class">CplusplusNode</class>
    <class kind="class">StructDeclNode</class>
    <class kind="class">ClassDeclNode</class>
    <class kind="class">MessageDeclNode</class>
    <class kind="class">EnumDeclNode</class>
    <class kind="class">EnumNode</class>
    <class kind="class">EnumFieldsNode</class>
    <class kind="class">EnumFieldNode</class>
    <class kind="class">MessageNode</class>
    <class kind="class">ClassNode</class>
    <class kind="class">StructNode</class>
    <class kind="class">FieldsNode</class>
    <class kind="class">FieldNode</class>
    <class kind="class">PropertiesNode</class>
    <class kind="class">PropertyNode</class>
    <class kind="class">UnknownNode</class>
    <class kind="class">NEDElementFactory</class>
    <member kind="enumeration">
      <name>NEDElementCode</name>
      <anchor>gd34cccc2e635c441d3d7721c4c15b68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NED_FILES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c40452314d3bc7d1a1bfa6f196918c8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NED_FILE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c47a8aaf0e028d7dc9ef6e84686599af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IMPORT</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cc0d4ebcbad2ba024f9aa2a3459f44d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IMPORTED_FILE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c38a5a5a98cf19fd097d31cb47e9d0b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68ca5d202195e740e8da772a6e109f70d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CHANNEL_ATTR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68ccc3d27c4c2b26c0f226ad3b1f9cb1f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_NETWORK</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c49baab0207d82003b5c546df08cfff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SIMPLE_MODULE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c24308b4324187beac81e6920d09d31fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_COMPOUND_MODULE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c2f52963e4eb44e8aff5e3dd3707766cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAMS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c8e4d8efeb89eb96e153d1b3bf7a36c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAM</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cb54508e039787e6f0398f384430dc08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c28227565427af0c833a5bee75ef5d644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c12bb7f956774de679e41dc75e4d540df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MACHINES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6545e7fea53cd501a81633689e23918a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MACHINE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c5de77cb733d4db9819e209acaf54a0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c15ca0c9a2e2b66624bb6775019c7324b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBMODULE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c737cb9551d7e0f206a95594b9b4e51ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTPARAMS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6906efec943ce12a80e90df82705530d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTPARAM</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6ac40ee44a991d13f4ffe57ceb59a4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATESIZES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cf2c0ca9888fba66d86d3eec2b644f843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_GATESIZE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c9e292eabd0c7f9c5bc9b63b63cacb736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTMACHINES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cffabf6d8f6808275f3e4502abe54337f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_SUBSTMACHINE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c75566a1e1eebed34f6a79f4ad2bffd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTIONS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c91040a6621bfc3dd6d6a1d49251b97c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONNECTION</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c5a4b3bae4f85c56101b612c59d62a7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONN_ATTR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6ee06f720a279cd76969f34a560f87f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FOR_LOOP</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cdb97756772cbe0a4d32c44c201b85da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_LOOP_VAR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c290776706ad7d0dfddc572f4b1700649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_DISPLAY_STRING</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cd6dc3e3e90f73030accdbe3e2f211308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_EXPRESSION</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c734f944e9aff83bbc91a0955b1897e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_OPERATOR</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cf527a555c91f595c4d8a87031e9a6576</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FUNCTION</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c67c8ebfe2cdba16710b755fabd957b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PARAM_REF</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c18e3798f77d56b7a3f9bf00271eedc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_IDENT</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c7af94c708923ef46195eb3f40a09e03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CONST</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c04dfd92c2418b5a0adc97610178515b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CPLUSPLUS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c580edeb93570c921dd22b3aefab4cd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cd70d3465bf52a059f19f75b77882008c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c8b9f948df5d9953eda28c4b599225041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c02f84cd957697624b7c37400ba00dc6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_DECL</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cabeb508e148820edf30d11819ac5df76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c2fe992d1dde8aeabc148e00701be03a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELDS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c8e14996df6f58540dbd1627654aef3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_ENUM_FIELD</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c50b0047b9bb5b428cc5cad20b99bc099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_MESSAGE</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c66d2f84f9f6159edd967a14f7c27b4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_CLASS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c9e9eee707e30a18866aa3827671383ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_STRUCT</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c6671693f35af380e17da8157cb10f11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FIELDS</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c014fa7e5ded799707be0c6896c8a06c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_FIELD</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68cefe111337aad0cad283a278378f7f34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTIES</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68ca264dd186ed27b290290fc41c478fdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_PROPERTY</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c366803979f7e863f328a2fc32d282e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NED_UNKNOWN</name>
      <anchor>ggd34cccc2e635c441d3d7721c4c15b68c2dc1887831f5e3d5c57cd37acdccfda9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>NEDParser</name>
    <title>NED Parsing</title>
    <filename>group__NEDParser.html</filename>
    <class kind="class">NEDFileBuffer</class>
    <class kind="class">NEDParser</class>
  </compound>
  <compound kind="group">
    <name>XMLParser</name>
    <title>XML Parsing</title>
    <filename>group__XMLParser.html</filename>
    <class kind="class">NEDSAXHandler</class>
    <class kind="class">SAXHandler</class>
    <class kind="class">SAXParser</class>
    <member kind="function">
      <type>NEDElement *</type>
      <name>parseXML</name>
      <anchorfile>group__XMLParser.html</anchorfile>
      <anchor>g98ac72a45c3b7b83d91fe18fa7b04c3d</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>XMLGenerator</name>
    <title>Generating XML</title>
    <filename>group__XMLGenerator.html</filename>
    <class kind="class">NEDXMLGenerator</class>
    <member kind="function">
      <type>void</type>
      <name>generateXML</name>
      <anchorfile>group__XMLGenerator.html</anchorfile>
      <anchor>g3f1e4ce5192fbdcf68539752e2e9a8a0</anchor>
      <arglist>(ostream &amp;out, NEDElement *tree, bool srcloc, int indentsize=4)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Validation</name>
    <title>Validation</title>
    <filename>group__Validation.html</filename>
    <class kind="class">NEDBasicValidator</class>
    <class kind="class">NEDDTDValidator</class>
    <class kind="class">NEDSemanticValidator</class>
    <class kind="class">NEDValidatorBase</class>
  </compound>
  <compound kind="group">
    <name>NEDCompiler</name>
    <title>Controlling the compilation process</title>
    <filename>group__NEDCompiler.html</filename>
    <class kind="class">NEDFileCache</class>
    <class kind="class">NEDSymbolTable</class>
    <class kind="class">NEDImportResolver</class>
    <class kind="class">NEDClassicImportResolver</class>
    <class kind="class">NEDCompiler</class>
  </compound>
  <compound kind="group">
    <name>NEDGenerator</name>
    <title>Generating NED</title>
    <filename>group__NEDGenerator.html</filename>
    <class kind="class">NEDGenerator</class>
    <member kind="function">
      <type>void</type>
      <name>generateNed</name>
      <anchorfile>group__NEDGenerator.html</anchorfile>
      <anchor>gd11995032b7d55fc99feb4f79d6731f4</anchor>
      <arglist>(ostream &amp;out, NEDElement *node, bool newsyntax)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>CppGenerator</name>
    <title>Generating C++ code</title>
    <filename>group__CppGenerator.html</filename>
    <class kind="class">CppExpressionGenerator</class>
    <class kind="class">NEDCppGenerator</class>
    <member kind="function">
      <type>void</type>
      <name>generateCpp</name>
      <anchorfile>group__CppGenerator.html</anchorfile>
      <anchor>g055fc998e7f139730a27a70977f51329</anchor>
      <arglist>(ostream &amp;out, ostream &amp;outh, NEDElement *node, NEDSymbolTable *symtab)</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/home/andras/omnetpp-3.4/src/nedxml/</name>
    <path>/home/andras/omnetpp-3.4/src/nedxml/</path>
    <filename>dir_11c9a6df2ba7ba0244ee96a6a72ff975.html</filename>
    <file>cppexprgenerator.h</file>
    <file>cppgenerator.h</file>
    <file>index.h</file>
    <file>ned.tab.h</file>
    <file>nedbasicvalidator.h</file>
    <file>nedcompiler.h</file>
    <file>neddtdvalidator.h</file>
    <file>nedelement.h</file>
    <file>nedelements.h</file>
    <file>nederror.h</file>
    <file>nedfilebuffer.h</file>
    <file>nedgenerator.h</file>
    <file>nedgrammar.h</file>
    <file>nedparser.h</file>
    <file>nedsaxhandler.h</file>
    <file>nedsemanticvalidator.h</file>
    <file>nedutil.h</file>
    <file>nedvalidator.h</file>
    <file>nedxmlparser.h</file>
    <file>saxparser.h</file>
    <file>xmlgenerator.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/andras/omnetpp-3.4/src/</name>
    <path>/home/andras/omnetpp-3.4/src/</path>
    <filename>dir_d67b2ef61e2f70cbb4e574b4a776889d.html</filename>
    <dir>/home/andras/omnetpp-3.4/src/nedxml/</dir>
  </compound>
</tagfile>
