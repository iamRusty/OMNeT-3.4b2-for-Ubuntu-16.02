<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ API Reference</title>
    <filename>main</filename>
  </compound>
  <compound kind="class">
    <name>cAccuracyDetection</name>
    <filename>classcAccuracyDetection.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cAccuracyDetection</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>c6c59e3eb10442eb82afc7dd8949d3f2</anchor>
      <arglist>(const cAccuracyDetection &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cAccuracyDetection</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>08d13cf5c55e2bb68bb4f21274ef4221</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cAccuracyDetection</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>ea718007d5e2325d300036f98c82a88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cAccuracyDetection &amp;</type>
      <name>operator=</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>e859aec6030b706bd1fceee736bb3eca</anchor>
      <arglist>(const cAccuracyDetection &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>06d50270a12209ca48323a75825a0b70</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>b7d031cf1c04ee877f4014b81ae04a52</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>d2f68b089ba71ba578c00546bec2f25b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>291c771d2a5fd2b6918dcf6705253b2d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>a7bc70060277d3c348a1e76222d2de4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>694da093ea1215b67bf027513dc72a5b</anchor>
      <arglist>(PostADFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>fd2cde7c7ce00acbe683fd805b07ac10</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>hostObject</name>
      <anchorfile>classcAccuracyDetection.html</anchorfile>
      <anchor>2a7df60c0a3cb1288eb080e7b1190b04</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cADByStddev</name>
    <filename>classcADByStddev.html</filename>
    <base>cAccuracyDetection</base>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>66057c6f94a417f86866cf51f7e22407</anchor>
      <arglist>(const cADByStddev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cADByStddev</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>ac25617c036a43222f32a8e4bbc81745</anchor>
      <arglist>(const char *name=NULL, double acc=0.01, int reps=3, PostADFunc f=NULL, void *p=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cADByStddev</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>6871f7339506d46ffd9131b09451c177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cADByStddev &amp;</type>
      <name>operator=</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>0190a11d040c977e816371cda0ea7fba</anchor>
      <arglist>(const cADByStddev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>4b4b5cff948b79d18cfd7a53b3b213d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>eee4598422a057145d904ea635c05411</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>41885082850a4255b510ecd6c404c90c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>f463cd52c305ae2b1bf147d204364e2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>7b6cd45ce363fde938e0d4ace1862034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>7e7d8d2cfccf862f471b4e39da1603ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classcADByStddev.html</anchorfile>
      <anchor>251e85e8e71c9f239d9490282c7d3911</anchor>
      <arglist>(double acc=0.1, int reps=3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cArray</name>
    <filename>classcArray.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>078d434d737766f6bcfd4529b0b735fc</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>1287c4aa38be1b766b65d679f5de95ce</anchor>
      <arglist>(const char *name=NULL, int siz=0, int dt=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cArray</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>40e99652feeb3a18780aa06adf96bd59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>bd9d65c58f29846fe5c470b4d4b388a1</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>020aa6f0bd531dc1be60a2e8ac74a3a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>03e55dabc34f509861b7dac14755a4b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>d8eccb83d1edc5763a6f371e3d8b1f7d</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>7b0d1f0f187f396b3d7477d19bcdfe5a</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>ccdbabe3ffa41f0c11e66f6f89fac164</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>items</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>fe75aabf649fef414ff61474d1030459</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>0da117c972273d5e9b3704a0b113a27d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>c7d7369e49551ecdd74d8d1e528d106c</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAt</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>b6c7b0685080875ad7094058c40625da</anchor>
      <arglist>(int m, cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>a25f57d777fee370642449a929837c83</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>cef2706d235a0865acaa995fafdb62da</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>84bd671ec352e5e08924b115e1f7105c</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>de73d719c14680d9299ca4d6c97624d8</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>dac7bf33c49a77cf2c136525de900314</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>980e44e2497636ff6c5b74499173c15a</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>get</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>23243b109e240f371da297c12594bc84</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>012611712633929717e33af71409f23c</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>e1469ca2af6cbd6fcee6d3da9fb1d865</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>26422b40fdeb8a2415b463701ab71ee4</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>e69cacba1f3e05f33b696e05049e0690</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exist</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>d8780c71b4aabe1563d31a13095f10c5</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exist</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>fdb684281aea1f3e6829a4c6c234659e</anchor>
      <arglist>(const char *objname) const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>remove</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>4897e70a8589f1c5af2b67ba5552ffba</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>remove</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>9a187290628f1768c7f0777ed4493a13</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>remove</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>acbef0803684810bce105d8371116b42</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeOwnership</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>0cd5136c9c9afb168d61ac901d849467</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takeOwnership</name>
      <anchorfile>classcArray.html</anchorfile>
      <anchor>1b163529470133ef84a7842f8318896a</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">cArray::Iterator</class>
  </compound>
  <compound kind="class">
    <name>cArray::Iterator</name>
    <filename>classcArray_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>0eaf2d60635efa66a3724661c861e03c</anchor>
      <arglist>(const cArray &amp;a, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>ffc40a3067ecd2a7a8079e452b88d4e1</anchor>
      <arglist>(const cArray &amp;a, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator()</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>506dc6412417257f44535bd1d35f18b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>11641867f05e8a9d8b2cd84e94a6723f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator++</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>2025c0bdacc5125fb39dfaa8559cf1d7</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator--</name>
      <anchorfile>classcArray_1_1Iterator.html</anchorfile>
      <anchor>161e950a195d65ab9db9045a5e6523d7</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cBag</name>
    <filename>classcBag.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cBag</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>fd93342d5c02afc057717e8375863cf6</anchor>
      <arglist>(const cBag &amp;bag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBag</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>0137ad059a8f4212c51df388ccedb445</anchor>
      <arglist>(const char *name=NULL, int esiz=4, int siz=0, int delt=5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cBag</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>ba869c6e79dcbd6642261c201ccf4abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cBag &amp;</type>
      <name>operator=</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>d9715a95efef1224567d28d057768896</anchor>
      <arglist>(const cBag &amp;bag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>92a11e3cfe9f20e49d85b2a8fc1511db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>5a3635995652d2453bee32c0d48fcf86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>ad235992d35915dbed60aff55a4720d7</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>07cf3129f62b067b9a5158a56c039bf1</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>35d713ffba1f33c65602b8d4b9fffb63</anchor>
      <arglist>(int esiz, int siz, int delt=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>819fd0766c11e79a57b47ae237a8bacb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>items</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>bb320d52de9dff8282c41ddb9f720be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>7f0acc9afd9155479517006190a2240b</anchor>
      <arglist>(void *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAt</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>842e328898c7caa0a949e4d9e98348b8</anchor>
      <arglist>(int m, void *obj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>19950b3a62248d74a3c8b74d776ce64a</anchor>
      <arglist>(void *obj) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>dee351568fbe8c1d9ad51c88ba91d1d5</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>get</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>482727e807d8c6ef98978aa2c3b26f3d</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator[]</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>3c4ecd02a13133eee1196905a9d837d3</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>operator[]</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>7da5b7dcfa944189c45038dbbdad9c72</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsed</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>ec40d0cca0ad1f9eb90b2ee7fdd944f6</anchor>
      <arglist>(int m) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>remove</name>
      <anchorfile>classcBag.html</anchorfile>
      <anchor>752cad0c19f95fe82df3b5eafe843128</anchor>
      <arglist>(int m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cBasicChannel</name>
    <filename>classcBasicChannel.html</filename>
    <base>cChannel</base>
    <member kind="function">
      <type></type>
      <name>cBasicChannel</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>424e1c7ea5be386a2b00b02c228f4b3e</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBasicChannel</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>7fa67c619bec70952a646cd8e8d4efd3</anchor>
      <arglist>(const cBasicChannel &amp;ch)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cBasicChannel</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>f80918d710148a2ef432359423b6deda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cBasicChannel &amp;</type>
      <name>operator=</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>fac4196f2e7e5da9ed3af9b465acea0f</anchor>
      <arglist>(const cBasicChannel &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>c2667adcf24102ed00fc601d03f5f102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>0c251321d8106aaeb674e6670bbbca27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>1698534f92c80722a8a1891b349b9e41</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>d70de738717302a805a3c62f49c2df84</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>d4f01007910695f5b63e594d1787d95d</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>4533bad2fda8cac609d8c6f87b87f81b</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>4d834473d8612aa4e868aa17e9a969c7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setError</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>d8759ebec1b7c0314cc0b383bf09105b</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>34ea69e132f05cb6dade16b7506b2f2a</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>dd4672cec682988f6d88f32dc1bce259</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>d9a7ee0339691d138264c99211670042</anchor>
      <arglist>(cPar *p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setError</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>b74e2a9e0f7b00db3c776a4ea3849330</anchor>
      <arglist>(cPar *p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>2cbedc3cc1b99d266831096ecd36b292</anchor>
      <arglist>(cPar *p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>delay</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>1d37621dff259dda3b435ad69466b468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>4b03fd7b833497120aaed0a79f30be78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>datarate</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>460d952bc71e26cb93efe1b57fdbe915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>disabled</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>e190150419dc15227e6cfd7cc6488653</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>244037a2fe07df88bab6cd39c740a077</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>75c8da738dd64785f1e4c1b64b2fa1b0</anchor>
      <arglist>(cPar *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>af67d5524a37e6f5067009d87fbbca04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>transmissionFinishes</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>50d14f80af0df275b3f91693a26858bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchorfile>classcBasicChannel.html</anchorfile>
      <anchor>76c6c3a8b8d0ef4088c5e135a878c0c8</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cChannel</name>
    <filename>classcChannel.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cChannel</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>9609b916583a155e5c1fae543c0871ba</anchor>
      <arglist>(const cChannel &amp;ch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannel</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>906411e789290f09f9dc7281b268d8bd</anchor>
      <arglist>(const char *name=NULL, cChannelType *l=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cChannel</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>30288a446d117ab8c6555f76386062ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cChannel &amp;</type>
      <name>operator=</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>59aa10cf75fc8e140f9fbdb7c75a5a45</anchor>
      <arglist>(const cChannel &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>601259e8414f5b7b6abd5c23c001b993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>3ac54f458ff7328d99d4d16969d2b79b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>bceb8a93cd18daade33738507c57b427</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>71f2177d21507909d536cec8a3ac9c4b</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>89ff429469c7e43b0b915d12072318af</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>a5497557a69bbd584404b90b82f5cd6f</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>fromGate</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>77fcf834cc7dccd1a348a1e2e40a7d6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cChannelType *</type>
      <name>channelType</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>f91461b22a7c64f047d9ee0f39a1fd5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>params</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>d87ff200e8f8dec316a3145a9356563f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>99482536c3d58d7b3ecc4dbc8fc44273</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>5b47540dec1252250b232e7f8b639d4a</anchor>
      <arglist>(cPar *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>f81d269c1b60a6dd124638662844c34e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>fffe0f8e45dc1578ee2df493ea0846cf</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>886bb2f945ec58560affebe4c174f5f7</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPar</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>3d41646ed8c11e90d817d23ac9b8daba</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray &amp;</type>
      <name>parList</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>04f5856879e2621678cc41bebed3253c</anchor>
      <arglist>() _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>db2c867187588b0e2eda0081dcb9bd3e</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cGate</name>
      <anchorfile>classcChannel.html</anchorfile>
      <anchor>d65e9293fb55c44ed30eef8b1f27df95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cChannelType</name>
    <filename>classcChannelType.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cChannelType</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>23602a4e69877c9ce4a93c1ee2f41b9d</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cChannelType</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>55fa0c299aa9fb4e9baf192c50555676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cChannelType &amp;</type>
      <name>operator=</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>87492c717a88ed3201a9338bd7ab11ed</anchor>
      <arglist>(const cChannelType &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cChannel *</type>
      <name>create</name>
      <anchorfile>classcChannelType.html</anchorfile>
      <anchor>7812350b88b420ec4b8081bd83d61ed9</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cClassDescriptor</name>
    <filename>classcClassDescriptor.html</filename>
    <base>cObject</base>
    <member kind="enumvalue">
      <name>FD_ISARRAY</name>
      <anchor>768c60fc4e2ecf4ec60b88c180ba64bbb5d9931ef565f2292b1ff42939a29e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOMPOUND</name>
      <anchor>768c60fc4e2ecf4ec60b88c180ba64bbbbf8b7dd92cf7178b320acda764249d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISPOINTER</name>
      <anchor>768c60fc4e2ecf4ec60b88c180ba64bbf82468f1ec3c7ba5b5812a81a1d0c083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCPOLYMORPHIC</name>
      <anchor>768c60fc4e2ecf4ec60b88c180ba64bb72fa31e05dcf85b7908e72df276930e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOBJECT</name>
      <anchor>768c60fc4e2ecf4ec60b88c180ba64bbba72fec7c3dfd36fe0030011963784ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISEDITABLE</name>
      <anchor>768c60fc4e2ecf4ec60b88c180ba64bbcecf6c17866919f371e8635b2fedda84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFieldDeclaredOn</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>c82e667f4f85c6bc3ec31e4a350167e5</anchor>
      <arglist>(void *object, int field)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldTypeString</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>a2cf9c93cf4f9e8b48f9149ad10c42e8</anchor>
      <arglist>(void *object, int field)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldProperty</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>c380974fa4b49f727a44ae64658e3fb5</anchor>
      <arglist>(void *object, int field, const char *propertyname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArraySize</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>01dadcd2e6305878aec14777e357603f</anchor>
      <arglist>(void *object, int field)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getFieldAsString</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>0327998dd839c7bb82d4b015c4b31ef2</anchor>
      <arglist>(void *object, int field, int i, char *buf, int bufsize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setFieldAsString</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>96d3ca73d42fe6579daf9d64e05bfcc8</anchor>
      <arglist>(void *object, int field, int i, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldStructName</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>46eb4bc75db06a40ffe71999ea6a49c8</anchor>
      <arglist>(void *object, int field)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getFieldStructPointer</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>cd3ecd86f805ec78d41e73f64ae69e3c</anchor>
      <arglist>(void *object, int field, int i)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cClassDescriptor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>000f3c3e3926ae9baebe4325d97e30eb</anchor>
      <arglist>(const char *classname, const char *_baseclassname=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cClassDescriptor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>5c5c8f319eb6eee0587a002e85fc1fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesSupport</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>f93fc9204c6978c4f068b8cfc4587315</anchor>
      <arglist>(cPolymorphic *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cClassDescriptor *</type>
      <name>getBaseClassDescriptor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>40cb8a60aac76880450cc836e1f5d0dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInheritanceChainLength</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>7f0ecb969be38f1474bd90fa086a5b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>98bceae504188f36af7a5e88f71257d2</anchor>
      <arglist>(const char *propertyname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldCount</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>f9012ef4017128562f08c8b21139af9a</anchor>
      <arglist>(void *object)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldName</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>7b3c76e17df7596b1e63e79417fc74b0</anchor>
      <arglist>(void *object, int field)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getFieldTypeFlags</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>2c15c518c89cee8f4150208a7d607ac1</anchor>
      <arglist>(void *object, int field)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>3c06f83880165ad6cb6c66646acc0ba9</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classcClassDescriptor.html</anchorfile>
      <anchor>0db91e1dfec335ad32b2df6b35d83e55</anchor>
      <arglist>(cPolymorphic *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cClassRegister</name>
    <filename>classcClassRegister.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cClassRegister</name>
      <anchorfile>classcClassRegister.html</anchorfile>
      <anchor>22e27d13780d2c0e13b1e77315c9e576</anchor>
      <arglist>(const cClassRegister &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cClassRegister</name>
      <anchorfile>classcClassRegister.html</anchorfile>
      <anchor>dbbdea65cc553410dd2190bf1af504a2</anchor>
      <arglist>(const char *name, cPolymorphic *(*f)())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cClassRegister</name>
      <anchorfile>classcClassRegister.html</anchorfile>
      <anchor>71e4e3ffc41e58b3e2e34f56f3ea50fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cClassRegister &amp;</type>
      <name>operator=</name>
      <anchorfile>classcClassRegister.html</anchorfile>
      <anchor>72443e87d6cb10c1a02ff8785114fbc6</anchor>
      <arglist>(const cClassRegister &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcClassRegister.html</anchorfile>
      <anchor>9dccbe0e20c2306fe7934496a97eff90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>createOne</name>
      <anchorfile>classcClassRegister.html</anchorfile>
      <anchor>f8f7b88cd60b43f3dc98bb646b900dc0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cCommBuffer</name>
    <filename>classcCommBuffer.html</filename>
    <base>cPolymorphic</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCommBuffer</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>8e793c4954115c07f01c42446de1e8b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBufferEmpty</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>057a7b883cc3e07790e86c35dab896c2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assertBufferEmpty</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>993c4142fca24716900be92a6e9d272b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>09289f7ea3174f8447471765a8bae560</anchor>
      <arglist>(char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>b33eaec50cfef2233642f4cd0f0c3fc9</anchor>
      <arglist>(unsigned char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>81e83264abe0ceda1d636ee8df8db8f6</anchor>
      <arglist>(bool d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>402a6b5630d3ce66fe15652c15eb4207</anchor>
      <arglist>(short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>70a6f6e3d5c4dd7fb914647d758dddbd</anchor>
      <arglist>(unsigned short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a17b0788bca7b334278bb0430dfcd395</anchor>
      <arglist>(int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a873a7dbcff44b3bb802897921c3e0dd</anchor>
      <arglist>(unsigned int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>3ccb86d5f784c50521f7c460355d836a</anchor>
      <arglist>(long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>cdd7a43cb47fb1094e072a76d0c7dbd8</anchor>
      <arglist>(unsigned long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>fe0d9e877f4cd0af21e4b8c11fb270ac</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>80f54834dd92ce1c60eea9a619d09e30</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a216607fd97a1d5dc72a1c6a0935ccfb</anchor>
      <arglist>(long double d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>92dd7dbb63a5de7918b3db8b275f4c03</anchor>
      <arglist>(char *d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>e78b2047b7ae6672331a2f790bd63cd0</anchor>
      <arglist>(const char *d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>cdff58e6ca4d65e45453482ee722c822</anchor>
      <arglist>(opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>8fbb88c238195212e1110e179c78ebf4</anchor>
      <arglist>(const char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>97015a6b346a6c9a4d171fab5787739c</anchor>
      <arglist>(unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>c6c258a2a32a0152fec04b072a882222</anchor>
      <arglist>(bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>6ae129dc2c403a7f00d8be9378eba979</anchor>
      <arglist>(short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>e5d031c11ef1d0ac3e6020619d8e5b05</anchor>
      <arglist>(unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>8ed5a3651b72a023e600bf4b5df7c593</anchor>
      <arglist>(int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>65d548da4602be309b9481645e8d8ced</anchor>
      <arglist>(unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>72db1f19b4475020d52db705b55d5be9</anchor>
      <arglist>(long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>45dbcb0058044783cabfed22863effe7</anchor>
      <arglist>(unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>21048d1ecc6a00c6a9c6d8b9a09e9a0a</anchor>
      <arglist>(float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>d0b00920fa3a1dc81c63ae49947820f3</anchor>
      <arglist>(double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>6c7c8d200fd42d2ffc43627d2c7497cb</anchor>
      <arglist>(long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a483c3adb9e1e9d6fc4e9f285ac78ae1</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>d3d17504cc11001856c8d6f75a1be9d0</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>0d9b867f0ce0a103f47d37b032d7f5e5</anchor>
      <arglist>(opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>6712584846ab9474aa3bb38e35cfee1b</anchor>
      <arglist>(char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>74fb639e76e12f4711fff916b4bc3251</anchor>
      <arglist>(unsigned char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a6fd22c18c89e1ba1896eb479895f9aa</anchor>
      <arglist>(bool &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>d85235962ba6419acaf0ead672ed4824</anchor>
      <arglist>(short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>f78414f06d7b6950107e46adc8a97686</anchor>
      <arglist>(unsigned short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>51cb0651c232fc189f69474b676824e9</anchor>
      <arglist>(int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>336d7c8278a538816748f07104a28630</anchor>
      <arglist>(unsigned int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>dcadb244d1419cd1c804511364f59707</anchor>
      <arglist>(long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>dcce9be1fe21d6ca016eda81d9070c66</anchor>
      <arglist>(unsigned long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a959e1c99e43bfd6eac97cc82d602367</anchor>
      <arglist>(float &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ea983064b25b4e54c2ee9e316d5a8635</anchor>
      <arglist>(double &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>2dc63cce40e8a756f4800f25a9c2a088</anchor>
      <arglist>(long double &amp;d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>2563f82c41090acc404bc024746a2b3e</anchor>
      <arglist>(char *&amp;d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>db91ee368e9f4c2ba5a333257f525159</anchor>
      <arglist>(const char *&amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>e1e115a6762ca12da483855fa87f69d6</anchor>
      <arglist>(opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>bf9eefe83ac50108bfc81260b26ec64c</anchor>
      <arglist>(char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>c96cb7c4ddf43c3fec284e7e1ca82b30</anchor>
      <arglist>(unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>8ea21c2674898af1ca4fc0d0d2d5c626</anchor>
      <arglist>(bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>bd0aa47b37173838520340dc45e4bffe</anchor>
      <arglist>(short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>5d4e22da07e23cf6fb6b7c9cb74797f1</anchor>
      <arglist>(unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>6ffde14580afcb745061597ef6700506</anchor>
      <arglist>(int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>fcac39d17151b03f2e1d02b2ae0e6db3</anchor>
      <arglist>(unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>21936c6ffee505c7b13eaf8868665f27</anchor>
      <arglist>(long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>a427dfd10d4575d97117c9b4bbbd08a6</anchor>
      <arglist>(unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>3e4eac0675eaa8d4c348e94b86e63a2c</anchor>
      <arglist>(float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>1eae90c52c114d17f6237bc75f9e76bd</anchor>
      <arglist>(double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>e754cf1bfb1fc9935be3c8538246bb09</anchor>
      <arglist>(long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>0cb862a9375f908e74dbc7dc2f5c7b92</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>40dc0160bbe735eacb82901df2f510bd</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>43ca6c966b570eca4501b15c716af992</anchor>
      <arglist>(opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packFlag</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>ff9ccb39b4e929b8a72b4c90fdc6545f</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlag</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>948809da19742357fe3f8b75f72d4d08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>210a14f8be02202445a66e79142f3f8c</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classcCommBuffer.html</anchorfile>
      <anchor>1883240b619e95811217c7d1550596b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cCompoundModule</name>
    <filename>classcCompoundModule.html</filename>
    <base>cModule</base>
    <member kind="function">
      <type></type>
      <name>cCompoundModule</name>
      <anchorfile>classcCompoundModule.html</anchorfile>
      <anchor>b1288156b019a524620206606c6ed89e</anchor>
      <arglist>(const cCompoundModule &amp;mod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cCompoundModule</name>
      <anchorfile>classcCompoundModule.html</anchorfile>
      <anchor>42be33b98f1a9e94a923e4d419f99ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCompoundModule</name>
      <anchorfile>classcCompoundModule.html</anchorfile>
      <anchor>604f4a4f55d183cba695ce654fba602c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cCompoundModule &amp;</type>
      <name>operator=</name>
      <anchorfile>classcCompoundModule.html</anchorfile>
      <anchor>6ecb5b013238acdd51f3041815a83e85</anchor>
      <arglist>(const cCompoundModule &amp;mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcCompoundModule.html</anchorfile>
      <anchor>57ffe9e3b9affc64f67a5d0ae15d3973</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcCompoundModule.html</anchorfile>
      <anchor>2821fd6ca69b1fce169b0763e82a7823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classcCompoundModule.html</anchorfile>
      <anchor>ff87cb12d49f7498446545a4ee79085b</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cConfiguration</name>
    <filename>classcConfiguration.html</filename>
    <base>cPolymorphic</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cConfiguration</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>bfd9664684e5fe6cad62a313b50d9da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>057dbbc0078113de4fbf5d916c8b402b</anchor>
      <arglist>(cConfiguration *conf)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>fileName</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>19cfba801c05b5c85e7aa2256817c8e4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSections</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>dd8282f1530466d807c525865e784350</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getSectionName</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>6f0796992d5524ea303dd2e4c4ccb94f</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>exists</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>856ddf140c72c6de46f9328d23d36676</anchor>
      <arglist>(const char *section, const char *key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>exists2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>6b0c838be81fa0b7adb9817eb6f67b37</anchor>
      <arglist>(const char *section1, const char *section2, const char *key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>notFound</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>d15665b1b1e16901d68f4e6376a5ffa7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>343040c1281ec3287ffdde7f7c78e8db</anchor>
      <arglist>(const char *section, const char *key, bool defaultvalue=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>122706ef6d1e5cd7d642cfa976b5b549</anchor>
      <arglist>(const char *section, const char *key, long defaultvalue=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>960238a8e572bb2442ba2b2f9762a940</anchor>
      <arglist>(const char *section, const char *key, double defaultvalue=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAsTime</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>16a57f71cb0f1f34a31af21db92ed1b7</anchor>
      <arglist>(const char *sect, const char *key, double defaultvalue=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>48623ec6391e62e12069ccf5530ebdec</anchor>
      <arglist>(const char *section, const char *key, const char *defaultvalue=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>3a4816de2e6ac897e2101c80df5e1c2c</anchor>
      <arglist>(const char *section, const char *key, const char *defaultvalue=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getAsFilenames</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>baab39b904d7f4ac8f7bd32795c2c714</anchor>
      <arglist>(const char *section, const char *key, const char *defaultvalue=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>942a6a32abcc08fda8b61bd75706fd7f</anchor>
      <arglist>(const char *section, const char *key, const char *defaultvalue=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getBaseDirectoryFor</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>272daf0f123e7bd6c01c543553562fcb</anchor>
      <arglist>(const char *section, const char *key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getLocation</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>5ddde8f93529038b5abd793b9977eab6</anchor>
      <arglist>(const char *section, const char *key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getAsBool2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>9e6ab90145a48c0a8a219fd404fe6fa6</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, bool defaultvalue=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>getAsInt2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>b3477fcc1d7b00ebce04fdda73695432</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, long defaultvalue=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAsDouble2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>4e7372d48dbcc81c36030a2793570b13</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, double defaultvalue=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAsTime2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>2ef0a2ce2768f776088b6688f3f28a75</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, double defaultvalue=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>10810aee7b59352a7df083d3e9490cef</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, const char *defaultvalue=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getAsFilename2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>e7976f8cd6c12e5abef73d6d10895ad9</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, const char *defaultvalue=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getAsFilenames2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>8a3eb1619037b7d3c8f142527863bb8f</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, const char *defaultvalue=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsCustom2</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>d2b8783f7a256252fefc9c2722d059e6</anchor>
      <arglist>(const char *section1, const char *section2, const char *key, const char *defaultvalue=&quot;&quot;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getBaseDirectoryFor</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>669061aa2a3929c9a8aa142059453a57</anchor>
      <arglist>(const char *section1, const char *section2, const char *key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getLocation</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>4412058cc1168624a4b3f1ef134171ec</anchor>
      <arglist>(const char *section1, const char *section2, const char *key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; opp_string &gt;</type>
      <name>getEntriesWithPrefix</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>76a75b55500aced87b9f23afdf4aff46</anchor>
      <arglist>(const char *section, const char *keypart1, const char *keypart2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; opp_string &gt;</type>
      <name>getEntriesWithPrefix</name>
      <anchorfile>classcConfiguration.html</anchorfile>
      <anchor>e47b40cba0956929f4a8c300bd3be6e9</anchor>
      <arglist>(const char *section1, const char *section2, const char *keypart1, const char *keypart2)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cContextSwitcher</name>
    <filename>classcContextSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextSwitcher</name>
      <anchorfile>classcContextSwitcher.html</anchorfile>
      <anchor>6c0444ac07124efa6f6572e1fb5045c1</anchor>
      <arglist>(cModule *thisptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextSwitcher</name>
      <anchorfile>classcContextSwitcher.html</anchorfile>
      <anchor>5056b1a3508c8b80b63a8d2169066568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>methodCall</name>
      <anchorfile>classcContextSwitcher.html</anchorfile>
      <anchor>54754cd90d099f5e76d3a77e751e10e1</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cContextTypeSwitcher</name>
    <filename>classcContextTypeSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextTypeSwitcher</name>
      <anchorfile>classcContextTypeSwitcher.html</anchorfile>
      <anchor>c134ab2fefffbcf7f7bdf88741dabd96</anchor>
      <arglist>(int ctxtype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextTypeSwitcher</name>
      <anchorfile>classcContextTypeSwitcher.html</anchorfile>
      <anchor>fcfb9d1c7e70d0a167b9555ee715d2a2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cCoroutine</name>
    <filename>classcCoroutine.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>setup</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>a28d47689379f53aada0130ddf07bb4a</anchor>
      <arglist>(CoroutineFnp fnp, void *arg, unsigned stack_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cCoroutine</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>03978af1f95966a51d3a09a1446fd863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCoroutine</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>e66f141d8beb3fffb207dba791d02c0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stackOverflow</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>6f3835cda82e18f034e76eb31a90853e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>stackSize</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>0c0465fde77dae768c3b5a0af2a89f0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>stackUsage</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>b83fed2d21145cd6e05b0580ba079571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>8362bdfd9b2744f9737b0a2a8b869b22</anchor>
      <arglist>(unsigned total_stack, unsigned main_stack)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchTo</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>51453982a5de8246527593b960dbcb6c</anchor>
      <arglist>(cCoroutine *cor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchToMain</name>
      <anchorfile>classcCoroutine.html</anchorfile>
      <anchor>9499edcba31be69a71dbe33ea22815c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDefaultList</name>
    <filename>classcDefaultList.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cDefaultList</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>20adc16c7450dd8dc1deb437003d52ad</anchor>
      <arglist>(const cDefaultList &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDefaultList</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>9b6484c0b4e09bb6fe0978d66e9838da</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDefaultList</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>77554c9768e0e7ebb0766de8a9e65b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDefaultList &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>406496f748e341aa968ff43b1569bd36</anchor>
      <arglist>(const cDefaultList &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>521a5772e196a99150f4ae701b73e60e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>88ea93e266fb1385e5018e9ad5576872</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>5e4a58b629cfdd7e238fb87615c0bd06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>7b8e50f507960865cd7abc7a53d5eaec</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>a580748df206fa5a5f848242a6723834</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>26bd35d65a54ace8514e67497c3088a0</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defaultListItems</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>8a1d842a90d507d29243d5e6a5ceb1dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>defaultListGet</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>90488043ea9aa197ecd8c8ea913ce3f4</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>defaultListContains</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>883031cdbd6edd2c01ac1e90d0f0ccc7</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>take</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>d0bc74ebf2b6c711541da1a31973e5c9</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>drop</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>3c70ae0cca246e659c1e33774dcedef0</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cObject</name>
      <anchorfile>classcDefaultList.html</anchorfile>
      <anchor>2f1e5d0432ca9dc331362760416b2b20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDensityEstBase</name>
    <filename>classcDensityEstBase.html</filename>
    <base>cStdDev</base>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>dff5f1a0a40b23b8a2ee3b59e720823d</anchor>
      <arglist>(const cDensityEstBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDensityEstBase</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>3ef33e6159be8e30b787cc4ddfa5c3df</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDensityEstBase</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>7008aa31dccc7341dab9ad85b7b47706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDensityEstBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>f7e026238ca85b60f1b7f35a0b6e5949</anchor>
      <arglist>(const cDensityEstBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>4ad20050d422758c01875c3592d51dc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>ed4ae4a166855e55720cbf402a064cf0</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>3a40b1a08ddaad6118b841ba051f7712</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>c8b8a15c4c2c2f0117992c28019623d5</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>09271f6e748cfaa4f42a9a0f4e55b735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>f6232fde1963e8f2f26eddf70a32980d</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>eb768aa8f647a94acb2eb889a9c52825</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>8eb5cea3b1bcda29076171b07a9325b9</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>9b70b4e03a497f5833ac90d3a4a988ef</anchor>
      <arglist>(int num_firstvals=100, double range_ext_fact=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>cb10286bad9070f82d7a746800359fff</anchor>
      <arglist>(double upper, int num_firstvals=100, double range_ext_fact=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>f3f765ec36b3e8f9ae66303be25e297c</anchor>
      <arglist>(double lower, int num_firstvals=100, double range_ext_fact=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumFirstVals</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>3084764bfa576847fc5b976bfaad8ef5</anchor>
      <arglist>(int num_firstvals)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>transformed</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>4ad370972a383be1afb240f268ea5471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>05869a439ce93498ff14c6b727280f60</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>cells</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>b6dfaf838158392d552fa9352fc5c481</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>basepoint</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>35e9eb3c1286e1fe4c43a7d21ec4cde9</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>cell</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>048963884be7ddfd449ad228c7c0eece</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cellPDF</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>1d7dea45341090181f290df8141ad39a</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>underflowCell</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>fbf786feeb3c00556814220e9eb3c1c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>overflowCell</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>0c986fbd7d7d25bc2cf04c63d29c41b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cell</type>
      <name>cellInfo</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>c4a4d8537e46ed94a7a6c36d5c674d5f</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>pdf</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>947c564f97b62143b40afdd1b9f02438</anchor>
      <arglist>(double x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>cdf</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>a542cb815b04fe6b70f38f29e24afd51</anchor>
      <arglist>(double x) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>812b20ff3cebc9bffe7e5e3c43b17606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcDensityEstBase.html</anchorfile>
      <anchor>9c177e716bf1fb28958796fda66e6434</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <class kind="struct">cDensityEstBase::Cell</class>
  </compound>
  <compound kind="struct">
    <name>cDensityEstBase::Cell</name>
    <filename>structcDensityEstBase_1_1Cell.html</filename>
  </compound>
  <compound kind="class">
    <name>cDisplayString</name>
    <filename>classcDisplayString.html</filename>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>94dc5c44e19695015b7bf5e555fdd91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>b2f783c8490e6be2cf847c6ff4e7e7ab</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>1da2c61cefdb5510c9e41cb930bc1118</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cDisplayString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>36172a0dd326bb71eae7ea8e8e75f5cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>d707911a30a822f1b0958e03f55135cc</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>7261a5aa65b62b49c2dabd5b9a00bacc</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>2e99754610155d472f6c7e74ec325059</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getString</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>6a2ec8fe6921aff1b3ae9ff83247911e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>5bda02fe6ca58a740e710ec4badf9660</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>existsTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a30388945385003462557e25b8ab39da</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>1ac0e5587ab9b333d277cb6a6d0e021f</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>bc04d7dedcd472d6c9b60cd9c2bb308e</anchor>
      <arglist>(const char *tagname, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>e021b0e1e95b8da261455a66f286e7ab</anchor>
      <arglist>(const char *tagname, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>c5a4fdce91f1f57bb0069dc30d8dda51</anchor>
      <arglist>(const char *tagname, int index, long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>1dc728c962fac76dc8cee62432f23088</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTags</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>930b6cb06cbfbed8b5e72d0a5d25ff4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagName</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>00dc38dbce45f88d46c4b38d2ec932bf</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>17ed49dcfed48d6cc713d9bfe0a86bc8</anchor>
      <arglist>(int tagindex) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>65bdeb7e71d3710efc07f08b692392e6</anchor>
      <arglist>(int tagindex, int index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>a9177564c5fac3253993643a86e5a125</anchor>
      <arglist>(int tagindex, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>5b304e6cdd2c0d06059ebdb6a57dde9c</anchor>
      <arglist>(const char *tagname, int atindex=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classcDisplayString.html</anchorfile>
      <anchor>e85d8c3b15be88e758f01f3cad4ce60c</anchor>
      <arglist>(int tagindex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cDoubleExpression</name>
    <filename>classcDoubleExpression.html</filename>
    <base>cExpression</base>
  </compound>
  <compound kind="class">
    <name>cDoubleHistogram</name>
    <filename>classcDoubleHistogram.html</filename>
    <base>cEqdHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>4cb00dacbf4db66a9e31b6cf3a824671</anchor>
      <arglist>(const cDoubleHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>2e76eab4e146f4f610a8f73be08068f8</anchor>
      <arglist>(const char *name=NULL, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleHistogram</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>dc46521da522c3b0c3d7607c30044abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDoubleHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>adba66d758eece4ff83109f36f407763</anchor>
      <arglist>(const cDoubleHistogram &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>c1fd44db56c1aeea93bbb91255c9dc4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>f2383c7b4ad40e448f1fbe6274a2feef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classcDoubleHistogram.html</anchorfile>
      <anchor>8124fe15488c189ec750c21fbebedff9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cEndModuleException</name>
    <filename>classcEndModuleException.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cEndModuleException</name>
      <anchorfile>classcEndModuleException.html</anchorfile>
      <anchor>4a22486a478d1ff169e8ce0eabc73393</anchor>
      <arglist>(bool moduleToBeDeleted=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moduleToBeDeleted</name>
      <anchorfile>classcEndModuleException.html</anchorfile>
      <anchor>0e3080e9d1dee1bc382dd830d8c0b174</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cEnum</name>
    <filename>classcEnum.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>33148560278b200220c805b51f0844f5</anchor>
      <arglist>(const cEnum &amp;cenum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>bef6ab464dfadbbe3f2a201992d215de</anchor>
      <arglist>(const char *name=NULL, int siz=17)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnum</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>ff31fa82106756e25277dfe130983fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnum &amp;</type>
      <name>operator=</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>636e7e66cf03d63bad1b6d32c48d33b1</anchor>
      <arglist>(const cEnum &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>68257dd84d40a538e0508f24cbbe0cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>73aef4f48ba6131dad21cc2b4ce42a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>628db5ee34c0b4617351277640823ea4</anchor>
      <arglist>(int key, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringFor</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>176cae84b7a843c06346c8c820baf425</anchor>
      <arglist>(int key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>classcEnum.html</anchorfile>
      <anchor>f669229634e93ff5ee013f8618e236f2</anchor>
      <arglist>(const char *str, int fallback=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cEnvir</name>
    <filename>classcEnvir.html</filename>
    <member kind="function">
      <type></type>
      <name>cEnvir</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>89e10bce36b4724a7436fe301e7bd056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cEnvir</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>959b9f8a0bb8d1c5331f49ebdebe3d6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>7bfc08533273b72327de5cea2cfdbc4e</anchor>
      <arglist>(int ac, char *av[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>cf898654a1ea8ec3e3108b0318430a9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>112387fe2c316affa1f07e0771143131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>objectDeleted</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>182b5e4b82af04aa0c1fbb51948d69d9</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>messageSent</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>42b021e3b3f99f857a190d1af35177ae</anchor>
      <arglist>(cMessage *msg, cGate *directToGate=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moduleReparented</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>d352f58c5076742a20fdf135ecd19175</anchor>
      <arglist>(cModule *module, cModule *oldparent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>messageDelivered</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>37cb6b5270558b45596bd659674d86a3</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>breakpointHit</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>087274fc5614e4f846d9b57f86074a94</anchor>
      <arglist>(const char *lbl, cSimpleModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moduleMethodCalled</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>4356ee09ae9f267cf18cd347d7884fab</anchor>
      <arglist>(cModule *from, cModule *to, const char *method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moduleCreated</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>f5db013e2fe1914697bd66f3805d5159</anchor>
      <arglist>(cModule *newmodule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moduleDeleted</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>d53255f57b9b35ea52a62efac8529cc6</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectionCreated</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>6b741652657c419d1f72cd3b20c01ec3</anchor>
      <arglist>(cGate *srcgate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectionRemoved</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>56d4b1c6377c58ea58b80eb610d797a8</anchor>
      <arglist>(cGate *srcgate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displayStringChanged</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>dde7b4a2773935fb8e99d96902fa2e4c</anchor>
      <arglist>(cGate *gate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>displayStringChanged</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>3eab61f29489b8de61b5924c27063efd</anchor>
      <arglist>(cModule *submodule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backgroundDisplayStringChanged</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>56629af68b91f28999e167ac10214b8b</anchor>
      <arglist>(cModule *parentmodule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undisposedObject</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>cec0c6e9625ce325ea9cb8c2285bd68b</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParameter</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>565a7b285abed2f86efad28f5644c78d</anchor>
      <arglist>(int run_no, const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParameterUseDefault</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>b59e56bc43bec278dcb670d67cfa6a02</anchor>
      <arglist>(int run_no, const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>e08471fdb386b8a5557c193243cced84</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index)</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>d5cdf7e04fabcca8c5e3773e7ae7cb01</anchor>
      <arglist>(const char *filename, const char *path=NULL)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>extraStackForEnvir</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>6cbda146fc55a4c3f9c4cc319ad897d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cConfiguration *</type>
      <name>config</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>9b028415a125b0b1dda81f5fb2c226fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGUI</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>68603e7947f6d2e9bc8963d23ba9ec94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>disabled</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>7302b533b64fcd539a0ab8f5d3144d4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bubble</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>4ec424955b46259f8852a47e25fe46db</anchor>
      <arglist>(cModule *mod, const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printfmsg</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>f31a09d6d810165466f3450464c30960</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printf</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>928388302b1e6d81b95efa8ee9cb9005</anchor>
      <arglist>(const char *fmt=&quot;\n&quot;,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>puts</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ac79f3241a2c2bf6c6501b3c09cfbedc</anchor>
      <arglist>(const char *s) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cEnvir &amp;</type>
      <name>flush</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>573eb019eebabe980a4155797a60ef43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>gets</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>07e1a8aea97892d2ca5ce79626ce8ade</anchor>
      <arglist>(const char *prompt, const char *defaultreply=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gets</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>42858ef21762cce98873cf2c0f52e13e</anchor>
      <arglist>(const char *prompt, char *buf, int len=255) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>askYesNo</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>7833cfde3c7dbd3d7ad171bfc45f04f8</anchor>
      <arglist>(const char *msgfmt,...)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numRNGs</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>616f85379fee6d3fd61b83cf94b9e2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cRNG *</type>
      <name>rng</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>203a70f912a3d37ffa1d5d61e0e76c68</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRNGMappingFor</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>d5687bf07e71f167461cb61b4f7df31b</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>c2c0a752bafdbefe5c6a5ad55bcca832</anchor>
      <arglist>(const char *modulename, const char *vectorname, int tuple)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>6dbaa65b39a5dd71c1a7736cc57fae33</anchor>
      <arglist>(void *vechandle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>5ae0439226e892264ddcc34d9f326dba</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>514c43e1f42b7ffafed09b941ac6518c</anchor>
      <arglist>(void *vechandle, simtime_t t, double value1, double value2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>5178213ae625e78781fda2e0f1722822</anchor>
      <arglist>(cModule *module, const char *name, double value)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>96fc408ed05a8066b19525733826622f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>2d595e1642d98b3612c1ab72953a5173</anchor>
      <arglist>(std::ostream *os)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>argCount</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>e826b340fd1c692eedcb2f4b58a1c0a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>argVector</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>ffb3e27e01d1980147d4f63f3eeacfbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParsimProcId</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>db9c9110e6dfaab0271fa2158bc1174c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>bdd5699c07c723e95bfc20717e7a4ccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>d659ff64d79b2e049ee7f6be8d73e9bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>idle</name>
      <anchorfile>classcEnvir.html</anchorfile>
      <anchor>7ca5cfd1e5737ba54cf80cc8688682f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cEqdHistogramBase</name>
    <filename>classcEqdHistogramBase.html</filename>
    <base>cHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cEqdHistogramBase</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>43e1a8e45229eedb2f5d461812474c7f</anchor>
      <arglist>(const cEqdHistogramBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEqdHistogramBase</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>9efe5658ad72585b759cf387aacd396d</anchor>
      <arglist>(const char *name=NULL, int numcells=-1)</arglist>
    </member>
    <member kind="function">
      <type>cEqdHistogramBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>6a9cbabcb8d3019fedf55548bc58a3bc</anchor>
      <arglist>(const cEqdHistogramBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>342c91b72381f4ba052df16fae36439e</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>361139c8d11a3ae7797bd921ec486bf0</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>basepoint</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>13dbbbbacd3bff64c9e5f29057241316</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cell</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>98a56c54cb6d5052fee6c29c7096a01d</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pdf</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>ad0dc66ed5823ca5e491d0492eb66aa2</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cdf</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>97c6b9e20202ac6869e4c814514a3fd3</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>e13e4f057545e99bc29cd8b5c93f9c7e</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>b0206e5630fbf8dc46d81a117aebfaa9</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>ce128fec821b2ca86aa5cb0185ca5dbe</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classcEqdHistogramBase.html</anchorfile>
      <anchor>9dde423af55aaf3b8966c6f2d1bbc830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cException</name>
    <filename>classcException.html</filename>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>4f5efdd11c4e0e4cf83aa93ff4e24050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>a7ec44d0f83ab5335ffaf41cf86b3728</anchor>
      <arglist>(int errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>7f7fcd4d98b0c32fb9b85030a90f3c54</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>45b65e3b82d3ccf971340a86b67d0601</anchor>
      <arglist>(const cObject *where, int errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>9661042c3ba62741d8afde2238719fbf</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cException</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>616a152a7a238d75cd1f93ece2e0ce15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>errorCode</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>3772f624873594ec9142a207f2557ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>message</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>ca435defeb7f4b950be4eb1b49c363d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>moduleClassName</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>52fc134acb0e669c5a18489dcc47fe6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>moduleFullPath</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>25ba6a8b54d2b10ad815294daf448481</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>moduleID</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>8863f9c7ee40841d2e6b094928c0d341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcException.html</anchorfile>
      <anchor>e4e1353675b6f7d181af819627c3b4fd</anchor>
      <arglist>(const cObject *obj, int errc, const char *fmt, va_list va)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cExpression</name>
    <filename>classcExpression.html</filename>
  </compound>
  <compound kind="class">
    <name>cFSM</name>
    <filename>classcFSM.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>67f9c0e1cea78b63d8f3e818f7565f8a</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>aaac8967555c4879ad61e1b4f636c36e</anchor>
      <arglist>(const cFSM &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>cFSM &amp;</type>
      <name>operator=</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>0c94d5c693e338a0041c300cef51e10b</anchor>
      <arglist>(const cFSM &amp;vs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>a287067de764452c6ac8377047745877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>6443eca03004acf43d292980e7afe2a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>05e3f01439e8a3564b89cb9614c5a090</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>735b024f268c8bf15f2d4dd8745edc54</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>066f90fe0e36cc38062a35e7c5a250c9</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>state</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>7a881beea5f087153141d159b1eeccfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stateName</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>bb15b096cf119f3dee24eaa33e3bc393</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inTransientState</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>5322f3f3d98b1cf3078f282ff1db2bca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classcFSM.html</anchorfile>
      <anchor>850cd8c02cc0084735754a435238ab85</anchor>
      <arglist>(int state, const char *stn=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cFunctionType</name>
    <filename>classcFunctionType.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cFunctionType</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>b81c38e68ed506a6c3eea5cb661e9513</anchor>
      <arglist>(const cFunctionType &amp;ft)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFunctionType</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>2d8bbd62a4f5ef8539f0efca908a9af5</anchor>
      <arglist>(const char *name, MathFuncNoArg f, int argc=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFunctionType</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>56a53bf98e10a440f86ce77f0ebf60df</anchor>
      <arglist>(const char *name, MathFunc1Arg f, int argc=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFunctionType</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>e780ab1da828e8e75dd5656eafe91237</anchor>
      <arglist>(const char *name, MathFunc2Args f, int argc=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFunctionType</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>6d32d3ab4769ec61d32a818c0a2ef207</anchor>
      <arglist>(const char *name, MathFunc3Args f, int argc=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFunctionType</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>db72a605d9eb9598603f2d263711abdd</anchor>
      <arglist>(const char *name, MathFunc4Args f, int argc=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFunctionType</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>25b3865a61fb529469730801e1486b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFunctionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>f6c977d23f987470752880fac90da536</anchor>
      <arglist>(const cFunctionType &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>fb01f948c68f93ebae736b3b76a542da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>argCount</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>083d3773fac6b86dd1460d8e88ef344a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MathFunc</type>
      <name>mathFunc</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>1677fd2678027904808d32c320b2a6e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MathFuncNoArg</type>
      <name>mathFuncNoArg</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>6bf4cdb1ea9365b8eba15eef7ed51f7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MathFunc1Arg</type>
      <name>mathFunc1Arg</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>4d1f2aa366b1c25439367e9e0936b813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MathFunc2Args</type>
      <name>mathFunc2Args</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>91c08038dd853d31fe9031584982c248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MathFunc3Args</type>
      <name>mathFunc3Args</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>48f2ea5fda241f5f8d6dd31f36b923d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MathFunc4Args</type>
      <name>mathFunc4Args</name>
      <anchorfile>classcFunctionType.html</anchorfile>
      <anchor>2ddb1e43a044addde4dac9318ec40327</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cGate</name>
    <filename>classcGate.html</filename>
    <base>cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>992b42ad97f4d2db611862e0b8f3c29d</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>0e1d0677b0d936548249d478c4019b2c</anchor>
      <arglist>(const cGate &amp;gate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>f037a6415dc36eedc75e5cd49c86a684</anchor>
      <arglist>(const char *name, char tp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>73f13412229a4c133b4f9c23a7693f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cGate &amp;</type>
      <name>operator=</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>7d45911f094412cb8fe19911f33cc0fc</anchor>
      <arglist>(const cGate &amp;gate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>b4ae6db1a37a0949a51db9835aa85986</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>410b3ce7ff7b344802bdefd8103dd156</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>b19a9d51b384bca48e8b0ae312c5459f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullName</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>4689166617dd774d4dc117be0da3e5bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>9befc05c012867ba9cf2a34bdda01254</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>fullPath</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>1d1ad070060859ee7defdc1766cd5170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullPath</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>7b12dda2702af0457121895d8464967e</anchor>
      <arglist>(char *buffer, int bufsize) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>647df51182157c26591eeb818378c189</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerModule</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>0a0960f59b8718c40e893f0e7c0a4107</anchor>
      <arglist>(cModule *m, int gid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>98552fffcc4700ee65dfdee97e1f3c9a</anchor>
      <arglist>(int sn, int vs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectTo</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>e6b5d152c270b8ad8521484a9d99d401</anchor>
      <arglist>(cGate *g, cChannel *chan=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>1f622cd4b0b84670272a92e6daa566bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrom</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>11826daa5dfa5e51653fd6798dcd155b</anchor>
      <arglist>(cGate *g) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTo</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>d7dab4f78c451988d85687431f948c15</anchor>
      <arglist>(cGate *g) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>cdaf335517c92f3deaa97131246effb6</anchor>
      <arglist>(cChannel *ch)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>channel</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ee9cb866e2866dd652b82d1b78046c87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>type</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>50902a064e4213ce24e524d4f33d84d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>ownerModule</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>662e53be58d5c6cd84fd198383360caf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>5d972705ccc1c0f993356abd51eeee7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>740effd6705c57eb80036fd0af2d1ae6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>8914207cc100639cc57dacc101b18e01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>37b65df3aa9d178949882e0e7f03362f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLink</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>53e0a0ac138f326dc81448a32e0985c3</anchor>
      <arglist>(cChannelType *l) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelay</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>532a26058c2a5f548565e0f8aa2cac75</anchor>
      <arglist>(cPar *p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setError</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>60e5c190fd4ded1b3cc741b7c87b52ed</anchor>
      <arglist>(cPar *p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataRate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>b56f15d82723e9bdc11b06888c3df910</anchor>
      <arglist>(cPar *p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cPar *</type>
      <name>delay</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>2f9fbb9de6319a50fc80a1cb38bbf689</anchor>
      <arglist>() const _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cPar *</type>
      <name>error</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>d00a3f151f179406fca246a8aa5dccfd</anchor>
      <arglist>() const _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cPar *</type>
      <name>datarate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>b22e95a8bc34d89716fe02c6ee03627f</anchor>
      <arglist>() const _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBusy</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>4a105c162b40f5c1371986faeca4183a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>transmissionFinishes</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>669066e3f103a022c474d9a65704eb3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>fromGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>ed7b32792231164be8910e4541ea49de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>toGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>98b34c2eb82dfb365fc0fb767f30449e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>sourceGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>d2d9ed01e492bafbc78fe4c6e65f1efd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>destinationGate</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>c347778169feceae55340df238b43aa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>routeContains</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>8839b6ff2d588c6b76efdf86320c73b4</anchor>
      <arglist>(cModule *m, int g=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOutside</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>458a23f084b6e561598cee4876dd3669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedInside</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>92d9162bc195e5ec4cf8cf13aa6c9e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>d5b8f94405bc3ebaad32570f4c8d6d91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRouteOK</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>e3fd91cdc04f86986f47494de1737678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>displayString</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>0e58c58f96bc5e98f364055c463f980c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>97bda9779d2343854b8ffd19028fe0d4</anchor>
      <arglist>(const char *dispstr, bool immediate=true)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcGate.html</anchorfile>
      <anchor>37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cGenericAssignableWatch</name>
    <filename>classcGenericAssignableWatch.html</filename>
    <templarg>T</templarg>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>c815810351d44ded29bafc0249971065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>54dfa527c677afa27bd01bd34f874457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>85c0eeaed709e66d9690c6d4bffd716a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcGenericAssignableWatch.html</anchorfile>
      <anchor>547b13ad8e81f0f576a5d527c5e06376</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cGenericReadonlyWatch</name>
    <filename>classcGenericReadonlyWatch.html</filename>
    <templarg>T</templarg>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcGenericReadonlyWatch.html</anchorfile>
      <anchor>e68e865f6ad339aef544149376beae32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcGenericReadonlyWatch.html</anchorfile>
      <anchor>fe7267fd7b6cdd0bc6024551a07e36f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcGenericReadonlyWatch.html</anchorfile>
      <anchor>ef82fe940d8a28aac20f7d13d7908ea1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cHistogramBase</name>
    <filename>classcHistogramBase.html</filename>
    <base>cDensityEstBase</base>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>0de4899b3bb58a908b0c9364f69668e6</anchor>
      <arglist>(const cHistogramBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogramBase</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>38b199c7c2c33bbaa84ef8626520519f</anchor>
      <arglist>(const char *name, int numcells)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cHistogramBase</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>0eafa51cc21837cbcfe40b69a3f82528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cHistogramBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>09758116a34349bc9942467a3ef8bdb3</anchor>
      <arglist>(const cHistogramBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>be23b1b0d502c9ba4f63d5a862421dff</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>8e1948d0af253c6a48eca70acbd79538</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>72cb7ea92e4877c03ef88de70cab2203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>d117c20497a78c6cbc23f085e7b3e15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cells</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>aa0ad3200acf0f09f43141e3d858ff0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>2c3136ae53afb62289cbb7501845f592</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>f837851071172d94c451c2187a989609</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumCells</name>
      <anchorfile>classcHistogramBase.html</anchorfile>
      <anchor>db25c6c683a19530149abecdc2267e93</anchor>
      <arglist>(int numcells)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cKSplit</name>
    <filename>classcKSplit.html</filename>
    <base>cDensityEstBase</base>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g253ef95979a4524c9c19e1b477215ce5</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gde5c525991f38f272681b30cf390d940</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>de96d22814038931ad01d787c409bfbd</anchor>
      <arglist>(const cKSplit &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>514204989216053aae6638378fd29c74</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cKSplit</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>1115a3808b255242390ebcddf86653fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cKSplit &amp;</type>
      <name>operator=</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ba600c8e97854137c6e1e5b855bf1d7a</anchor>
      <arglist>(const cKSplit &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>c59e89c7e51f7b91d3c1c16591bede9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>62eed225a3cc4c40e246d1b3a1d77216</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>16c98f75b40a30c3794ab567ecd19025</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>b5897df32cc0ccb58becc8593101cb7f</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>9090d361b2f54994538b1152ad63d6c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cells</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>603be34fb9b2d96a3d0c99619cccef06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>basepoint</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>f10ad3322d363a7f1a9a22d52d936601</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cell</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>fc45d9dfc39ae6ad90d1e3151f87e8fa</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pdf</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>f5d0134196faf23dfc062fccabe18f1e</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cdf</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>8fcedc193f70d7a0aae5dcd8d13b1464</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>e8681dc792c05b44bf81a2b2d95be78f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>8aab9e85cce2fc8b09a91e9b41122b30</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>3eedd26cec83b52bcd152777ce2df1a5</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCritFunc</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>fc8554340805d4858bbc7cfd96915e4a</anchor>
      <arglist>(CritFunc _critfunc, double *_critdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDivFunc</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>f0765b083e3cb07a5422acba02db45ab</anchor>
      <arglist>(DivFunc _divfunc, double *_divdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rangeExtension</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>3d19fc08521d986b60125107ff8ffda1</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>treeDepth</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>68f0a770c441993fb97c835205adf934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>treeDepth</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>ecc4aba1872e6e5b19c6ca4326e1135f</anchor>
      <arglist>(Grid &amp;grid) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realCellValue</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>729cb28eb219bcd2099a850d52c09571</anchor>
      <arglist>(Grid &amp;grid, int cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrids</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>2b6043b2230865067e6b18e3da95f1a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>grid</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>c7a490b09747a147edde680c183b07f4</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>rootGrid</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>61ce0d93fe938e6ec41c705c937e8adc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcKSplit.html</anchorfile>
      <anchor>a573c5a13dfa1264f6dd06b19265de0d</anchor>
      <arglist>(double val)</arglist>
    </member>
    <class kind="struct">cKSplit::Grid</class>
    <class kind="class">cKSplit::Iterator</class>
  </compound>
  <compound kind="struct">
    <name>cKSplit::Grid</name>
    <filename>structcKSplit_1_1Grid.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>parent</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>9ca937765e4eb0e7391cfaa8bf4655e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>reldepth</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>bd97f575d4cd9efedce90953173702b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>total</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>f2e6af5f4ec06d259003fc871e8d9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mother</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>ddb6e790e7bad1f125ed7c5a51e53a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>cells</name>
      <anchorfile>structcKSplit_1_1Grid.html</anchorfile>
      <anchor>61c8946f10d03393b5becf93d9b41064</anchor>
      <arglist>[K]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cKSplit::Iterator</name>
    <filename>classcKSplit_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>b0fec8c0719a0d76c6570f496082ef79</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>c24395c8e0e5d06e0ae25b8ef948265d</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>fbaed025197854d4bfeb975dc621fe1c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>f93074c1a890c72443f556f9143240fd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>1d06079c54e2c083423ea6349d4868de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cellNumber</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>456e0ce6fafe3077e45d4aa83c409873</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cellMin</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>fa18cea47f7a407bdf2da5a3aea5657d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cellMax</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>913f32f15fe0567b254e6cdba13d6ff8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cellSize</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>c5e348c49011d25e7577eff281e3de15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cellValue</name>
      <anchorfile>classcKSplit_1_1Iterator.html</anchorfile>
      <anchor>82b3e0235e452c33fad6abeccc4d4257</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLinkedList</name>
    <filename>classcLinkedList.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cLinkedList</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>57354786e570fa07dd7637dcdc6af0e2</anchor>
      <arglist>(const cLinkedList &amp;llist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLinkedList</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>38390caf28a98d45e7fe3e286afc74df</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLinkedList</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>6e66956d970bf5bd721ca3c7e26aaefd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLinkedList &amp;</type>
      <name>operator=</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>25d1ad249e94fa0583ceedb1936ad04b</anchor>
      <arglist>(const cLinkedList &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>b3ebd3e359a97f621609fbfdb8d3e1e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>800ae2c95458116395a1d3c99d6ad460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>d6f84511493bf9ce7d11cda678d57619</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>81f43856586d929e6118e5650bccf8d7</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>config</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>c35d14e49b832fbb2bf7d7ce79c6fcac</anchor>
      <arglist>(VoidDelFunc _delfunc, VoidDupFunc _dupfunc, size_t _itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>990ef93315271729c5d874d66e90ce8a</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBefore</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>8c13953a5c403dfffa7d4e1f0a488363</anchor>
      <arglist>(void *where, void *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAfter</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>ebefdcff2330511834d3d0e92b6377e1</anchor>
      <arglist>(void *where, void *item)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>head</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>84815256c700ec2f80d7d73f59a6e28e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>tail</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>4a45bc14b501d3be6b36a751444a4913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>remove</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>cba9fbd0139076462bf507e23cdd989b</anchor>
      <arglist>(void *item)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pop</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>8cc964ee2b30d3bd5b48e79f4d28be41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>1bb2f052cacd795712fa49d8b5fae765</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>3f4ae656d8069fe64b3df2bd4ccd8692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>4b3cb9c3ddc287fb0207255d593e2611</anchor>
      <arglist>(void *item) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcLinkedList.html</anchorfile>
      <anchor>a1d63a76d0e133cfd0eab476c84c9239</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="class">cLinkedList::Iterator</class>
  </compound>
  <compound kind="class">
    <name>cLinkedList::Iterator</name>
    <filename>classcLinkedList_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>8e4d5f4d51aa417e0077fb0d3b9d3bbf</anchor>
      <arglist>(const cLinkedList &amp;q, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>4e42c685b88e1e9f3178bbc6665f3763</anchor>
      <arglist>(const cLinkedList &amp;q, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator()</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>07e5f07908eb3da6fe8f42da1f16f802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>533e6dfef289239e2cb48c3020bd39c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator++</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>6288ce85d7e71e0341e3b9ca5364497f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator--</name>
      <anchorfile>classcLinkedList_1_1Iterator.html</anchorfile>
      <anchor>e32b31f546bd5fb3ab29e536552fea5c</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLinkType</name>
    <filename>classcLinkType.html</filename>
    <base>cChannelType</base>
    <member kind="function">
      <type></type>
      <name>cLinkType</name>
      <anchorfile>classcLinkType.html</anchorfile>
      <anchor>d10fc457699f30310df5ff0f960eb97e</anchor>
      <arglist>(const char *name, cPar *(*d)(), cPar *(*e)(), cPar *(*dr)())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLinkType</name>
      <anchorfile>classcLinkType.html</anchorfile>
      <anchor>583cf3cf9496ce4c1f0caeee5f9f2343</anchor>
      <arglist>(const cLinkType &amp;li)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLinkType</name>
      <anchorfile>classcLinkType.html</anchorfile>
      <anchor>34d8de05c3f266cc8c054a46f065cd6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLinkType &amp;</type>
      <name>operator=</name>
      <anchorfile>classcLinkType.html</anchorfile>
      <anchor>7f7e47e765ad1397077184f2ddd20d95</anchor>
      <arglist>(const cLinkType &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcLinkType.html</anchorfile>
      <anchor>beb6865a5244ebcafd5887a4f0e255b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>create</name>
      <anchorfile>classcLinkType.html</anchorfile>
      <anchor>3ee9138c6bfc6bb5385849433abb8854</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLongHistogram</name>
    <filename>classcLongHistogram.html</filename>
    <base>cEqdHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>a43b4682f0ec5aa97622e361b43b3546</anchor>
      <arglist>(const cLongHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>41b4dffc6a1525f11c4d8b8bf8600946</anchor>
      <arglist>(const char *name=NULL, int numcells=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongHistogram</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>b8e16df6782a9551eb6b1e47ef4c1baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLongHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>1515e4e06cf4be72e178f57470149ed5</anchor>
      <arglist>(const cLongHistogram &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>6dd27d0ede77d88fec30825a434a1ce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>f402c24780a154ccc429a86e94d4d14b</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>bfbed1a5fcc5ba886ebb54a62749e222</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classcLongHistogram.html</anchorfile>
      <anchor>03aed5c1b66b58f4084a6944ed235c1d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMessage</name>
    <filename>classcMessage.html</filename>
    <base>cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>displayString</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>bb5225e496416457c67060e47d516652</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>cmpbydelivtime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>e1d2284b4c594706062afe29e8b98fb0</anchor>
      <arglist>(cObject *one, cObject *other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>cmpbypriority</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>fd9a2ae86a000db4fb5fb5687b08d1c2</anchor>
      <arglist>(cObject *one, cObject *other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>eb38209b684c7473c2bc30a3d6cac684</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>1f127adb67f39e553c8f148d2cbb754a</anchor>
      <arglist>(const char *name=NULL, int k=0, long len=0, int pri=0, bool err=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a8873b717d364aafd654c001358199e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>33819e281a39aef981caa015538c07d7</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>05ac244e8b08750c2ed20482ebdd5115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>5fcbee3c0954ec6c16d71a45c1626335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a04f09128a779c534046207239f7e6c9</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a8acd807a81c0240d227002f5989efae</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>b03d06a157264fff7af62b29620be7b9</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>da8588ba36614f18506ddd28fe88bee7</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKind</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>4e866f720f3333117c3354483814e716</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPriority</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>e4c8dacd3b513f5f57a22fe9d46b8822</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLength</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>8bb7c833f733bad1ffa77dd47cd18325</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteLength</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>3a214028eeb4bdeccef444033ace8394</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLength</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>1eb9aa63e9cfb5b75095972f80b1fabd</anchor>
      <arglist>(long delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addByteLength</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>c0a90b55c299de29df43d163394f89c9</anchor>
      <arglist>(long delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBitError</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>da8b7fbf96c73247a02ec5ab3cd14a73</anchor>
      <arglist>(bool err)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>904f6c30bbfcd340abd5a15f0c24f3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a7d5dc9ce073541adc4d72429de90161</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>526301f559183d7730af93c88bda120d</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlInfo</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>b1a0ad1add67f9ade4dadeded057659f</anchor>
      <arglist>(cPolymorphic *p)</arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>removeControlInfo</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>3e48ad7b9e4c56469b7d1c251fe491b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>kind</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>2cbdf4926fbd5c66292ec431fcdfec5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>priority</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>af49a03fd046009874b7059a36f3c257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>length</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aa81d341f466f7f5615603e00b13273f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>byteLength</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>c207c2014b81f504b19e5d26127b6d82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBitError</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>bc9c6910b1f4b5f936086f94354e0108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>timestamp</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>0766a1fd7844e0ebf1a2302fabceebd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>insertOrder</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>6792122f63680e68d4ae00ec8a30acf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>contextPointer</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>6d27e61f12869b41dbf0cb7d35533788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cPolymorphic *</type>
      <name>controlInfo</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>c7a2644ac8d05cf45ae8e00ffc2eabf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cArray &amp;</type>
      <name>parList</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>9b4f6c7608316918c57d6fd1987b87d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>b71cbb9bb1e0f9f42681fa5816431526</anchor>
      <arglist>(const char *s) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>b73f1f529ca2de10b9362c63d9c05872</anchor>
      <arglist>(cPar *p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>5931de6f4df6e76debbd81a4deaf8317</anchor>
      <arglist>(cPar &amp;p) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>cc3741a3ec2a4ce446729fd1682dae2c</anchor>
      <arglist>(int n) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>4bafa743d4acc88b2a8e8ba131826d9b</anchor>
      <arglist>(const char *s) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>3dfaf7cede680ae3bd7b11084a484ae7</anchor>
      <arglist>(const char *s) const _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPar</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>6e9a7916c02fedaf349bedce5194eacb</anchor>
      <arglist>(const char *s) const _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>addObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>0ee88b86f39ab1eb7300cd53ee434564</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>getObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>055a342ac73ffbabb22960ee585bf410</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>afe1893afa388df17fb389e32421e39d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>removeObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>2f4bdb187b3751cd46c9071082b4dba1</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>removeObject</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>0bce57ef4a63a21a412aff1f0dd8c6dc</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>encapsulate</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>2622c99b9eb2bcc99f7c410abfa8a9c9</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>decapsulate</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>03bf62712c0a598093da83a67f1895c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>encapsulatedMsg</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>fbee5e830316c02593de970a4fbdc63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelfMessage</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>dd2134e78e0b47ee6abf83a382802d82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScheduled</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a3bacf523e80bcfac2276ebb7f54a176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>senderModule</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>4be37051b693fc6aee03965e7ce4adbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>senderGate</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a87691276b19177dadc5183cb238490b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>arrivalModule</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>fdf3ab518281ab9ad77090ab26e5d3ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>arrivalGate</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>6845019709604c347bb7dcbabaf2b3ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>senderModuleId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>76821396d0365441ab291f79f27e5a3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>senderGateId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>741c4f4b490a003761cb4f8154036657</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arrivalModuleId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>188042604c2098d2906238d9f70bdc49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>arrivalGateId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a2aaac15ecd4656fc7f00616b7b766a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>creationTime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>7fe037418401319d487dcc7f2124eb8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>sendingTime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>009f2fe3a0f29fd2ba61a5b249d826da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>arrivalTime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>96c5e8dc397c589cdebfbae75a3d50dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>efa15d385e9ad896b669efcf2070c000</anchor>
      <arglist>(int g) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>68a1f06236393b9c7c15c1637c58d66e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>58778187cce54d288c14f4035e6b9a44</anchor>
      <arglist>(const char *s, int gateindex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSentFrom</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a4b4d88bb2c332da9705c24d2b8e99df</anchor>
      <arglist>(cModule *module, int gate, simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setArrival</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a39c06449a213df0c11ff479ac16b704</anchor>
      <arglist>(cModule *module, int gate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setArrival</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>b389cdba389aaef08067619bda97b6ae</anchor>
      <arglist>(cModule *module, int gate, simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setArrivalTime</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>56b5440b134ea6c22b54b199cbbb08e6</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSrcProcId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>a499c01f171b69925e46a329a29415cb</anchor>
      <arglist>(int procId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>srcProcId</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>0d8301feac133cf88bcb5bd1ce525311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>totalMessageCount</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>b87835124b52e4ff7c9367903047d991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>liveMessageCount</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>592d29c2c8a78a75f103b70b8e7edbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetMessageCounters</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>aa4b07f99fc5addf90e1e2ec0cbca4bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cMessageHeap</name>
      <anchorfile>classcMessage.html</anchorfile>
      <anchor>cbb0835440ec2391ce312e670da8249d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMessageHeap</name>
    <filename>classcMessageHeap.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cMessageHeap</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>1a546f77dfa058a8856be08ea1a35fee</anchor>
      <arglist>(const cMessageHeap &amp;msgq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessageHeap</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>86a1aa8129a0e6a705e18fd875eb0ade</anchor>
      <arglist>(const char *name=NULL, int size=128)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessageHeap</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>b0fc65dda88a26e390908af790c99fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessageHeap &amp;</type>
      <name>operator=</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>9f3da5e1af3744710138e091a995e1af</anchor>
      <arglist>(const cMessageHeap &amp;msgqueue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>ce2e74b9660c2708984dd477761a75fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>12c399e81d42455376f66913c6b28edf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>bd728de9766b5dfbaa9b6e2455b517e6</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>2d95cd7cbe767f99fa0e5c0db750f0f4</anchor>
      <arglist>(cMessage *event)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>peekFirst</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>7f3a9ac51503b8793a72505cf1f4586c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getFirst</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>9ce9f2ba14e6fb676df3b80592586e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>get</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>0ea0a834a70f78665dc92ff3227de01b</anchor>
      <arglist>(cMessage *event)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>peek</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>afa11c9b7648634a44a287cca02e4386</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>7865ce4b655304d39cf94c990158ab32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>e893978970a36a37b360b4881d0bf249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>3e9f1f9b1c8d622f8dbbd94d9e6f4355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcMessageHeap.html</anchorfile>
      <anchor>0408d48b95e325b5a56a4e6c2dfa176d</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">cMessageHeap::Iterator</class>
  </compound>
  <compound kind="class">
    <name>cMessageHeap::Iterator</name>
    <filename>classcMessageHeap_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>fe76ca928ad098fdc5a3f51ee82267de</anchor>
      <arglist>(const cMessageHeap &amp;mh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>88a7bc8c5cdb59afb4de85bfdb7cc6d9</anchor>
      <arglist>(const cMessageHeap &amp;mh)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>operator()</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>c3df6dec64e602b35750fe1548f282fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>operator++</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>8b0228caf1225f75f551c8689e17473a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcMessageHeap_1_1Iterator.html</anchorfile>
      <anchor>eadf03e53540207e066bc0a279029225</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModule</name>
    <filename>classcModule.html</filename>
    <base>cDefaultList</base>
    <member kind="function">
      <type></type>
      <name>cModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>4aa79f0bd7b1d7eaa76f5557f55023ab</anchor>
      <arglist>(const cModule &amp;mod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a91df47dc373480450b61c62fbad934c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>6a621fa6673160bb69c7dc4fe9eb64c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cModule &amp;</type>
      <name>operator=</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>996afb2121bc816f0352dc6b8b31f6ab</anchor>
      <arglist>(const cModule &amp;mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>091296dfd37373944cb1532b5c11dd87</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>146a9b2d1c67a5c8bb1b54700fca465d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullName</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>824ec0c80d4216facd26d9757750238a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>fullPath</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>380e6f29e53480cdf07c5f7126e53aa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullPath</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>50dae3ba3f419fbe6c9a7ca6261db7a0</anchor>
      <arglist>(char *buffer, int bufsize) const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>addGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>abbecda3ed02c7b3ea03fe75eb30d5a0</anchor>
      <arglist>(const char *s, char tp, bool isvector=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setGateSize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>06835c417caaee2d2f82de9b3747e068</anchor>
      <arglist>(const char *s, int size)</arglist>
    </member>
    <member kind="function">
      <type>cPar *</type>
      <name>addPar</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>fad816c544af2dde0a0fc7e23dee0697</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>buildInside</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>086c439380f400dc6254b5b2d5f1d408</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>71ee3edc64c50bd9efa5b8d43d155d99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>moduleType</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>288a89a75ae8f98eefdc406a20760b3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a434c34d99fa7bdc2fe45133f5ca4f28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>parentModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>dc1eac1e6c935a4ee8ce630e9c7b74d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>bc24e9322a19c30da173000110f26596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>3be801d19a18806feaa9891245d8cc2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>d08955e71fd144469a04f0ea26c22766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cRNG *</type>
      <name>rng</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>b72a6da32b32f3aca091b6aefcb1366c</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findSubmodule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>4c8b47a44c467739610b96d1a2fa979e</anchor>
      <arglist>(const char *submodname, int idx=-1)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>submodule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aedac9af32d00ce5eebe66bf21ad7e04</anchor>
      <arglist>(const char *submodname, int idx=-1)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>moduleByRelativePath</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>27dd7a91dadf64d52085d82faff4e03b</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gates</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>ff4caafb97e58d2000d9470a19b15c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>8214b2ac2b3180da6b35a2d4f98c9a1f</anchor>
      <arglist>(int g)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a20cb2a4f4b542865903c5ac38753d9f</anchor>
      <arglist>(int g) const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>867bb5f0ebb56d917080654acb509af0</anchor>
      <arglist>(const char *gatename, int sn=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>f73d96e68d6c4581de86e60ac3e4b3c8</anchor>
      <arglist>(const char *gatename, int sn=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gateSize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>b2bc93581d0091c457d4490bfe1528a7</anchor>
      <arglist>(const char *gatename) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>1d77dbb3e6c3b3be2024dab825f04c8d</anchor>
      <arglist>(const char *gatename, int sn=-1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a1860cf44b1997f3f3fbdd9660207feb</anchor>
      <arglist>(const char *gatename, int sn=-1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkInternalConnections</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>bd0b3bd68688e456141f855b16a8f836</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>params</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>fd6f1f779220ac6c2ebc999edd37c0bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>2402c27501ee04c8d004fbe6e86e7b79</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>par</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a2696c973d6ded9b2ca8a2da338e6ba5</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findPar</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>54db665e3d7fc8518730b25e0b53a29a</anchor>
      <arglist>(const char *parname) const </arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>ancestorPar</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>c3734f9e2ef4ce0a2092fb9d8eac0a24</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPar</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>1a4428445d2065342ffd57f7e0cbfe0c</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>2479e23e50fd2286730892ef59cc784e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>fa97027522d4296a3436a6bb5cd2fa6e</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>200cedd49110c4b22018dd7ce669b073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>aaed82aec8392c256d984b7975384d0c</anchor>
      <arglist>(simtime_t t)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>a40e04f3a15395bfad553227c0a51866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParentTo</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>f9e5fae012b14606d5e58cab261c91af</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>displayString</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>58a616bd3caca8ae84cf1a541e9e2f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>backgroundDisplayString</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>6acf5a67c04404419a54d749caecd69d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>e500b15b74af37579e95001663256975</anchor>
      <arglist>(const char *dispstr, bool immediate=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundDisplayString</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>5cd0b89168eec139dedf7a40f10d554d</anchor>
      <arglist>(const char *dispstr, bool immediate=true)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>displayString</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>9c1a9937bb1cd7c2130d1c53d5273753</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>84bc074a541a0ecffcc272c185a2f4b9</anchor>
      <arglist>(int type, const char *dispstr, bool immediate=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bubble</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>1477a308faef39468e328f4f398b2a12</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>doBuildInside</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>dd01a066cdec92f7f5fc3f455abfb225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>63bdb648feb6a96129d2cca5b33f8b8a</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>57f2b639e73dad997f48dcbca917d32c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>842d667163caf9f106043742d4a8ec86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>cd38598610f3ea13cab1f9713021527d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>3248977e2b97cb86e12987b24994143f</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cGate</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>d65e9293fb55c44ed30eef8b1f27df95</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModulePar</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>6137c920eb54b8a13f4a9a056e63a9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimulation</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>3c6add72105ce0170138d90021da4d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModuleType</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>c019ff97fbe4ac5f1ed4f9e2953a8573</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSubModIterator</name>
      <anchorfile>classcModule.html</anchorfile>
      <anchor>2b7c1d3653314b1d0d979c921d65ca58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModuleInterface</name>
    <filename>classcModuleInterface.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cModuleInterface</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>78efb144a0d1fe8212f6ed9fb99a90f8</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModuleInterface</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>75b32d95253ca6b5e7f28f605e9e8459</anchor>
      <arglist>(const char *name, DeclarationItem *decltable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModuleInterface</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>f4bd0636d4016e28fcab25a9899d5d08</anchor>
      <arglist>(const cModuleInterface &amp;mi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModuleInterface</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>488924ed7132ed541faaa12dbcf0b53f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cModuleInterface &amp;</type>
      <name>operator=</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>3ecefdb98c6a1f00b5692dce29516897</anchor>
      <arglist>(const cModuleInterface &amp;mi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>620a97854c47bd488c4486f6ede2b6d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateGateDecls</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>a8bca751ad4d493b607096859d17ef3a</anchor>
      <arglist>(int maxnumgates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateParamDecls</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>b2a1c51473abfed49d73d716182824ee</anchor>
      <arglist>(int maxnumparams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGateDecl</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>842ba8a5a7f40504f207736907452dc7</anchor>
      <arglist>(const char *name, const char type, bool isvector=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParamDecl</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>1feb3e3dce93c0c97be3d78ef1d8f127</anchor>
      <arglist>(const char *name, const char *types)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParams</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>a1e488b6dc6bd4054713624ab8ddd24d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findParam</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>c24225a7bea6d2c1d80a58a60cd8d01e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>paramName</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>5be42393e7492af032f80289b3e820b2</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>paramType</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>88a4ddb7010bf1cbf1b6be072a39dc75</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParamConst</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>e71e09335c911e3ae191751e1587123a</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numGates</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>2265b149520edc66aa0bf814a4ee26b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findGate</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>08e5a43ef50da4879f1aed477dea5619</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>0918fd6b7031384385454214012c8fe0</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>gateType</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>4016461f22fc7150a6b6aede78f5875d</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGateVector</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>1046c4984f4ade809ebb8bf7c2b3e02f</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParametersGatesTo</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>1cef518cf73d47ff830ae25673d4a62b</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkParametersOf</name>
      <anchorfile>classcModuleInterface.html</anchorfile>
      <anchor>baa9962cadab498829819667983be6dc</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModulePar</name>
    <filename>classcModulePar.html</filename>
    <base>cPar</base>
    <member kind="function">
      <type></type>
      <name>cModulePar</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>888d0af63e2cbfdbae8136744557db17</anchor>
      <arglist>(const cPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModulePar</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>cda82f37e685099f5ee53f472d0c9ba8</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModulePar</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>764c71061544f7c91317c7c95a96ef4c</anchor>
      <arglist>(const char *name, cPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModulePar</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>0d672de7520b6cb8f9afb257a08e1b96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cModulePar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>4ee79c469bc79644ee98a3c14cb6b296</anchor>
      <arglist>(const cModulePar &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>422a3b5666f6caa79135179395acd576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>fullPath</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>daaa4abbc20c90d449039f7c5ef1cc0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullPath</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>7a9637112838dba1347edb4d95b7aa11</anchor>
      <arglist>(char *buffer, int bufsize) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>afterChange</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>0f4ceaf78612ec3cf338aa27e2c300f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerModule</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>f97f067cb057dd7d6c985ffb49110bd1</anchor>
      <arglist>(cModule *om)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>ownerModule</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>17dc77333e1dd164303a61e5c96ccbe4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcModulePar.html</anchorfile>
      <anchor>37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cModuleType</name>
    <filename>classcModuleType.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cModuleType</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>bbdf1cb422e2b1746293309f7a5dfd31</anchor>
      <arglist>(const char *classname, const char *interf_name, ModuleCreateFunc cf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModuleType</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>efd15f2dcef07ebfc25fbf2f1ffe6011</anchor>
      <arglist>(const cModuleType &amp;mi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModuleType</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>65c0ec48430da8813cbc70842bbe4277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cModuleType &amp;</type>
      <name>operator=</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>19492a92c16d044e95332c4eccfb7d0e</anchor>
      <arglist>(const cModuleType &amp;mi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>04314e4a647eb0651a8c5b3781e35e95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>60287ca91b5283cf33bc03b7d45fc2cb</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>2b12dddaff908417589ffd61e14077af</anchor>
      <arglist>(const char *name, cModule *parentmod, int vectorsize, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>buildInside</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>07978ae74bafa00f33003750c5c36e07</anchor>
      <arglist>(cModule *mod) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>createScheduleInit</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>db9e1c7bcd1597691937034ee2146770</anchor>
      <arglist>(char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModuleInterface *</type>
      <name>moduleInterface</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>842b9f235c8e16660a0f0fbc732e2689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcModuleType.html</anchorfile>
      <anchor>37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNetworkType</name>
    <filename>classcNetworkType.html</filename>
    <base>cObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setupNetwork</name>
      <anchorfile>classcNetworkType.html</anchorfile>
      <anchor>ca06b7199ad8253e60bc33e27fbd0378</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNetworkType</name>
      <anchorfile>classcNetworkType.html</anchorfile>
      <anchor>b0fc130cc3ba5c62e3db0d8b0590a57b</anchor>
      <arglist>(const cNetworkType &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNetworkType</name>
      <anchorfile>classcNetworkType.html</anchorfile>
      <anchor>59f2a7625224f05bebf347d9a3a39e64</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNetworkType</name>
      <anchorfile>classcNetworkType.html</anchorfile>
      <anchor>8fd0fb12d816426d9124feccb5d97f28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cNetworkType &amp;</type>
      <name>operator=</name>
      <anchorfile>classcNetworkType.html</anchorfile>
      <anchor>6db0472d7d92a0fdfc2e7d1bf7a87392</anchor>
      <arglist>(const cNetworkType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cObject</name>
    <filename>classcObject.html</filename>
    <base>cPolymorphic</base>
    <member kind="function">
      <type>cObject *</type>
      <name>owner</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>00ea4ecd7fefd622533c5868af05dbb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>9dc30e7a74d3cc13ddffc6c6ebfdd4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDefaultList *</type>
      <name>defaultOwner</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>d7e64fa7a629629569ca5620d7a2a497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>65acb0f75ca1a80ed878abea2a9f8362</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>findObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>4e5cc5be7ee53e165db081eb87851630</anchor>
      <arglist>(const char *name, bool deep=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>cmpbyname</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a3e5a3280c56290826cdba7550a36f77</anchor>
      <arglist>(cObject *one, cObject *other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>0c3b3c1e0b0a7aec40ab072835c2b3b0</anchor>
      <arglist>(const cObject &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>e98752182985569372cc076132432d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>992d39b4ff43849c3ff28beb5cd44c5c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cObject</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>83f62e04e6e3c58d888a7ade4c57844c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>d7b3cbd24d353cab9e4a223cec050194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>ce1e157cdaf0aa0ad339f5154fe3bc1b</anchor>
      <arglist>(const cObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>852dc51afd4acf4d574d15d9f63cc673</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>d01778ee81fd73fa8ad94f4b236478e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isName</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>69463289cae75af0e494151c0647b95c</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullName</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>de4733938bb77b8faa803bc241c6dc83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>fullPath</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>4dcfa088c6000f541358793b97c20f15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullPath</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>813bae6886d1503fb16e0ac7ea077c7a</anchor>
      <arglist>(char *buffer, int buffersize) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>11ba70212fe9ac1fcc6c339b94b439da</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>b372f28bbd715809603a4f38b47b006b</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>250a0a85aa0c84a56bd8e7108b5b3fa8</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>totalObjectCount</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>47b4e5fb78320449481900aafc7d5f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>liveObjectCount</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>8422475dbcd5ba80b84e07ae156726f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetMessageCounters</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>be508d82748a6e89cd5176d808f18368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>4c2e5ab76a3f2630ab18c3dd6a535fcc</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>d5d6057291889e00a6400993ffaa9e9d</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropAndDelete</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>a7b0ff4d11af49e6c2b21721b4614266</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyNotSupported</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>1f2e992aeb80cd3ae73c9505ae3fc3c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cDefaultList</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>b031217ddc12d3ffb8c14555c85a6f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimulation</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>3c6add72105ce0170138d90021da4d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cMessage</name>
      <anchorfile>classcObject.html</anchorfile>
      <anchor>f46e516dfdf6a913fe913c4c2e496cf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cOutputScalarManager</name>
    <filename>classcOutputScalarManager.html</filename>
    <base>cPolymorphic</base>
    <member kind="function">
      <type></type>
      <name>cOutputScalarManager</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>d50a79d9a610e323a83314190a4a99dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutputScalarManager</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>f47bd9a45501371995a6df0b1f991eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>f69e303a1bce73a59502bae4332f610a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>1620a2fd0d09d86ef40fa08b5d3ae3bf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>13dcac65eb4f0b964e1504fdea305287</anchor>
      <arglist>(cModule *module, const char *name, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>fileName</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>0097cd470ecd37674f5c3f6006458f76</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classcOutputScalarManager.html</anchorfile>
      <anchor>f2c45e6fde8c8e9d9d89bf080ec7c094</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cOutputVectorManager</name>
    <filename>classcOutputVectorManager.html</filename>
    <base>cPolymorphic</base>
    <member kind="function">
      <type></type>
      <name>cOutputVectorManager</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>8ea323cabd24d853050abca5c09cb149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutputVectorManager</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>e6d37630f3a2590b460f9ff27d7a981e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>180e85c7c8923337f30c4b9d2d5a7fa7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>27228b734f652d93636f607c62ec9529</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerVector</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>8364af31328cdd45c547d8564d30a316</anchor>
      <arglist>(const char *modulename, const char *vectorname, int tuple)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterVector</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>53c35bf78c71d901a07ee28be19e4b7c</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>ecaebc4986677f5086605d4c26f90b8d</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>0dac25c88abe1e9e8ad5cdd115e8e00e</anchor>
      <arglist>(void *vechandle, simtime_t t, double value1, double value2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>fileName</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>abe22c2b6e791fde5989740681e42699</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classcOutputVectorManager.html</anchorfile>
      <anchor>857105b5d3fa9a1705e6613366c3d10a</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cOutVector</name>
    <filename>classcOutVector.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cOutVector</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>5816ecec49bf277a4d6a474918089c0b</anchor>
      <arglist>(const char *name=NULL, int tuple=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOutVector</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>fdcd1d1336b3c042cfb86575cc5dae7d</anchor>
      <arglist>(const cOutVector &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutVector</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>35ad9804274402a9e78143f40d5df950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOutVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>350474be622c1619fde263de73a80027</anchor>
      <arglist>(const cOutVector &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>62cb854edf962c4ad07e60c4f613bf59</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>9936b6a142b058c479a7796ea2231ddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>7447af3d5e8e8ebef0aa74789b539a46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>b60baade93162f0f5d3d5f7302f58577</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>2542a1b2f1751cb99a134bb8f18fe279</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>8a7dddb86f9ea261a94f52bc3acf290d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>b39f3f588d6321298b73f19d78fa663e</anchor>
      <arglist>(double value1, double value2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>d3e8431b46151b8a1e7a91abe70e46cb</anchor>
      <arglist>(simtime_t t, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>6784bc6d53cbc9be078474d03df42397</anchor>
      <arglist>(simtime_t t, double value1, double value2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enable</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>c3bc82ec08d8fd408508ac3388ed7240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>04254ed125ba6147f7cb2e43665fa75b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabled</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>7d18c6b2bd83fe30627e2603178ff913</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>9561cc2920070ccf08b02a313f02d0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>valuesReceived</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>e7a3766d847b6435a988401b703bbe7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>valuesStored</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>530ed3cd5c44b0717b1512e54d3ef7c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tuple</name>
      <anchorfile>classcOutVector.html</anchorfile>
      <anchor>1e4d81554477358bad0f3d0bafbbcb2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPacket</name>
    <filename>classcPacket.html</filename>
    <base>cMessage</base>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>67e6a76c5925b788b5463b878af98ed6</anchor>
      <arglist>(const char *name=NULL, short protocol=0, short pdu=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>32f88fd547ed1bff41d7f0d4be9c347d</anchor>
      <arglist>(const cPacket &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>cPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>c3f13f1f5ce2c535d97cd9c9e02e199c</anchor>
      <arglist>(const cPacket &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>57097b33e57ea5c2ce49e2b9c4f48758</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>586108f74bafebee363878e1c27c2cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>39b1cb7779ce1a4b8ba32cbe75cdd03f</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>7bbdcd2975c8a84629e4efb128f1808a</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>protocol</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>a122e5af6e4f4d9e0586838c1ef124a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>pdu</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>48521200d081bdb53b6f079771144cef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProtocol</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>9a9af5ad15e9b3870795c114dddf3230</anchor>
      <arglist>(short p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPdu</name>
      <anchorfile>classcPacket.html</anchorfile>
      <anchor>ec535da5d02dd8a39b31dfea236f3412</anchor>
      <arglist>(short p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPar</name>
    <filename>classcPar.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cPar</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>55f0871156bc2387b3461dab17652858</anchor>
      <arglist>(const cPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPar</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>65210de06603e41f19a68c7f5ed965bd</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPar</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>34f1e6add79f821988c36eb05bd4cd19</anchor>
      <arglist>(const char *name, cPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPar</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>2e5c4866715df10306944b40a4b4d7a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>7ae2ab058a62c983f09cd21e752595e1</anchor>
      <arglist>(const cPar &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>b232869fc696abaaafabc2f868825feb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>1686cb7355efc74b9915ddadb396b6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>8b5779f794cf7da066fba383291b8ab8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>b1618b9190245a9504a0e3c0abb4b8fd</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>f532212f8cc1957aa68259b1e57f9245</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>7ce469a39d09915beee261ecd28d4d53</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>b80a7617eec3dc1c94807e0278a18b61</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>e690d063c89fec4a53a10089b4e4f8e8</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>bcb90fd2503fef812d3d83f7a3c9c25e</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>a50d3dc5c63bb89e96919798b1c155ad</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>825a88f561c8604efef9e05b9e3f6aef</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>477ce733acb7ccc107c525596848bf7c</anchor>
      <arglist>(cStatistic *res)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>9aa1f5f80483d7461d2698d435bd994b</anchor>
      <arglist>(ExprElem *x, int n)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>99469641fbbf3b9e8cbc4e3dd84dd8f2</anchor>
      <arglist>(cDoubleExpression *expr)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>1fbaf87f4aafa49e86549d6327492bad</anchor>
      <arglist>(MathFuncNoArg f)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>2eb9e7df86429cb3add3308f0a6325ce</anchor>
      <arglist>(MathFunc1Arg f, double p1)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>cd6791852e74e41339955db31d0d5239</anchor>
      <arglist>(MathFunc2Args f, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>fb86f25507870e5ad19f65e9bb44d9b6</anchor>
      <arglist>(MathFunc3Args f, double p1, double p2, double p3)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>3464b5542bf014f0b548a89ed21c8db9</anchor>
      <arglist>(MathFunc4Args f, double p1, double p2, double p3, double p4)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setPointerValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>42a01ef2d65f7a67180dc4057d52b14a</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setObjectValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>df53417460e1789e0d2d7c6a8d92aca1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>5c8a7722af52478afcb0bcec17fa16aa</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configPointer</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>d84bba4390869fc5cfd502e21aec1603</anchor>
      <arglist>(VoidDelFunc delfunc, VoidDupFunc dupfunc, size_t itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeOwnership</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ac45da52b54fc1a9e092a68039568c1b</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takeOwnership</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>73ffa098fb755aa9130a3d036308f9c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>8a60b39b04e09f9dc778ebd8d055c612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>99e0e7b8c641ae6dfcb49b46fc33dc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>afe29d2b1cece2f4b1745b46042f5fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>83c71ba1db91e4e64ff5f31855a6ac2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pointerValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>eca3a20587d46e778a7742cada551891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>objectValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>4c7a71399d18974c1d679aa77e613dac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>0bda9664659b239696dd5a68a45e5493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setRedirection</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>6f807e56e92c17e8450e0b338efc513b</anchor>
      <arglist>(cPar *par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRedirected</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>aa028206d54f84243638a842943ae19d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cPar *</type>
      <name>redirection</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>7d6cfaba876b91637e4c58c013bd003e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelRedirection</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>b71a28eced381dd2de3a7f0f1e159f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>type</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>131363b8b8d0fd5429e280734be2ef94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>cf6a488de1fab30cf2a2b079cfc47332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>f9a2f5029d799ded904f8d8150caf46f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>prompt</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>df8a9df303a414482d61aae58f7f51a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrompt</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>28cd7be5713b407c57eb48ee9e184b97</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInput</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>8a39edc1844f672f9bda645eae8080aa</anchor>
      <arglist>(bool ip)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInput</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>2ea7eabdef4dda00bd2708c49fe97bc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changed</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>4b54f4c1b58506e83ee761112c612a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>read</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>3fc9a6354867397ecae2f8d5de92fb29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>04906d868bfcb0878fd1f34649cfe605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsTo</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>7468ecbc7da48a6fe69ce278ea3d237a</anchor>
      <arglist>(cPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsText</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>9dfa538d7c51a6e94d9878ab43534fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>setFromText</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>9b0057ae949c43f8ffd8bf2da0e381eb</anchor>
      <arglist>(const char *text, char type=&apos;?&apos;)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>f61e613e63ecc31336e66caa2b5bc25e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>7c19238f9d8374f733bdd4bd629476d0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>24018a63215a90b142f73ab5809dda28</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>71392f93ab6308ae876a3792936b48b0</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>7dd8575bef9e1612eeba83bbb9f126e4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>d16173d4aa99242d57fd64c514a73dcb</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>c4aa6fda159d4e9924dc9b32f3b32515</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>cc4b24b48e37b6fa4d315bb24299e8d7</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>030e1183948a61b1e060c3ae6f9a659c</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>dfb9b6134333b6dc60c49c988511a3b1</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>71020fefa6dc58ca57402fea8786ddf0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>51ad6de8e9d7eb0c3d6ed3a8d6600f4a</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ae469013d25ddef8dd0be54f0e5f90e5</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>252262fc45673a853ca2e52306ed5cab</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>c7f6513e6aff2591f79528b88534bccc</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>b5eb3380257cb6f8bf09481fef5b8d8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>ae2b6bb263fa289646a15f94dbedf191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>1a4bc3d66385100dbad1a49b5cfb1a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>073d21c64151e1878669917816e8c085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>24274f014b68aadf73d7ebcc2ce8a2c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>80074f0bef3f6aa9aa87a5d18e347887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>1b0a0cf7ce6c30f7f29258de02130fb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>17f65741cb4600c1d8b4478922df214a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>be5eca00dd31a6dd174e5794af0a65b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>7f8215c2f7323e10efe9779d53bdaef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>6377eb4ade2c9fef6d1db8cca7ced9cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>5b9c8a5c32fac3713c64b2abae1e4ab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>c603c41bb0658ac96ecb8dae9800090e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cObject *</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>82aa1e11fbc3a17f2cb4d4db59ebc7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>0fe119ce48c303fc16cc95ce658b882e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>cmpbyvalue</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>dca270a00540d01998e74f2eb9dfb47b</anchor>
      <arglist>(cObject *one, cObject *other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeChange</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>c5fca3fa9ee220a535f15029ac5990bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterChange</name>
      <anchorfile>classcPar.html</anchorfile>
      <anchor>67dbd87845025693afc1c66cb0a27ff8</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="struct">cPar::ExprElem</class>
  </compound>
  <compound kind="struct">
    <name>cPar::ExprElem</name>
    <filename>structcPar_1_1ExprElem.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>58377fb07bb378eac2a74ab738208ae9</anchor>
      <arglist>(int _i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>d77f3dbab658540756c0d5e84d4b6738</anchor>
      <arglist>(short _i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>371e5a35a91e24c829adc8d8ac1f6b05</anchor>
      <arglist>(long _l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>37a23d157442c80d3a4e2d4884863097</anchor>
      <arglist>(double _d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>fa170e3fca31af9cb768e3ba4ef02d3c</anchor>
      <arglist>(cPar *_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>dc625fb33da4adbbdd1d7d2c313b046a</anchor>
      <arglist>(cPar &amp;_r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>47a58f4fba897a34f93b5130a0743a03</anchor>
      <arglist>(MathFuncNoArg _f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>9c844081cab31e586602384d34fa564d</anchor>
      <arglist>(MathFunc1Arg _f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>efdd934bc158b53838cc9cf0671a3e0d</anchor>
      <arglist>(MathFunc2Args _f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>21c3e8b17f749cb9b9da4bd072b08390</anchor>
      <arglist>(MathFunc3Args _f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>8c8eaff14ff94b97278e3071de032fcf</anchor>
      <arglist>(MathFunc4Args _f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>structcPar_1_1ExprElem.html</anchorfile>
      <anchor>c9bd3fedd7b35640454e168f4e50020a</anchor>
      <arglist>(char _op)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cParsimCommunications</name>
    <filename>classcParsimCommunications.html</filename>
    <base>cPolymorphic</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParsimCommunications</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>8970a3dbd796e8295b2ee59dc6e9d86d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>91c3fa2544ed79742f1a82eff4067839</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>6fbe3c30f51951de2ae8d98b8adb0d6f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>563e03a61096c797e1d89a41f848e34a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>68e8a212c04e5d543ebd88f459ce56a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>a56cea192d00729c1bc801d94f9dccb5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>cf4eccab7dd38e130fcefb1066301449</anchor>
      <arglist>(cCommBuffer *buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>0ae4574cfda5e3255be6bab0d9ad3608</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcast</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>6630d2bafff499c03071c7224b63865f</anchor>
      <arglist>(cCommBuffer *buffer, int tag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>dc0e71ae0cadb0ed32fcb7ef5a763c76</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classcParsimCommunications.html</anchorfile>
      <anchor>ade49c407ce0f9e496731d776d0d8b11</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPolymorphic</name>
    <filename>classcPolymorphic.html</filename>
    <member kind="function">
      <type></type>
      <name>cPolymorphic</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>5cabe1b160cc4329ad2ae3a3acfc3e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPolymorphic</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>705da655e2b6d45dae51629354ce7134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>fc825a2bcc0d95e19eba34adc301517a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullName</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>672ace5c886bd4835e294f9c6a82ac4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>fullPath</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>b36c62d5ff0c7cf8dabf6a0f22e6a22c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>742e879831bc965c4cffa7b294017814</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>info</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>d384951f25b2de0ea251ca291c7e1640</anchor>
      <arglist>(char *buf) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>9ea8667f399afce864128081c6412598</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcPolymorphic.html</anchorfile>
      <anchor>35266d7c7d5cf4ae62d373f02adbade4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPSquare</name>
    <filename>classcPSquare.html</filename>
    <base>cDensityEstBase</base>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>4ab2e85028a3ba815b5d8b89e9e9c312</anchor>
      <arglist>(const cPSquare &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>0281c833b1115b1353573c4088314f70</anchor>
      <arglist>(const char *name=NULL, int cells=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPSquare</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>869c0e272bc7aacd2a1f10fbf23c88dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPSquare &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>506a67aa2e8abd36fe21cead74453536</anchor>
      <arglist>(const cPSquare &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>ec630bae0ef875afa409e0cce9fbaf7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>b8ef9cfe57440b4ee4e73bc309ed53f2</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>80e1711ab0419bcff599e3762e28db64</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>8bb0f35cbe7112444c6e9e229158dcfe</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>365dd0bc668dbe2de69001885216744e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>ff6d983b6ce376a7da5dfd491df23452</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>f302959b1f53afcb3a9a5328d6b49cc7</anchor>
      <arglist>(int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>b9383b79a295c394486d326185ade89c</anchor>
      <arglist>(double, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>1fb9616b091058db303da4ef3e657e03</anchor>
      <arglist>(double, int, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumFirstVals</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>52c3272a27f23ef970b563ac74aa55f4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>cells</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>200d57ba3d8018097a169f96497dde27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>basepoint</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>cb9b3c0eeee58f9fb0b5bddd308b436e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cell</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>5fab1387e7f948fe52ecfbd389e1a033</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cdf</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>c3af00baf1dde02c2da73c52e6a36c50</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pdf</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>d169db89fd83bdb5e824f2f7a4a00db6</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>84c94957be89649ccbc55d8eb6fc2b6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>e3e1eba428e2ef2746aa9da4aee983b3</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>5e370fe0ecf0a0da8edc1726cca9eaf5</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcPSquare.html</anchorfile>
      <anchor>681ff30c9d2ee25ad3d24b8f94c5390a</anchor>
      <arglist>(double val)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cQueue</name>
    <filename>classcQueue.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a26c68a131688ad11ecebc14388c9869</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>e517620ecb8e02a7704c1de182954d56</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>55fd90b4e4146b5abfe169a9593d61eb</anchor>
      <arglist>(const char *name, CompareFunc cmp, bool a=false) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cQueue</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>a8e2354f04566e2b561b32432d6adad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>c45aaa9fb2b82bf714540a67466a4c18</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>6aab48e576366e15f759b162bce57333</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>5cd9736cc3368fc2b318a5f5ddd0636f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>5c58b506f9d9f91b0ef663b0f5eb342a</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>f2ccd4500bc289c6aed89f54107c1a19</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>7f2d40e7a5fa8e0350de29c4b6ce4f56</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>e91990905d57354b161f5aa58358a8c3</anchor>
      <arglist>(CompareFunc cmp, bool a=false) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>1f002a75ea582ffa383323392819d99a</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>73a52e418e46089eacf5ece6f5331368</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>aaa761c485de85682b1e553f0c8a1a42</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>e14fb12fc481ba468fd34c22dbd433e1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>pop</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>0c402c76b44590e2e97ce5db8eca334a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getTail</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>cd9e371826a719d3e5641033d84af159</anchor>
      <arglist>() _OPPDEPRECATED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>b007a57b55f643523c2e7f3d3f2d42cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>head</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>c7cc9c739a9c7d9aa0f85d36fd2d9f08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>tail</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>cd6c79e27804a2b43192b173dad25f7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>length</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>bddca1bd90d728d6588b27699938d9a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>afc18887a0b8f318933c1da869f0822e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>get</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>5fbf49ac8e66d3ed32f627175426fab7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>89bc4e77c647cf4f903e183d447e366d</anchor>
      <arglist>(cObject *obj) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeOwnership</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>bf2a0c400b5f25416062027ec779c479</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takeOwnership</name>
      <anchorfile>classcQueue.html</anchorfile>
      <anchor>de97826ac93849380d89b98e87e927b7</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">cQueue::Iterator</class>
  </compound>
  <compound kind="class">
    <name>cQueue::Iterator</name>
    <filename>classcQueue_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>08e2ad294b8d0c0876b2387fb257d1c9</anchor>
      <arglist>(const cQueue &amp;q, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>0ac888210bcdfca6270a5e377191425e</anchor>
      <arglist>(const cQueue &amp;q, bool athead=true)</arglist>
    </member>
    <member kind="function">
      <type>cObject &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>d45a46b805d89f0ea9aab24d9fbb3db8</anchor>
      <arglist>(int) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator()</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>62719a69c6c3bf218cdb47defc5d3807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>d41b4408db62d45bdd9c2873bb97584f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator++</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>27badc879e2bac617f4f963cec61093f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator--</name>
      <anchorfile>classcQueue_1_1Iterator.html</anchorfile>
      <anchor>3d6f18996e6bf822177cbbfbe384ac6e</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRealTimeScheduler</name>
    <filename>classcRealTimeScheduler.html</filename>
    <base>cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cRealTimeScheduler</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>956410008de19331cb68f288cb7e93a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cRealTimeScheduler</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>cd24ef069c8e7cc3bb5bc19e3104dc86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>14af5eb1807cdfe871fb3ed641869027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>6840ad3d9f1582a0c9051a1cef7b939f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>a7db86c3bfe9792194ce0aec35503293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcRealTimeScheduler.html</anchorfile>
      <anchor>9643e157d27ca16a12531dd845f3d2b9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRNG</name>
    <filename>classcRNG.html</filename>
    <base>cPolymorphic</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>dd8ef825384f1ab94430adcb835114bf</anchor>
      <arglist>(int runNumber, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>13b9af8a0de12cc481b9d27d5bbb28ff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>numbersDrawn</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>dcc7335a113d52472d62574f7d7c42aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>d924cad20293a7ed80d356b8dd063a55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>4e5c87814d13024d5d86946909c7abb2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>9bc7056e83715aa0a4699c4886d69cab</anchor>
      <arglist>(unsigned long n)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>b265aebdf48485df86092e9be31386ff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>e5405c86e3658c2232792b316a872b81</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>44aa1878a9bd7c7236ba514ab1446a52</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleRandNonzIncl1</name>
      <anchorfile>classcRNG.html</anchorfile>
      <anchor>6c2f679141484343d7cb5cc60ff17452</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cRuntimeError</name>
    <filename>classcRuntimeError.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>86506bc7939cf16c2437ba9f126f0da6</anchor>
      <arglist>(int errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>8090149405fd25ff4b8e84e360bfb3b4</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>28f8abdd0d2cd9854052a36d7bcccc1a</anchor>
      <arglist>(const cObject *where, int errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classcRuntimeError.html</anchorfile>
      <anchor>a7735ad35e64f13776ed3c756b28787e</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cScheduler</name>
    <filename>classcScheduler.html</filename>
    <base>cPolymorphic</base>
    <member kind="function">
      <type></type>
      <name>cScheduler</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>54fda844583bc9ce475d33f95e9db4f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cScheduler</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>57718b1ef8d9e536ee53701435acb654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSimulation</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>08336db9c2ff46dbe1d6d516cb0316fc</anchor>
      <arglist>(cSimulation *_sim)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>648cabfaf6091ddd6d00464b87ebc6e9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>1a67600f9b0a0daa0539aadd779b9cff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>7ab75e1152842ce482c0ece2e70bd783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcScheduler.html</anchorfile>
      <anchor>80f30744912bd157280f41b4573f4f9b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSequentialScheduler</name>
    <filename>classcSequentialScheduler.html</filename>
    <base>cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cSequentialScheduler</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>c5806d4b43308ae89ba35c284037efef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>2569ec13e2a6ba80979fb6abb33bccde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>6960d9dec3df5a98ab6d7f7a3d64161e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcSequentialScheduler.html</anchorfile>
      <anchor>c173601ca5d4d2ad03cf36d7262b007b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSimpleModule</name>
    <filename>classcSimpleModule.html</filename>
    <base>cModule</base>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>b198dba50ab08ca866f860a05179d28d</anchor>
      <arglist>(const cSimpleModule &amp;mod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>73cd49242b12142d1bcf9d8e44725d20</anchor>
      <arglist>(unsigned stacksize=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>308e21936981c175176d5dfceaf3b3b2</anchor>
      <arglist>(const char *name, cModule *parent, unsigned stacksize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimpleModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>c71066adcba7babfa8fe6295032c1dcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule &amp;</type>
      <name>operator=</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>3537b81212dbf183be7bad32898a0197</anchor>
      <arglist>(const cSimpleModule &amp;mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>09c10b4a7cace8ecf63665bc5a2095d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>1fbb4e8997b557f8e688284bda26ea48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>e6c2cca1385f7e0cea5c5a100e4cfb69</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>da3fe83c75268f2cae40959d6b2dc64e</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ed071be3b66c9a695b51bfebd19c5aa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesActivity</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>cd1545693d0f3bdd452e2aa5cbe6ebcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>simTime</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>61bc6129640613bfd9f8017eee3b5404</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhase</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>62302bedce7140ea2d7c635ad10a2cbf</anchor>
      <arglist>(const char *phase) _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>phase</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>411161406e3461ddd57b0ea3526dc64a</anchor>
      <arglist>() const _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>snapshot</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>f0f5de45e7b2bdc1da7c21bfe09255c9</anchor>
      <arglist>(cObject *obj=&amp;simulation, const char *label=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>breakpoint</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>d4a681a51baef7c67eb1b622da9c031c</anchor>
      <arglist>(const char *label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>df54482768d9a436eefc9eeba5c8974b</anchor>
      <arglist>(const char *phase=NULL)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>94590ba6481116f29f4c43d00733deea</anchor>
      <arglist>(cMessage *msg, int gateid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>1fc328c9d34cf6262b2023696a18d191</anchor>
      <arglist>(cMessage *msg, const char *gatename, int sn=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>9e5da3f2aecf61604ad649dff3ab88f4</anchor>
      <arglist>(cMessage *msg, cGate *outputgate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDelayed</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>7800e4d67edee267b036d54c94900cb1</anchor>
      <arglist>(cMessage *msg, double delay, int gateid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDelayed</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>689cf858e613e6e3d231edae7c111d6e</anchor>
      <arglist>(cMessage *msg, double delay, const char *gatename, int sn=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDelayed</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>4383c622436c5e3939985b28b0801e48</anchor>
      <arglist>(cMessage *msg, double delay, cGate *outputgate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>4bc0db4a64e2d5cc602c513ba7dcb086</anchor>
      <arglist>(cMessage *msg, double delay, cModule *mod, int inputgateid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>0a78610939844c0e66cefd637871bb2b</anchor>
      <arglist>(cMessage *msg, double delay, cModule *mod, const char *inputgatename, int sn=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sendDirect</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>71ff2d26ec612d9a43942dc1b7fe3eae</anchor>
      <arglist>(cMessage *msg, double delay, cGate *inputgate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scheduleAt</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>29a64f1f0c560ac75494940d5c7a048d</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>c6dbd3f95eef46c010ab107f0eab3315</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancelAndDelete</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>59d46fbc9a77cb3e8164b0f624a51699</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>receive</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>e67be4c6ee87a9b09129e81c866a2b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>receive</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>64c0ef9d9a844c062ed58d9837f281c0</anchor>
      <arglist>(simtime_t timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>c049793c0ca1e6b73392d596e7f32e85</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitAndEnqueue</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>b6b2100ef4e33b2de7fa941b1d610375</anchor>
      <arglist>(simtime_t time, cQueue *queue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>ec80f668610336197e6703fd5ebeeb8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endSimulation</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>8713bf9b4d4970fcfe94995dcb42ce9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>120a4b87297370dea4c4d0c4ef0e7985</anchor>
      <arglist>(const char *fmt,...) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordScalar</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>53b3b1117ea76fa28a542ec8fff55804</anchor>
      <arglist>(const char *name, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>stackOverflow</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>8a0a7aeba1d1b0494781d070b93b36df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>stackSize</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>d31d4604f7a55dda71486e4ff58cec3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>stackUsage</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>a6e49d22e38dcb5566ac3e1c2051683e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>moduleState</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>98412e6f81b6cf0571b34414553c73af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>e7367768a6ad61a0e2256635e1ef6de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>c1a639fd9b931de297477fca26341650</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cModule</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>37aa51760d5f85b54d00668308b926c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimulation</name>
      <anchorfile>classcSimpleModule.html</anchorfile>
      <anchor>3c6add72105ce0170138d90021da4d97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSimulation</name>
    <filename>classcSimulation.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cSimulation</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a5172a1e88cf3238d0f1455e5541775b</anchor>
      <arglist>(const cSimulation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimulation</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a638d5a3f30d74779b880b3d794f4d34</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimulation</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>482bfeff90e9774c27842fd986730f9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>2c4fe352993f5f0276ca1e1cca0150e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>19281d9200ef473503301e4fee865148</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>616316eb40a76add79fe2488ad95d4e2</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>fullPath</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>b9423db3690d363d508e2dc20ed867b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>fullPath</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>6d3e5118e8328f819b40dc5a8d6cf5e9</anchor>
      <arglist>(char *buffer, int bufsize) const </arglist>
    </member>
    <member kind="function">
      <type>cSimulation &amp;</type>
      <name>operator=</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>0ade3021a3eb907d27762554397f74cc</anchor>
      <arglist>(const cSimulation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>registerModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>2467255a86d7db446110d792e7a2df5c</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>6b178f0628d904030e2ed88c2b04d1ac</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lastModuleId</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a3973c12aa55d8268c877dbb56fe9aa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>moduleByPath</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>a9e73fb8b24ebb3994c61a6079b1dad3</anchor>
      <arglist>(const char *modulepath) const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>62ce50dd5feed5aab6384f2760997d4f</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>cModule &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>cc4e208392a4e3f17f542a088660cbfa</anchor>
      <arglist>(int id) const _OPPDEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>11b4c248450bab930617287ec7deec9b</anchor>
      <arglist>(cModule *p)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>systemModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>0203c880a15310a2bd8e982f23944e59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheduler</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>0d97fed871b0f26dc834142a68e44818</anchor>
      <arglist>(cScheduler *sched)</arglist>
    </member>
    <member kind="function">
      <type>cScheduler *</type>
      <name>scheduler</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ae5b0b515fdebbbbf267440ccb87acc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadNedFile</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>31e540eae281dce56c3ab4602d53b47f</anchor>
      <arglist>(const char *nedfile)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupNetwork</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>1e4000f9fc7d2787cfd1aa1227336c08</anchor>
      <arglist>(cNetworkType *net, int run_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRun</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>906a49f03292339127fc228b88440681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFinish</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>4f25fe094f9693d4c3096406e3415ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endRun</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>10432b325dea6ca0f62b66f389da7222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNetwork</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>366756a8aaaacc40aadde619b6f84573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cNetworkType *</type>
      <name>networkType</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>83af00ea2a1535da310c737ec8fe183d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>runNumber</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>e0a9fe15885d128e67121c2aae8e156e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimTime</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>460389d29ffc3e9c0f6a2d95e35a29a5</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>simTime</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>faba347b505761b391f5d631efa0ffbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>eventNumber</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>46f7da701c4c104155a447568175ea9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>selectNextModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>b2e4d1c1e9b3a4977e461b086ccbbee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>guessNextEvent</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>64b53a2b8a476243b4f45c9c298d5ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>guessNextModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ec01659570a4569d7979752d42d81696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>guessNextSimtime</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>d83678bf9986dfa44dbbb9635785e859</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doOneEvent</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>0699bb8cf59fc88d19b99808ba8b8019</anchor>
      <arglist>(cSimpleModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferTo</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>ae6078fbec235fcc136a33ab5356612c</anchor>
      <arglist>(cSimpleModule *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferToMain</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>4e955ec45e74e0f4a289d2d5e14c1923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>926c8051d8225ef1e1bd7512cbad0e86</anchor>
      <arglist>(cModule *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextType</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>4f19a0c3dc9427eab363356dd2974b9c</anchor>
      <arglist>(int ctxtype)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalContext</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>65a75b0d019fedb364935bce92a61441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>runningModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>2ec713b043312f083e1d5817f7ecfca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>contextModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>542adfe68f957b582e6867a965f8515b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>contextType</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>e787c0ea9712289cf7964d2030438720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>contextSimpleModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>80e2228bc80a1b19461b9efced7f0417</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>2d24fbe01f22383338df558db322dda5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>snapshot</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>784ddd34b1a2576f60b5982529e02625</anchor>
      <arglist>(cObject *obj, const char *label)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cSimpleModule</name>
      <anchorfile>classcSimulation.html</anchorfile>
      <anchor>6e6b6163d95b48ed0e0f953153b2febd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSingleton</name>
    <filename>classcSingleton.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>cSnapshotManager</name>
    <filename>classcSnapshotManager.html</filename>
    <base>cPolymorphic</base>
    <member kind="function">
      <type></type>
      <name>cSnapshotManager</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>c599ca35acb13e2ec0f58ea179826a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSnapshotManager</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>e9a08c97c02296029b202f5efdd6ced2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>4ddf97740f46a6263c246ba5e3dfeff1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>0e8f54d153afd756736c7e220374ff60</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>509fd69394b564363d3616289ae33924</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>c91b31c182f1c3b24ba3ae8e611fd54f</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>fileName</name>
      <anchorfile>classcSnapshotManager.html</anchorfile>
      <anchor>4188b6172cd73d81650ce2ed080aacba</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStackCleanupException</name>
    <filename>classcStackCleanupException.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cStackCleanupException</name>
      <anchorfile>classcStackCleanupException.html</anchorfile>
      <anchor>7b8cb032ed9b1b547c7f654d693180e3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStatistic</name>
    <filename>classcStatistic.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>f1b8518d87e931dbe476b8426ffbbbbc</anchor>
      <arglist>(const cStatistic &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>33aa620e1c8d9919f7cacc71a27c15f6</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStatistic</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>98228620a56854723400e5601b645fe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStatistic &amp;</type>
      <name>operator=</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>f1091c28f0b1cc8ac094c13ab9737f7e</anchor>
      <arglist>(const cStatistic &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>17e0088b7f99a91021360a7052264283</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>4a79081917f2cd8797290e0765bf2985</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>8f0671903cfcc873af803c2c79764434</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>5f13df3d7d0bf0954b10b9285c1189ae</anchor>
      <arglist>(double val, double weight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>65b16308efd84d24c795ff77f55e2f46</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>b0411f1ce700f36f8e649c74e72efe86</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual long</type>
      <name>samples</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>db2fd6fc1ee5d869fb2158a8ce7c59a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weights</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>8111f0c88340dff1c6a19211b069495d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sum</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>d0e29b002335bf604d0656d285dcb5e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sqrSum</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>d35503a3f7cbfdfa8545e5445a2e3b4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>min</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>8d36e5478971bec4051232d49d0f4dd4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>max</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>db540680c5545f78045e9a0e1fdb6e2a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>mean</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>43cf8cb9d33e822efaeacf407509bf15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>stddev</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>c46e57c66a78c44385d4edf807a4b4f9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>variance</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>8d3f57bf601a6a150f1da34fb1d96571</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransientDetection</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>eec5219f3bd69cd1c7a12e4ff90eca3a</anchor>
      <arglist>(cTransientDetection *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAccuracyDetection</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>e88d62e84d94c201459275d05d3209a5</anchor>
      <arglist>(cAccuracyDetection *object)</arglist>
    </member>
    <member kind="function">
      <type>cTransientDetection *</type>
      <name>transientDetectionObject</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>baa7377e6bd82c14a2c26554b7964f31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cAccuracyDetection *</type>
      <name>accuracyDetectionObject</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>313e8c73fa48137ae99686d270ffa973</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGenK</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>65518185c8e77aceb941ee67d6ddcb96</anchor>
      <arglist>(int gen_nr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>d93cec6491a2d08e9fe319bda5f76bbb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>cc60f0394c175f9e51f5188630c3e55a</anchor>
      <arglist>(FILE *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>7a2a6df2039a2ad50a99c7525afc1619</anchor>
      <arglist>(FILE *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classcStatistic.html</anchorfile>
      <anchor>508b681f1cc9e70af09701ffe50fcd16</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStdDev</name>
    <filename>classcStdDev.html</filename>
    <base>cStatistic</base>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>854244eba9dad00dfe15955f139cf73b</anchor>
      <arglist>(const cStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>d78e3948b6d64b65ea4b2f72ab909778</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStdDev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>cd53e74f06b12020f9c4aee3e0bf3a53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>8b2112a447ec0a8c3ade292ec6f92399</anchor>
      <arglist>(const cStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>cc7d65b628a749db73d229f756aee8eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>7c74ec4e295f5c92e2530d70593dd588</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeContents</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>3f42a8daec3a166d70bbb955205d7b3d</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>8a6914f0b09d9f69ca8a8d1da5ff8098</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>a1130ccf372dec51fe236d940546eeb8</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>5bb0d4cdda04e058a25423fa544cc05c</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>samples</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>f73680b063a6957f5719508f1049cf84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weights</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>53059b7971600bbb58797960541de95f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>sum</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>4eb82f855ffd9c4983c3a861faa056d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>sqrSum</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>7cca5271e3075b786641bfde0c014d25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>min</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>f1e6611917388518bccee41d5d5823b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>max</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>8a19fc5a094d907ddfa1002e859cbaa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>mean</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>e85279751bd157130e3b4d36045d067e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>stddev</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>142d227355fbfc07d3df165793ada469</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>variance</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>828c5c7afe7d3727030fd164bc5f79b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>5a14d103ec8bbfc3c0737b26d1aece3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>1a1242e898dd3f929fd0f1adbbb2bb17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>3515fb39dc39dfa183cbb64042352502</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcStdDev.html</anchorfile>
      <anchor>1a7ada29a27c4d0de885882f6de429b5</anchor>
      <arglist>(FILE *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cStringTokenizer</name>
    <filename>classcStringTokenizer.html</filename>
    <member kind="function">
      <type></type>
      <name>cStringTokenizer</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>5e62d251f3710df274c51bdb3494e876</anchor>
      <arglist>(const char *str, const char *delimiters=&quot; &quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cStringTokenizer</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>9efbb483d5136864e2cb5f53164a9843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelimiter</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>186e74690c84130fe7215540ac56a3df</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMoreTokens</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>f8805776a4f9d0edeb9f669488897cec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>nextToken</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>012468a6d662c579f83a5e2d9304184c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>asVector</name>
      <anchorfile>classcStringTokenizer.html</anchorfile>
      <anchor>8b1a9ea250b0f88a67b8aee444ed3285</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cSubModIterator</name>
    <filename>classcSubModIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>cSubModIterator</name>
      <anchorfile>classcSubModIterator.html</anchorfile>
      <anchor>424edfa72b7026cc0739a8bcaaaf0a1d</anchor>
      <arglist>(const cModule &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcSubModIterator.html</anchorfile>
      <anchor>59fa4c171bc07dc1954d1a341d0ad67f</anchor>
      <arglist>(const cModule &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>operator()</name>
      <anchorfile>classcSubModIterator.html</anchorfile>
      <anchor>bd1d264742026fd56699b31f09d3754d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classcSubModIterator.html</anchorfile>
      <anchor>a4d8fb42bc48f00cda79d040a788d5f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>operator++</name>
      <anchorfile>classcSubModIterator.html</anchorfile>
      <anchor>d68fe12d1fe23878762e937cbed889bc</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTDExpandingWindows</name>
    <filename>classcTDExpandingWindows.html</filename>
    <base>cTransientDetection</base>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>2c503559f9b980a7a7600fee54dd7286</anchor>
      <arglist>(const cTDExpandingWindows &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTDExpandingWindows</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>06efa254338aa2722a8f779a618402bc</anchor>
      <arglist>(const char *name=NULL, int reps=3, int minw=4, double wind=1.3, double acc=0.3, PostTDFunc f=NULL, void *p=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTDExpandingWindows</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>ab8deab17d71bd13105d0f61454ed1b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTDExpandingWindows &amp;</type>
      <name>operator=</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>dba0f06432d34dbe142db6754e7399f2</anchor>
      <arglist>(const cTDExpandingWindows &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>4e5d095ea4efa40a065ab0a0a35ee299</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>82758c9d954381f61c1221978ab67fb2</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>c176d541f70e20985ac8d0ebfea54be6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>9de9afb49502da6143d3ce14e11198a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>deb9b979ac045178c1eab0c614227ace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>683928ce2122a8c37817e82a6dbb438a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classcTDExpandingWindows.html</anchorfile>
      <anchor>1732bad9228498f19f5de054d787ef62</anchor>
      <arglist>(int reps=3, int minw=4, double wind=1.3, double acc=0.3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTerminationException</name>
    <filename>classcTerminationException.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classcTerminationException.html</anchorfile>
      <anchor>3c7f7dc9e524a103fb769248ff357147</anchor>
      <arglist>(int errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classcTerminationException.html</anchorfile>
      <anchor>9c5105c443602a4bf5a311e00992caa9</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology</name>
    <filename>classcTopology.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a540fd27dcbbd67714c1eb46980c049d</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>6b4430e9e3a4b3ffe346d8dc85e29987</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTopology</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>97436f45bc7fc20ba3802d11a4cfe173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTopology &amp;</type>
      <name>operator=</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>f9ebab8c0519c82df3f3e358ffd035b2</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>f00bc1333f69a101b6a3c834a8648b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>644049ca8239eb389fe20a49e3d3c428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>307e96a7395408ff35a634a2b392c702</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>a67c6ba4eb190170cc2938a3ec5fa7ef</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>b54ddd5338f1f14400051f69d51004c6</anchor>
      <arglist>(int(*selfunc)(cModule *, void *), void *userdata=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByModuleType</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>413fb7a30bfd0a6817017b6dcd9bab58</anchor>
      <arglist>(const char *type1,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByModuleType</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>b0cf99532b60dc0e6518814b1b4f7387</anchor>
      <arglist>(const char **types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByModuleType</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>42304b77a2f406913001dce36e92ad0a</anchor>
      <arglist>(const std::vector&lt; std::string &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractByParameter</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>d4b97e6097a3193e1be9e6aa201ffc17</anchor>
      <arglist>(const char *parname, cPar *value=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>7d96a698039156fb857a9ba72a41379c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nodes</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>fb39a5974cded1e32d7218a2ec723482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>node</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>dfaac9be379f918b3cdfd3ac3ac83338</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>nodeFor</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>dd6978b9b6cf87ab4268e6937983a2b1</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unweightedSingleShortestPathsTo</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>f5a1bc70570bbdc400249be5af9d0479</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>targetNode</name>
      <anchorfile>classcTopology.html</anchorfile>
      <anchor>e76091929c271a8e1f7b35df99b62e9a</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">cTopology::Link</class>
    <class kind="class">cTopology::LinkIn</class>
    <class kind="class">cTopology::LinkOut</class>
    <class kind="class">cTopology::Node</class>
  </compound>
  <compound kind="class">
    <name>cTopology::Link</name>
    <filename>classcTopology_1_1Link.html</filename>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>4073963d0fac54c02b7ae22d471dfb42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>05d0cec24b7c5d152d7de0428a8341f9</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>65a00c37196b2a18e739841fdee77cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>02b3c6a76945a2d790cc08f02b28fdc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>884440c3db68066bbca7ae683441c114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cTopology</name>
      <anchorfile>classcTopology_1_1Link.html</anchorfile>
      <anchor>0c74f5a58ad12fc5c99980f5ea4d9705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::LinkIn</name>
    <filename>classcTopology_1_1LinkIn.html</filename>
    <base>cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>remoteNode</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>d10dde99ea26a5e66bd90d7151510d90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remoteGateId</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>b4a115982976613cee59c1885974e6a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localGateId</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>e0ceb46ac586fa5c71702bcfade293da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>remoteGate</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>f5266bdcdc526e6877c9a0a7d9807721</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>localGate</name>
      <anchorfile>classcTopology_1_1LinkIn.html</anchorfile>
      <anchor>8a37ad761d7b600c3698319d3bf000f1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::LinkOut</name>
    <filename>classcTopology_1_1LinkOut.html</filename>
    <base>cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>remoteNode</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>b3ca9d6a33705cd2392b035bd98f1000</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>remoteGateId</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>2f0f4aa8dd2c27357ed5e8e819e733b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localGateId</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>8c7157839edb11f09a9849227afc3830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>remoteGate</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>e132d3f825eb92d41ca438ceafe236d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>localGate</name>
      <anchorfile>classcTopology_1_1LinkOut.html</anchorfile>
      <anchor>6241849d3256dc1ee7a66f2a33fe2bf1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTopology::Node</name>
    <filename>classcTopology_1_1Node.html</filename>
    <member kind="function">
      <type>int</type>
      <name>moduleId</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>9a1801b655d406a2410ec521d6f0431b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>1a5052d173793c224f4688ee95bfc130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>5a979c098faf71b7d84fa84657310318</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>93d16782ad61cbbbc91af58b39659aad</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enabled</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>f7c19604f577d204a63afa5b69943191</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>46433904c656e2a171eec7010825c4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>dd6108ece6afc339526f228d1e6ef13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inLinks</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>0656f82bbb348481252cc9a478b747cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkIn *</type>
      <name>in</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>cf7a85112eb38aa784dd3c545c4bee81</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outLinks</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>db4b7a9700c0df2dc0a35adf19cc1691</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>out</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>98fdd3d09d593e934026be0ad3e2ad7e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distanceToTarget</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>bd4462006cc577a4d1d40fe48ae5c066</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>paths</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>c8dd0c21ee110c14787cda6db62fd887</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>path</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>8401f51e21f47c5be2cc5f60b69b7bb6</anchor>
      <arglist>(int) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>cTopology</name>
      <anchorfile>classcTopology_1_1Node.html</anchorfile>
      <anchor>0c74f5a58ad12fc5c99980f5ea4d9705</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cTransientDetection</name>
    <filename>classcTransientDetection.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cTransientDetection</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>b0651d583de67785a48a84956568cec2</anchor>
      <arglist>(const cTransientDetection &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTransientDetection</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>5fd74b0f005467a1aeca2a7920e72d7e</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTransientDetection</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>3225b5ebcafb1b8edaf284fc58b72b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTransientDetection &amp;</type>
      <name>operator=</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>9c70ebcb4f6b2e5e4824231261135792</anchor>
      <arglist>(const cTransientDetection &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>1e739b4323569aef81dc5a1363aa637f</anchor>
      <arglist>(double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>detected</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>998b7008254db8febe67cc2687ef281b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>5ea081cd63666c0bf6794589c2badd76</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>4a7e75b50d22da5182a341acca4c84b9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>a2337bbd289831acb83590030dd3219a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostDetectFunction</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>9c2a78672e559c7436826493326fb567</anchor>
      <arglist>(PostTDFunc f, void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHostObject</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>2126b3a802fa373cab8d81313576d591</anchor>
      <arglist>(cStatistic *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStatistic *</type>
      <name>hostObject</name>
      <anchorfile>classcTransientDetection.html</anchorfile>
      <anchor>f9aa7eedada2cde5b50b9f2da6c0eb33</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cVarHistogram</name>
    <filename>classcVarHistogram.html</filename>
    <base>cHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>e03257448f4154279ce9124413135826</anchor>
      <arglist>(const cVarHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>6c05be75271d551279d283a41f9b8eea</anchor>
      <arglist>(const char *name=NULL, int numcells=11, int transformtype=HIST_TR_AUTO_EPC_DBL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVarHistogram</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>e73abea192a9698d5c8504e546b28573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cVarHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>1ee1ff868db540c7f0c73a8844593e5d</anchor>
      <arglist>(const cVarHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>894d3e353f5b3dda6ab3597e7780c8a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ae1e916b166ce3c490dbc645894f829b</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>336376576303c8c7b0c6713f568c01f0</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>73ba0a64920b47bf9b8060af9252b69b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transform</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>417ff6cbb791083a18ffd0b8e387362d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectTransformed</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>c3e6085534ed5da99d6d6e1122e1083c</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>random</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>5a1abf46d8d087cf2357cac4c32ac963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pdf</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ccf4b7e7f2bb2d8c207901e1aac461a6</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cdf</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>952fa8ef69a6c6be5f701e6ed24626bd</anchor>
      <arglist>(double x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>basepoint</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>642b64ac64c49b63a412677248c7db9e</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cell</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>ebd4c2b5af70c45bfee2e3606e239813</anchor>
      <arglist>(int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>aee7d41009a609b13a4b829a39c1b30d</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>a726ae998777abe0394e34b2c1ed0f9c</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBinBound</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>f3ef4a68db91e0b677c7d31f79d9d1ce</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEquiProbableCells</name>
      <anchorfile>classcVarHistogram.html</anchorfile>
      <anchor>3e138354e1221092b7d94a05facd6fe5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cVisitor</name>
    <filename>classcVisitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVisitor</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>4dee38a895cdf805bc5f2d64cd791793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>process</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>53f3fdaaacc8a823780dd34f24f57fa8</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processChildrenOf</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>a73997abb2f68efb6b24911b40fcdda2</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>classcVisitor.html</anchorfile>
      <anchor>cb24dffe98329aa11479419c644ccdb4</anchor>
      <arglist>(cObject *obj)=0</arglist>
    </member>
    <class kind="class">cVisitor::EndTraversalException</class>
  </compound>
  <compound kind="class">
    <name>cVisitor::EndTraversalException</name>
    <filename>classcVisitor_1_1EndTraversalException.html</filename>
  </compound>
  <compound kind="class">
    <name>cWatch_bool</name>
    <filename>classcWatch__bool.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>4a269e8074efb1ef2e4b140ed442a06a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>b050ad51fa48d510b81468bd29a72c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>2fb4e045f4069acbcf305937d40924df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__bool.html</anchorfile>
      <anchor>b454770715c4928e204159c0cfeea665</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_char</name>
    <filename>classcWatch__char.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>a7e1e0bfca80e72e55e5982f2f0baa13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>dad7bac551ff2b54d3879203bad156ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>b8e4d6c1f8fcbe82656963b9a0b7e0c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__char.html</anchorfile>
      <anchor>9f9ef7768e6407b2122543fec0cde75c</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_cPolymorphic</name>
    <filename>classcWatch__cPolymorphic.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcWatch__cPolymorphic.html</anchorfile>
      <anchor>20a1933dd7ff110777a089d7425bee1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__cPolymorphic.html</anchorfile>
      <anchor>081a03f1752fc70c714267ab3723ca3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__cPolymorphic.html</anchorfile>
      <anchor>5f886b0cf9fc44118f2b2b6c4577b090</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_cPolymorphicPtr</name>
    <filename>classcWatch__cPolymorphicPtr.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcWatch__cPolymorphicPtr.html</anchorfile>
      <anchor>e3e69a729aecc62bc531a862c0d8b0f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__cPolymorphicPtr.html</anchorfile>
      <anchor>3cb85f8aabc00e0b93f4cad219599576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__cPolymorphicPtr.html</anchorfile>
      <anchor>4f1167d3f1e4238523b6834c1d178c57</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_stdstring</name>
    <filename>classcWatch__stdstring.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>380244bc2f1714b3717f50488e1fec75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>f25c123ae0bfe059a6b281cd972af655</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>653ff0414e3d6846c54f80a8a76064ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__stdstring.html</anchorfile>
      <anchor>958f5edd1e7ba42156f1de07cbcc8e36</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatch_uchar</name>
    <filename>classcWatch__uchar.html</filename>
    <base>cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>className</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>cce72dfe1f0301414e174338922f67ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>ad33d2ecd2b4dbae8807558f444ff924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>e4ecc9f4a4316b80942e9249b05876f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatch__uchar.html</anchorfile>
      <anchor>352b7b4311178453307a59c7a446a6a0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWatchBase</name>
    <filename>classcWatchBase.html</filename>
    <base>cObject</base>
    <member kind="function">
      <type></type>
      <name>cWatchBase</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>1891451ef8355b0cdb19fe31537ab301</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWatchBase</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>93f46935a2a33e3dddba0e4987ceb16d</anchor>
      <arglist>(const cWatchBase &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>cWatchBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>ee34ffdfecad5cd539dbc6d2afb2bcce</anchor>
      <arglist>(const cWatchBase &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>4943d759f8f1e5aa1da82c09066e66e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>ba8b006675fc5d4872e37dd65c82ef94</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classcWatchBase.html</anchorfile>
      <anchor>aff3b84dd36e98fcd9fa0defb58c9f87</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cWeightedStdDev</name>
    <filename>classcWeightedStdDev.html</filename>
    <base>cStdDev</base>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>c880787976195ff37cd810b0558293d0</anchor>
      <arglist>(const cWeightedStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>cb181765c15e22af8caaf2cdf75ed637</anchor>
      <arglist>(const char *name=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cWeightedStdDev</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>8c169a60fa3ac455e9fd5ce7c3250f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cWeightedStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>052caf694a6ed751aa1d4761ec6d5f3b</anchor>
      <arglist>(const cWeightedStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>43fae6b987fe314fc4b6deb6f4f9e5f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netPack</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>29c0745e5b27e535ba78ac854960d0a0</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>netUnpack</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>2192f0a7ede87f91f2d96f308164e682</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>7776d1d504f9d02d75c0d03c7fe81201</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect2</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>8a080c8655e03502ef22c7ef93aa9cb7</anchor>
      <arglist>(double val, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearResult</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>e2330ba2b3ff6c5782efb09f0814821c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weights</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>8a4d21c28f0d791d8401b081ab94d047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>mean</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>0b2d1bf9431e5d3d6f86a16c9f71b075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>variance</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>0262f7ee21f5e884aab2424aaf1c0316</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>53e2204f1c3f765692fe9b757666ee8e</anchor>
      <arglist>(FILE *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classcWeightedStdDev.html</anchorfile>
      <anchor>5f74795738987e2bdb12d8678558d130</anchor>
      <arglist>(FILE *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cXMLElement</name>
    <filename>classcXMLElement.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>b31f59487abe87dc265bf1b4393db722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>217fb5ebdbfd2d8384a9c7ef5e75be76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNodeValue</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>400e61ce035da6db65695bf3c3564e09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>3ad740721da561cb7dab07cbd96d6e8b</anchor>
      <arglist>(const char *attr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAttributes</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>b6df920921539a5ecb54888b3d49b6f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cXMLAttributeMap &amp;</type>
      <name>getAttributes</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>f629e2b3be3db7cd9a8f9c4ee506dc6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParentNode</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>4857a23b65658917fb5242f3431f608e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasChildren</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>9c5f1dcc9cf4630d48af6498fd238255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>68ceb3e31024a045ec24aa88c1284672</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getLastChild</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>5adbe2320255672a363bf044632da8f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>f91880587d491e5010de574dd69f6fd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getPreviousSibling</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>966855138e47374343d018202278ec7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>7d0dd840b917adb96a0d609a7253d5c8</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>463ab9af802e9f73d7d99fa90513a5dd</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildren</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>4269fc8a225acf95bc86406a6160e2d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildrenByTagName</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>9491b5c135bcef38916e7dd2a2dce207</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getElementsByTagName</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>c497a6b66b7f49c6741ad4e5368b28ec</anchor>
      <arglist>(const char *tagname) const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>514c5ee1ad0413512590bbedf82e2407</anchor>
      <arglist>(const char *tagname, const char *attr, const char *attrvalue=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getElementById</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>8c9579eb2b55718f3d565c1916b3372e</anchor>
      <arglist>(const char *idattrvalue) const </arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getElementByPath</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>090da9780482335d7bf1a098310611a7</anchor>
      <arglist>(const char *pathexpression, cXMLElement *root=NULL, ParamResolver *resolver=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debugDump</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>8e9623552af52b00ea0a18b8232c8488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classcXMLElement.html</anchorfile>
      <anchor>165e31a04a52931178ba3b6ae2b185ae</anchor>
      <arglist>() const </arglist>
    </member>
    <class kind="class">cXMLElement::ParamResolver</class>
  </compound>
  <compound kind="class">
    <name>cXMLElement::ParamResolver</name>
    <filename>classcXMLElement_1_1ParamResolver.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classcXMLElement_1_1ParamResolver.html</anchorfile>
      <anchor>924af4bd77addefa9ea48e0c5fac594f</anchor>
      <arglist>(const char *paramname, std::string &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExecuteOnStartup</name>
    <filename>classExecuteOnStartup.html</filename>
  </compound>
  <compound kind="class">
    <name>ModNameParamResolver</name>
    <filename>classModNameParamResolver.html</filename>
    <base>cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classModNameParamResolver.html</anchorfile>
      <anchor>b36e4d81f521b3a5aa4f64417b2418fc</anchor>
      <arglist>(const char *paramname, std::string &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>opp_string</name>
    <filename>classopp__string.html</filename>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>e3f7634d2e82806eff522981c0ec9733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>1463fa2c576b27b32dfecfc97e674923</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a78ea93f10e2e800cff3e3ef5b66e426</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~opp_string</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>ef59858c19f1ed70ed6d2f80e417c1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>a66a083b034ac9a5bb3e8f5eed8461b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>80750ed79bd25f8a8ef620b044568f2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>buffer</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>89166d50fffc29d2eb89f5f20d084f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>reserve</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>002643451a05d407f4112f6e87ae1f43</anchor>
      <arglist>(unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operator=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>241df9cd2daf254a2bb940d744fec9f2</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classopp__string.html</anchorfile>
      <anchor>d201a8b19d4b0179408bb3a6f7aa0deb</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StringMapParamResolver</name>
    <filename>classStringMapParamResolver.html</filename>
    <base>cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classStringMapParamResolver.html</anchorfile>
      <anchor>c0e22351ac473c783e26bce16bdb5a22</anchor>
      <arglist>(const char *paramname, std::string &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>APIChanges</name>
    <title>API Changes</title>
    <filename>APIChanges</filename>
  </compound>
  <compound kind="group">
    <name>SimCore</name>
    <title>Simulation core classes</title>
    <filename>group__SimCore.html</filename>
    <class kind="class">cChannel</class>
    <class kind="class">cBasicChannel</class>
    <class kind="class">cGate</class>
    <class kind="class">cMessage</class>
    <class kind="class">cModule</class>
    <class kind="class">cCompoundModule</class>
    <class kind="class">cObject</class>
    <class kind="class">cPar</class>
    <class kind="class">cPolymorphic</class>
    <class kind="class">cSimpleModule</class>
    <class kind="class">cSimulation</class>
    <class kind="class">cVisitor</class>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Container classes</title>
    <filename>group__Containers.html</filename>
    <class kind="class">cBag</class>
    <class kind="class">cArray</class>
    <class kind="class">cDefaultList</class>
    <class kind="class">cLinkedList</class>
    <class kind="class">cQueue</class>
  </compound>
  <compound kind="group">
    <name>RandomNumbers</name>
    <title>Random number generation</title>
    <filename>group__RandomNumbers.html</filename>
    <class kind="class">cRNG</class>
  </compound>
  <compound kind="group">
    <name>Statistics</name>
    <title>Statistical data collection</title>
    <filename>group__Statistics.html</filename>
    <class kind="class">cDensityEstBase</class>
    <class kind="class">cTransientDetection</class>
    <class kind="class">cAccuracyDetection</class>
    <class kind="class">cTDExpandingWindows</class>
    <class kind="class">cADByStddev</class>
    <class kind="class">cHistogramBase</class>
    <class kind="class">cEqdHistogramBase</class>
    <class kind="class">cLongHistogram</class>
    <class kind="class">cDoubleHistogram</class>
    <class kind="class">cKSplit</class>
    <class kind="class">cOutVector</class>
    <class kind="class">cPSquare</class>
    <class kind="class">cStatistic</class>
    <class kind="class">cStdDev</class>
    <class kind="class">cWeightedStdDev</class>
    <class kind="class">cVarHistogram</class>
  </compound>
  <compound kind="group">
    <name>SimSupport</name>
    <title>Utility classes</title>
    <filename>group__SimSupport.html</filename>
    <class kind="class">cDisplayString</class>
    <class kind="class">cException</class>
    <class kind="class">cFSM</class>
    <class kind="class">cPacket</class>
    <class kind="class">cStringTokenizer</class>
    <class kind="class">cTopology</class>
    <class kind="class">cVisitor</class>
    <class kind="class">cXMLElement</class>
  </compound>
  <compound kind="group">
    <name>Envir</name>
    <title>User interface: cEnvir and ev</title>
    <filename>group__Envir.html</filename>
    <class kind="class">cEnvir</class>
    <member kind="variable">
      <type>ENVIR_API cEnvir</type>
      <name>ev</name>
      <anchorfile>group__Envir.html</anchorfile>
      <anchor>g64df4cf1ebaf5fbc18bbf3de9ef03226</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>EnumsTypes</name>
    <title>Enums, types, function typedefs</title>
    <filename>group__EnumsTypes.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>CoroutineFnp</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g5082fb55ece1f2bcc5f8c363940fdd51</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>PostTDFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g1911cf4a98767faf7f10f04113491294</anchor>
      <arglist>)(cTransientDetection *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>PostADFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g47ba470d5316b4490141319a7f7d9d45</anchor>
      <arglist>)(cAccuracyDetection *, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g253ef95979a4524c9c19e1b477215ce5</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gde5c525991f38f272681b30cf390d940</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>DisplayStringNotifyFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g7b5a9413efc71183a63d6b47e443b6f8</anchor>
      <arglist>)(cModule *, bool, void *)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>CompareFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g2de15852c38122134b3ca5c6d8d083a6</anchor>
      <arglist>)(cObject *a, cObject *b)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>RecordFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g9a964e35cc0cff46bf2c3a62891703db</anchor>
      <arglist>)(void *, simtime_t, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>cModule *(*</type>
      <name>ModuleCreateFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gc82c0859c33ea3b2e327b1770596ab7b</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>cPar *(*</type>
      <name>ParCreateFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g946b70e28b4781a9abb0bd4f8ab42915</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>VoidDelFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g4b8f31d53f8936a0c556ceece17a058f</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void *(*</type>
      <name>VoidDupFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g0f99009fbbd87108d6c0679188d7730a</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gb3ffd18aae8b8dbb2e797628ce2f757d</anchor>
      <arglist>)(...)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFuncNoArg</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g34fb283ee632e346870a8baca410c7dc</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc1Arg</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g3279cd74e9efb4bfc039c473e12219ac</anchor>
      <arglist>)(double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc2Args</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>ga7906ba126493cedf17f179e0f17d51e</anchor>
      <arglist>)(double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc3Args</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>g17b34e3481c3b3109f62e0be61987b8e</anchor>
      <arglist>)(double, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc4Args</name>
      <anchorfile>group__EnumsTypes.html</anchorfile>
      <anchor>gd3926f4c5f03adcd8711aba50ebf92e3</anchor>
      <arglist>)(double, double, double, double)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Functions</name>
    <title>Functions</title>
    <filename>group__Functions.html</filename>
    <member kind="function">
      <type>T</type>
      <name>check_and_cast</name>
      <anchorfile>group__Functions.html</anchorfile>
      <anchor>gbc43aaaa3d536d68102abb52586214cc</anchor>
      <arglist>(cPolymorphic *p)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Macros</name>
    <title>Macros</title>
    <filename>group__Macros.html</filename>
  </compound>
  <compound kind="group">
    <name>Internals</name>
    <title>Internal classes</title>
    <filename>group__Internals.html</filename>
    <class kind="class">cClassDescriptor</class>
    <class kind="class">cCoroutine</class>
    <class kind="class">cEnum</class>
    <class kind="class">cTerminationException</class>
    <class kind="class">cRuntimeError</class>
    <class kind="class">cEndModuleException</class>
    <class kind="class">cStackCleanupException</class>
    <class kind="class">cMessageHeap</class>
    <class kind="class">cModulePar</class>
    <class kind="class">cScheduler</class>
    <class kind="class">cSequentialScheduler</class>
    <class kind="class">cRealTimeScheduler</class>
    <class kind="class">cSimulation</class>
    <class kind="class">cModuleInterface</class>
    <class kind="class">cModuleType</class>
    <class kind="class">cChannelType</class>
    <class kind="class">cLinkType</class>
    <class kind="class">cNetworkType</class>
    <class kind="class">cFunctionType</class>
    <class kind="class">cClassRegister</class>
    <class kind="class">cWatchBase</class>
    <class kind="class">cGenericReadonlyWatch</class>
    <class kind="class">cGenericAssignableWatch</class>
    <class kind="class">cWatch_bool</class>
    <class kind="class">cWatch_char</class>
    <class kind="class">cWatch_uchar</class>
    <class kind="class">cWatch_stdstring</class>
    <class kind="class">cWatch_cPolymorphic</class>
    <class kind="class">cWatch_cPolymorphicPtr</class>
    <class kind="class">ExecuteOnStartup</class>
    <class kind="class">cSingleton</class>
    <class kind="class">opp_string</class>
    <class kind="class">cContextSwitcher</class>
    <class kind="class">cContextTypeSwitcher</class>
    <member kind="variable">
      <type>SIM_API cSimulation</type>
      <name>simulation</name>
      <anchorfile>group__Internals.html</anchorfile>
      <anchor>gcc6b8f0f4327da5ebced6a5c0979483d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>EnvirExtensions</name>
    <title>Extension interface to Envir</title>
    <filename>group__EnvirExtensions.html</filename>
    <class kind="class">cConfiguration</class>
    <class kind="class">cEnvir</class>
    <class kind="class">cRNG</class>
    <class kind="class">cScheduler</class>
    <class kind="class">cOutputVectorManager</class>
    <class kind="class">cOutputScalarManager</class>
    <class kind="class">cSnapshotManager</class>
  </compound>
  <compound kind="group">
    <name>ParsimBrief</name>
    <title>Parallel simulation extension</title>
    <filename>group__ParsimBrief.html</filename>
    <class kind="class">cCommBuffer</class>
    <class kind="class">cParsimCommunications</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_PARSIM_PARTITIONS</name>
      <anchorfile>group__ParsimBrief.html</anchorfile>
      <anchor>ga82c54be13c3f5bcbebe1d4d648e8c77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/home/andras/omnetpp-3.4/include/</name>
    <path>/home/andras/omnetpp-3.4/include/</path>
    <filename>dir_559b0ddaca1bdb28c313d8ffeea4eba0.html</filename>
    <file>carray.h</file>
    <file>cchannel.h</file>
    <file>cclassdescriptor.h</file>
    <file>ccommbuffer.h</file>
    <file>cconfig.h</file>
    <file>ccoroutine.h</file>
    <file>cdefaultlist.h</file>
    <file>cdensity.h</file>
    <file>cdetect.h</file>
    <file>cdispstr.h</file>
    <file>cenum.h</file>
    <file>cenvir.h</file>
    <file>cexception.h</file>
    <file>cfsm.h</file>
    <file>cgate.h</file>
    <file>chist.h</file>
    <file>cksplit.h</file>
    <file>cllist.h</file>
    <file>cmessage.h</file>
    <file>cmodule.h</file>
    <file>cmsgheap.h</file>
    <file>cobject.h</file>
    <file>compat.h</file>
    <file>coutvect.h</file>
    <file>cpacket.h</file>
    <file>cpar.h</file>
    <file>cparsimcomm.h</file>
    <file>cpolymorphic.h</file>
    <file>cpsquare.h</file>
    <file>cqueue.h</file>
    <file>crng.h</file>
    <file>cscheduler.h</file>
    <file>csimplemodule.h</file>
    <file>csimul.h</file>
    <file>cstat.h</file>
    <file>cstk.h</file>
    <file>cstlwatch.h</file>
    <file>cstrtokenizer.h</file>
    <file>ctopo.h</file>
    <file>ctypes.h</file>
    <file>cvarhist.h</file>
    <file>cvisitor.h</file>
    <file>cwatch.h</file>
    <file>cxmlelement.h</file>
    <file>defs.h</file>
    <file>distrib.h</file>
    <file>envirext.h</file>
    <file>errmsg.h</file>
    <file>globals.h</file>
    <file>index.h</file>
    <file>macros.h</file>
    <file>omnetpp.h</file>
    <file>onstartup.h</file>
    <file>opp_string.h</file>
    <file>protocol.h</file>
    <file>random.h</file>
    <file>util.h</file>
  </compound>
</tagfile>
