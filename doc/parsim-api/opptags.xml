<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>OMNeT++ Parallel simulation support</title>
    <filename>main</filename>
  </compound>
  <compound kind="class">
    <name>cAdvancedLinkDelayLookahead</name>
    <filename>classcAdvancedLinkDelayLookahead.html</filename>
    <base>cNMPLookahead</base>
    <member kind="function">
      <type></type>
      <name>cAdvancedLinkDelayLookahead</name>
      <anchorfile>classcAdvancedLinkDelayLookahead.html</anchorfile>
      <anchor>d4b1b0d64031dcc5c452d1b499f977d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cAdvancedLinkDelayLookahead</name>
      <anchorfile>classcAdvancedLinkDelayLookahead.html</anchorfile>
      <anchor>9f1c2a1c9bfc14bc4a5158247bf3a029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcAdvancedLinkDelayLookahead.html</anchorfile>
      <anchor>ca52100a3946a184196ce9dbf9b54c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcAdvancedLinkDelayLookahead.html</anchorfile>
      <anchor>1eb4d24f15a4ac7e13ebad9eeeb9c30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCurrentLookahead</name>
      <anchorfile>classcAdvancedLinkDelayLookahead.html</anchorfile>
      <anchor>ddb2398c2aa2c26d5663dccf9d931d80</anchor>
      <arglist>(cMessage *msg, int procId, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCurrentLookahead</name>
      <anchorfile>classcAdvancedLinkDelayLookahead.html</anchorfile>
      <anchor>09e1030e9fae8b5c9aa5e87d1d84cdb5</anchor>
      <arglist>(int procId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cCommBufferBase</name>
    <filename>classcCommBufferBase.html</filename>
    <base>cCommBuffer</base>
    <member kind="function">
      <type></type>
      <name>cCommBufferBase</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>0b910949a012dd4ee7858f91830aa208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCommBufferBase</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>d4e0936aa0ca706add3d5c140bd58157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getBuffer</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>8ca35020134c2c4a360260c38e0e781e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBufferLength</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>29283e4c6df5a61e3ee90f81f7a81005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateAtLeast</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>d0787e90e1f56176fefa2d1ebdd8145f</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessageSize</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>5aa916ecc0c6c074bfddd96166250def</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMessageSize</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>225090ef5ee50db52338289b332ab8f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>c25fc94d197956458eb868493eea6ac0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBufferEmpty</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>e72a5e7abe6d89273d37936528ef0c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assertBufferEmpty</name>
      <anchorfile>classcCommBufferBase.html</anchorfile>
      <anchor>5e223299e72c6c77cd33ebcd2b4aa23a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cFileCommBuffer</name>
    <filename>classcFileCommBuffer.html</filename>
    <base>cCommBufferBase</base>
    <member kind="function">
      <type></type>
      <name>cFileCommBuffer</name>
      <anchorfile>classcFileCommBuffer.html</anchorfile>
      <anchor>3694bf71f2974bf02a2ab202dbf45d1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFileCommBuffer</name>
      <anchorfile>classcFileCommBuffer.html</anchorfile>
      <anchor>4bd2428fa21f502d043e71f03c5a0dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMessageSize</name>
      <anchorfile>classcFileCommBuffer.html</anchorfile>
      <anchor>e666cbc40195fbc2a00a1fcfa8970911</anchor>
      <arglist>(int size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cFileCommunications</name>
    <filename>classcFileCommunications.html</filename>
    <base>cParsimCommunications</base>
    <member kind="function">
      <type></type>
      <name>cFileCommunications</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>24ae75dd9dad28db15061a9ebef2569d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFileCommunications</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>05dd84e5bdedf911e5187e68c71c1e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>fb860148073e9a3251ad6c2f627f971c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>679069130bbc8fa2660eb56b13fd8e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>18a374aeaa64eda54d935077d0d256d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>143f34baa0453ce3be779ac825a1bc5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>d6b9b1b3bd1b7698b555f589d6624fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>e730f68975734701ff9df5c95c20f078</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>f2c52f8ee8a05911d9978dffc22d0705</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>1294fa9fc0c57cfd815fe40309f37375</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classcFileCommunications.html</anchorfile>
      <anchor>278de4a9809e306a17e4c13c234446e8</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cIdealSimulationProtocol</name>
    <filename>classcIdealSimulationProtocol.html</filename>
    <base>cParsimProtocolBase</base>
    <member kind="function">
      <type></type>
      <name>cIdealSimulationProtocol</name>
      <anchorfile>classcIdealSimulationProtocol.html</anchorfile>
      <anchor>78b55cc84e22e9a60969e0d799897bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIdealSimulationProtocol</name>
      <anchorfile>classcIdealSimulationProtocol.html</anchorfile>
      <anchor>245fed90fa809798a5fdf468866c11d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcIdealSimulationProtocol.html</anchorfile>
      <anchor>f040f232d80796feab9d006d68152d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcIdealSimulationProtocol.html</anchorfile>
      <anchor>81a3be4e7ae014f48d91c687d5515a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcIdealSimulationProtocol.html</anchorfile>
      <anchor>db141c3747e28a6c37d80f2267e76a01</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cISPEventLogger</name>
    <filename>classcISPEventLogger.html</filename>
    <base>cNullMessageProtocol</base>
    <member kind="function">
      <type></type>
      <name>cISPEventLogger</name>
      <anchorfile>classcISPEventLogger.html</anchorfile>
      <anchor>1068d01d41a4c12f2b2d2355f005614b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cISPEventLogger</name>
      <anchorfile>classcISPEventLogger.html</anchorfile>
      <anchor>a1e0d7ab20067f8f6a4eba7e780b5b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcISPEventLogger.html</anchorfile>
      <anchor>f13470203efeabbe85fe9b8e44ab67cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcISPEventLogger.html</anchorfile>
      <anchor>cf49917b18ca3a98f50ddb1d98c3d97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processOutgoingMessage</name>
      <anchorfile>classcISPEventLogger.html</anchorfile>
      <anchor>4ed377ee577edff6565fcf67f89f1c60</anchor>
      <arglist>(cMessage *msg, int procId, int moduleId, int gateId, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcISPEventLogger.html</anchorfile>
      <anchor>8090860c6b4ee21a71131abd12c56732</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cLinkDelayLookahead</name>
    <filename>classcLinkDelayLookahead.html</filename>
    <base>cNMPLookahead</base>
    <member kind="function">
      <type></type>
      <name>cLinkDelayLookahead</name>
      <anchorfile>classcLinkDelayLookahead.html</anchorfile>
      <anchor>d08a0425d14f2fa54fe559af0eaed18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLinkDelayLookahead</name>
      <anchorfile>classcLinkDelayLookahead.html</anchorfile>
      <anchor>c6035d718c5e7f8f3b3f58cfe10cdcdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcLinkDelayLookahead.html</anchorfile>
      <anchor>d3715d9e903a5ff505351165e1db2c50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcLinkDelayLookahead.html</anchorfile>
      <anchor>b90b7147b17f70d215e88e3be2c7cf1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCurrentLookahead</name>
      <anchorfile>classcLinkDelayLookahead.html</anchorfile>
      <anchor>01b255b75d006133c9939ea6c3168ef1</anchor>
      <arglist>(cMessage *msg, int procId, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCurrentLookahead</name>
      <anchorfile>classcLinkDelayLookahead.html</anchorfile>
      <anchor>2c6e6fdac3096ea6ff7d2eef355b5903</anchor>
      <arglist>(int procId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMemCommBuffer</name>
    <filename>classcMemCommBuffer.html</filename>
    <base>cCommBufferBase</base>
    <member kind="function">
      <type></type>
      <name>cMemCommBuffer</name>
      <anchorfile>classcMemCommBuffer.html</anchorfile>
      <anchor>bc172394d4b5bf07f4e42e737cb829da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMemCommBuffer</name>
      <anchorfile>classcMemCommBuffer.html</anchorfile>
      <anchor>7429cfd00c9285e596c5101dbbf10bb3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMPICommBuffer</name>
    <filename>classcMPICommBuffer.html</filename>
    <base>cCommBufferBase</base>
    <member kind="function">
      <type></type>
      <name>cMPICommBuffer</name>
      <anchorfile>classcMPICommBuffer.html</anchorfile>
      <anchor>f1933460959e68e2dd42171cc78016c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMPICommBuffer</name>
      <anchorfile>classcMPICommBuffer.html</anchorfile>
      <anchor>edccf9b4d2708d1400fdb4b62ee8b66e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cMPICommunications</name>
    <filename>classcMPICommunications.html</filename>
    <base>cParsimCommunications</base>
    <member kind="function">
      <type></type>
      <name>cMPICommunications</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>170c8950e90d47d0b6771fb85d3ee3f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMPICommunications</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>dda3efc3ac8f1b9c1bf004102b806907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>e6b9c542c678a6d1c1b99f0d855d7269</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>1db354b74f4b311a55137c85cf0158bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>3ffeae4e6e1d5e9898d7af5a94ae3c9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>b165a6e904b16af43351572281a10fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>b8599a857e449b21178b223927e964fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>f14b9a5edd4812d4a3196f48a69a3e57</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>a0aab83ca03d4a1a68bbba12aaea6c50</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcast</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>b66ada2894acf96c31bb3c41114563fc</anchor>
      <arglist>(cCommBuffer *buffer, int tag)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>d4c3ea71f3fb6f168cf53f6195e7059a</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>cf62e0d668d5f39948b5e1d4b8bfea6c</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual cMPICommBuffer *</type>
      <name>doCreateCommBuffer</name>
      <anchorfile>classcMPICommunications.html</anchorfile>
      <anchor>7ec045de947d62b078960cf16a02f303</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNamedPipeCommunications</name>
    <filename>classcNamedPipeCommunications.html</filename>
    <base>cParsimCommunications</base>
    <member kind="function">
      <type></type>
      <name>cNamedPipeCommunications</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>e9732bd04e3cae14e3acce4194afe847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNamedPipeCommunications</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>dc3cfb4361c72a85acf3033fe078ffba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>2fa56f19ab58baea5c11a79d80decd87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>ecfe91b058e0fd96b6a9b03ba7204acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>3d23596f4a09c65ebf7bdd06e182043d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>8adeace8f303f1e657d659575f12ff76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>cded1568f2caa6d8dafe1981fe7cddfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>96f0c11c545c6bdde09ac4323c0e8f83</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>d6a71b082bb39b538d4bbcba02eb758a</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>54686818bf7c48ea2a954099c4332083</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classcNamedPipeCommunications.html</anchorfile>
      <anchor>6b98bde1b19d944ea6810140575028f6</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNMPLookahead</name>
    <filename>classcNMPLookahead.html</filename>
    <base>cPolymorphic</base>
    <member kind="function">
      <type></type>
      <name>cNMPLookahead</name>
      <anchorfile>classcNMPLookahead.html</anchorfile>
      <anchor>54d8e2783fb07483ebc8d35ff536911e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNMPLookahead</name>
      <anchorfile>classcNMPLookahead.html</anchorfile>
      <anchor>40035133d5e53d23b87f012b7cc81fcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>classcNMPLookahead.html</anchorfile>
      <anchor>4275e050577ac8d4bf0c2f08417d5e10</anchor>
      <arglist>(cSimulation *simul, cParsimPartition *seg, cParsimCommunications *co)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcNMPLookahead.html</anchorfile>
      <anchor>4a942288e70f3a056f16769ee4c91322</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcNMPLookahead.html</anchorfile>
      <anchor>7cf1510ea29b547d5a888a24f1dbee5a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCurrentLookahead</name>
      <anchorfile>classcNMPLookahead.html</anchorfile>
      <anchor>8fc40adb220dd277195d3a26959301ca</anchor>
      <arglist>(cMessage *msg, int procId, void *data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCurrentLookahead</name>
      <anchorfile>classcNMPLookahead.html</anchorfile>
      <anchor>05067ebcce11cfe1e1dbeb93e405130b</anchor>
      <arglist>(int procId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNoSynchronization</name>
    <filename>classcNoSynchronization.html</filename>
    <base>cParsimProtocolBase</base>
    <member kind="function">
      <type></type>
      <name>cNoSynchronization</name>
      <anchorfile>classcNoSynchronization.html</anchorfile>
      <anchor>084348aff095868fc8eb0e1456b68e99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNoSynchronization</name>
      <anchorfile>classcNoSynchronization.html</anchorfile>
      <anchor>4af0b5449bbb8102701c39f4fed03728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcNoSynchronization.html</anchorfile>
      <anchor>7623496e812e4b336e61a335d1a2de5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcNoSynchronization.html</anchorfile>
      <anchor>8890eeaea6a5b22ade998c9385afbd92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcNoSynchronization.html</anchorfile>
      <anchor>fee77b82ceac1faf75f80357fb554119</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cNullMessageProtocol</name>
    <filename>classcNullMessageProtocol.html</filename>
    <base>cParsimProtocolBase</base>
    <member kind="function">
      <type></type>
      <name>cNullMessageProtocol</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>413b54fee34dae895909d7bf9157ea3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNullMessageProtocol</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>2b2d61f688c437b032eeb2362cb4a78d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContext</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>bdd2bb5996a52ac0267bc12bbc7895a4</anchor>
      <arglist>(cSimulation *sim, cParsimPartition *seg, cParsimCommunications *co)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLaziness</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>946c4242319badab6fa09df333e8f2d3</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLaziness</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>04a6db41e8bc5d091152a0b3d969a4c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>20867974378be82dbd3c63b142ca6f84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>8267216290982d18b54bdba4ae47ffa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>ebda0e31278fb2e91f7d974b14167dee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutgoingMessage</name>
      <anchorfile>classcNullMessageProtocol.html</anchorfile>
      <anchor>edb50f775889af416f5f0dc79b95ba8b</anchor>
      <arglist>(cMessage *msg, int procId, int moduleId, int gateId, void *data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cParsimPartition</name>
    <filename>classcParsimPartition.html</filename>
    <base>cPolymorphic</base>
    <member kind="function">
      <type></type>
      <name>cParsimPartition</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>7ef8367fda567f3ebf440f63b3c7b0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParsimPartition</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>4b96d85d40be7b143c9b7eb2b2c867fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>6f4c35976a45590fc9f36818529bd5f5</anchor>
      <arglist>(cSimulation *sim, cParsimCommunications *comm, cParsimSynchronizer *synch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRun</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>119314ed364dde4949be64f687f90526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endRun</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>a5ad76488774911ebfeb17e8b72652f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>91ed3c4bef703f75bdfa1329b903ad6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutgoingMessage</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>be2edb6d774bd55c74559e40e88b43a8</anchor>
      <arglist>(cMessage *msg, int procId, int moduleId, int gateId, void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processReceivedBuffer</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>5a0ae0a2981856ac8d76db496f75ef49</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int sourceProcId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processReceivedMessage</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>0fe063ee22ec1cceeab951e6afab01b7</anchor>
      <arglist>(cMessage *msg, int destModuleId, int destGateId, int sourceProcId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcastTerminationException</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>a2fc164824c2edd190524db6fe5b83ab</anchor>
      <arglist>(cTerminationException *e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcastException</name>
      <anchorfile>classcParsimPartition.html</anchorfile>
      <anchor>20178ba81a98cc2cb0e8f991fba18e13</anchor>
      <arglist>(cException *e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cParsimProtocolBase</name>
    <filename>classcParsimProtocolBase.html</filename>
    <base>cParsimSynchronizer</base>
    <member kind="function">
      <type></type>
      <name>cParsimProtocolBase</name>
      <anchorfile>classcParsimProtocolBase.html</anchorfile>
      <anchor>c46d4ff13e801292ea5e9bea0de0e005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParsimProtocolBase</name>
      <anchorfile>classcParsimProtocolBase.html</anchorfile>
      <anchor>eb7840dce6cb316bc9477f03eca17b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processOutgoingMessage</name>
      <anchorfile>classcParsimProtocolBase.html</anchorfile>
      <anchor>a9876e5755fcbd46f84f65902a06a3b5</anchor>
      <arglist>(cMessage *msg, int procId, int moduleId, int gateId, void *data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cParsimSynchronizer</name>
    <filename>classcParsimSynchronizer.html</filename>
    <base>cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cParsimSynchronizer</name>
      <anchorfile>classcParsimSynchronizer.html</anchorfile>
      <anchor>50b96bf6fdd9845a2e86d77f72f558be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParsimSynchronizer</name>
      <anchorfile>classcParsimSynchronizer.html</anchorfile>
      <anchor>43e54dfe3578dd762c00c7e7850b3ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setContext</name>
      <anchorfile>classcParsimSynchronizer.html</anchorfile>
      <anchor>1e15213ef69fa6b63bfcd2886b12fb6b</anchor>
      <arglist>(cSimulation *sim, cParsimPartition *seg, cParsimCommunications *co)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classcParsimSynchronizer.html</anchorfile>
      <anchor>e06fbf26e471450be87916a9dee81a8b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classcParsimSynchronizer.html</anchorfile>
      <anchor>28a2e814b5205a514ba029f10aa9968f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cMessage *</type>
      <name>getNextEvent</name>
      <anchorfile>classcParsimSynchronizer.html</anchorfile>
      <anchor>af816d634a5ae349fe9b1191baf944a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processOutgoingMessage</name>
      <anchorfile>classcParsimSynchronizer.html</anchorfile>
      <anchor>ccb6cd4fa5b9d3ae3b50adf2aa1e007d</anchor>
      <arglist>(cMessage *msg, int procId, int moduleId, int gateId, void *data)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPlaceHolderModule</name>
    <filename>classcPlaceHolderModule.html</filename>
    <base>cModule</base>
    <member kind="function">
      <type></type>
      <name>cPlaceHolderModule</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>c6a58ebccb8942c9ebef5713f068006a</anchor>
      <arglist>(const cPlaceHolderModule &amp;mod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPlaceHolderModule</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>038825ac680e9d25ec06be514315172b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPlaceHolderModule</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>ae2397611fa5e1fcac64086b1ba7a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPlaceHolderModule &amp;</type>
      <name>operator=</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>98dbb8c104d80862e7c4305cef7c765a</anchor>
      <arglist>(const cPlaceHolderModule &amp;mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>06c7afcd75ed8b57ccca3aa0bc0cdbe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>arrived</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>e0dea5db7f8c0a75c9be3f81198a8ee1</anchor>
      <arglist>(cMessage *msg, int n, simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>6724c1229fee245a221882c2ae840088</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>2c05bce466b9d8c47fdb3bda70fafabe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classcPlaceHolderModule.html</anchorfile>
      <anchor>27c0ffb307261ea4a7fa61f28eb43613</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cProxyGate</name>
    <filename>classcProxyGate.html</filename>
    <base>cGate</base>
    <member kind="function">
      <type></type>
      <name>cProxyGate</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>e2fd30ec2021a82391c94a54eb57f082</anchor>
      <arglist>(const char *name, char tp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProxyGate</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>3e967b732a262f8a0e12785d58818b57</anchor>
      <arglist>(const cProxyGate &amp;gate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProxyGate</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>87a7ffdb7812b733407ab1b6479823da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolymorphic *</type>
      <name>dup</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>bdd8b6982dde6ea36e68e0bb366c9c59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>cProxyGate &amp;</type>
      <name>operator=</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>e8866d9fbc6bb667f8d104227d38b2fb</anchor>
      <arglist>(const cProxyGate &amp;gate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>info</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>2410f535ee29a96eee4ad1a76f21f30a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>759676e184721645a897036782338e17</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRemoteGate</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>90a09d3a51a6844698971d73ff46a011</anchor>
      <arglist>(int procId, int moduleId, int gateId)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteProcId</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>15d9dc88c8fc19492e2c9b1b9ab3de95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteModuleId</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>417b7a308cfde0b3444fd5dc1b907827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteGateId</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>cf664200594bafcb80cc8652121a5c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPartition</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>2c596a7342ba25e02ca3cb97e331e2dc</anchor>
      <arglist>(cParsimPartition *seg)</arglist>
    </member>
    <member kind="function">
      <type>cParsimPartition *</type>
      <name>getPartition</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>80dde575cda1d77a8d3cab453804be55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSynchData</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>936421ec0eb4e65937a531f55cc52486</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getSynchData</name>
      <anchorfile>classcProxyGate.html</anchorfile>
      <anchor>68603a73252defc15a3809547de79515</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPtrPassingMPICommBuffer</name>
    <filename>classcPtrPassingMPICommBuffer.html</filename>
    <base>cMPICommBuffer</base>
    <member kind="function">
      <type></type>
      <name>cPtrPassingMPICommBuffer</name>
      <anchorfile>classcPtrPassingMPICommBuffer.html</anchorfile>
      <anchor>383f101b338d107a0997387aa0bddfaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classcPtrPassingMPICommBuffer.html</anchorfile>
      <anchor>1c75f2f23143d5efbbca5ada1d9c4c30</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classcPtrPassingMPICommBuffer.html</anchorfile>
      <anchor>dd56e675344ae415dbaf8889ec636f48</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cPtrPassingMPICommunications</name>
    <filename>classcPtrPassingMPICommunications.html</filename>
    <base>cMPICommunications</base>
    <member kind="function">
      <type></type>
      <name>cPtrPassingMPICommunications</name>
      <anchorfile>classcPtrPassingMPICommunications.html</anchorfile>
      <anchor>0fb2e2f3b8af16566689fffe4fe38cb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMPICommBuffer *</type>
      <name>doCreateCommBuffer</name>
      <anchorfile>classcPtrPassingMPICommunications.html</anchorfile>
      <anchor>293204fc02dae7e88343ceec41afbcef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cReceivedException</name>
    <filename>classcReceivedException.html</filename>
    <base>cException</base>
    <member kind="function">
      <type></type>
      <name>cReceivedException</name>
      <anchorfile>classcReceivedException.html</anchorfile>
      <anchor>cef35dcb7ccb90bee53171c8be7278a0</anchor>
      <arglist>(int sourceProcId, const char *msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cReceivedTerminationException</name>
    <filename>classcReceivedTerminationException.html</filename>
    <base>cTerminationException</base>
    <member kind="function">
      <type></type>
      <name>cReceivedTerminationException</name>
      <anchorfile>classcReceivedTerminationException.html</anchorfile>
      <anchor>96a721f7be6276d4a9705c722ed823ee</anchor>
      <arglist>(int sourceProcId, const char *msg)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Parsim</name>
    <title>Parallel simulation support</title>
    <filename>group__Parsim.html</filename>
    <class kind="class">cAdvancedLinkDelayLookahead</class>
    <class kind="class">cFileCommunications</class>
    <class kind="class">cFileCommBuffer</class>
    <class kind="class">cIdealSimulationProtocol</class>
    <class kind="class">cISPEventLogger</class>
    <class kind="class">cLinkDelayLookahead</class>
    <class kind="class">cMemCommBuffer</class>
    <class kind="class">cMPICommunications</class>
    <class kind="class">cMPICommBuffer</class>
    <class kind="class">cNamedPipeCommunications</class>
    <class kind="class">cNMPLookahead</class>
    <class kind="class">cNoSynchronization</class>
    <class kind="class">cNullMessageProtocol</class>
    <class kind="class">cParsimPartition</class>
    <class kind="class">cParsimProtocolBase</class>
    <class kind="class">cParsimSynchronizer</class>
    <class kind="class">cPlaceHolderModule</class>
    <class kind="class">cProxyGate</class>
    <class kind="class">cPtrPassingMPICommunications</class>
    <class kind="class">cPtrPassingMPICommBuffer</class>
    <class kind="class">cReceivedException</class>
    <class kind="class">cReceivedTerminationException</class>
  </compound>
  <compound kind="dir">
    <name>/home/andras/omnetpp-3.4/src/sim/parsim/</name>
    <path>/home/andras/omnetpp-3.4/src/sim/parsim/</path>
    <filename>dir_dc61091ecd7d86ab8d343c4951034b90.html</filename>
    <file>cadvlinkdelaylookahead.h</file>
    <file>ccommbufferbase.h</file>
    <file>cfilecomm.h</file>
    <file>cfilecommbuffer.h</file>
    <file>cidealsimulationprot.h</file>
    <file>cispeventlogger.h</file>
    <file>clinkdelaylookahead.h</file>
    <file>cmemcommbuffer.h</file>
    <file>cmpicomm.h</file>
    <file>cmpicommbuffer.h</file>
    <file>cnamedpipecomm.h</file>
    <file>cnmplookahead.h</file>
    <file>cnosynchronization.h</file>
    <file>cnullmessageprot.h</file>
    <file>cparsimpartition.h</file>
    <file>cparsimprotocolbase.h</file>
    <file>cparsimsynchr.h</file>
    <file>cplaceholdermod.h</file>
    <file>cproxygate.h</file>
    <file>cptrpassingmpicomm.h</file>
    <file>cptrpassingmpicommbuffer.h</file>
    <file>creceivedexception.h</file>
    <file>messagetags.h</file>
    <file>parsimindex.h</file>
    <file>parsimutil.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/andras/omnetpp-3.4/src/sim/</name>
    <path>/home/andras/omnetpp-3.4/src/sim/</path>
    <filename>dir_b236e4799b75df93da0ebbbb06a873d2.html</filename>
    <dir>/home/andras/omnetpp-3.4/src/sim/parsim/</dir>
  </compound>
  <compound kind="dir">
    <name>/home/andras/omnetpp-3.4/src/</name>
    <path>/home/andras/omnetpp-3.4/src/</path>
    <filename>dir_d67b2ef61e2f70cbb4e574b4a776889d.html</filename>
    <dir>/home/andras/omnetpp-3.4/src/sim/</dir>
  </compound>
</tagfile>
